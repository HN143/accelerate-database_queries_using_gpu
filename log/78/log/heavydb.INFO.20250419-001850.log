2025-04-19T00:18:50.360252 I 39904 0 0 CommandLineOptions.cpp:1887  Max import threads 32
2025-04-19T00:18:50.360336 I 39904 0 0 CommandLineOptions.cpp:1896  Min CPU buffer pool slab size (in bytes) 268435456
2025-04-19T00:18:50.360345 I 39904 0 0 CommandLineOptions.cpp:1898  Max CPU buffer pool slab size (in bytes) 4294967296
2025-04-19T00:18:50.360349 I 39904 0 0 CommandLineOptions.cpp:1900  Min GPU buffer pool slab size (in bytes) 268435456
2025-04-19T00:18:50.360353 I 39904 0 0 CommandLineOptions.cpp:1902  Max GPU buffer pool slab size (in bytes) 4294967296
2025-04-19T00:18:50.360358 I 39904 0 0 CommandLineOptions.cpp:1904  calcite JVM max memory (in MB) 1024
2025-04-19T00:18:50.360361 I 39904 0 0 CommandLineOptions.cpp:1905  HeavyDB Server Port 6274
2025-04-19T00:18:50.360366 I 39904 0 0 CommandLineOptions.cpp:1906  HeavyDB Calcite Port 6279
2025-04-19T00:18:50.360369 I 39904 0 0 CommandLineOptions.cpp:1907  Enable Calcite view optimize true
2025-04-19T00:18:50.360374 I 39904 0 0 CommandLineOptions.cpp:1909  Allow Local Auth Fallback: enabled
2025-04-19T00:18:50.360378 I 39904 0 0 CommandLineOptions.cpp:1911  ParallelTop min threshold: 100000
2025-04-19T00:18:50.360382 I 39904 0 0 CommandLineOptions.cpp:1912  ParallelTop watchdog max: 20000000
2025-04-19T00:18:50.360386 I 39904 0 0 CommandLineOptions.cpp:1914  Enable Data Recycler: enabled
2025-04-19T00:18:50.360390 I 39904 0 0 CommandLineOptions.cpp:1917  	 Use hashtable cache: enabled
2025-04-19T00:18:50.360394 I 39904 0 0 CommandLineOptions.cpp:1920  		 Total amount of bytes that hashtable cache keeps: 4096 MB.
2025-04-19T00:18:50.360398 I 39904 0 0 CommandLineOptions.cpp:1922  		 Per-hashtable size limit: 2048 MB.
2025-04-19T00:18:50.360402 I 39904 0 0 CommandLineOptions.cpp:1925  	 Use query resultset cache: enabled
2025-04-19T00:18:50.360406 I 39904 0 0 CommandLineOptions.cpp:1928  		 Total amount of bytes that query resultset cache keeps: 4096 MB.
2025-04-19T00:18:50.360410 I 39904 0 0 CommandLineOptions.cpp:1930  		 Per-query resultset size limit: 2048 MB.
2025-04-19T00:18:50.360414 I 39904 0 0 CommandLineOptions.cpp:1933  		 Use auto query resultset caching: disabled
2025-04-19T00:18:50.360418 I 39904 0 0 CommandLineOptions.cpp:1940  		 Use query step skipping: enabled
2025-04-19T00:18:50.360422 I 39904 0 0 CommandLineOptions.cpp:1942  	 Use chunk metadata cache: enabled
2025-04-19T00:18:50.360426 I 39904 0 0 CommandLineOptions.cpp:1945 Executor Resource Manager: enabled
2025-04-19T00:18:50.360430 I 39904 0 0 CommandLineOptions.cpp:1948 	CPU kernel concurrency: enabled
2025-04-19T00:18:50.360434 I 39904 0 0 CommandLineOptions.cpp:1951 	CPU-GPU kernel concurrency: enabled
2025-04-19T00:18:50.360438 I 39904 0 0 CommandLineOptions.cpp:1958 	CPU result set reserved ratio of CPU buffer pool size: 0.8
2025-04-19T00:18:50.360446 I 39904 0 0 CommandLineOptions.cpp:1961 	Per-query max CPU threads ratio: 0.9
2025-04-19T00:18:50.360450 I 39904 0 0 CommandLineOptions.cpp:1963 	Per-query max CPU result memory ratio of allocated total: 0.8
2025-04-19T00:18:50.360454 I 39904 0 0 CommandLineOptions.cpp:1965 	Allow concurrent CPU thread/slot oversubscription: disabled
2025-04-19T00:18:50.360459 I 39904 0 0 CommandLineOptions.cpp:1969 	Allow concurrent CPU result memory oversubscription: disabled
2025-04-19T00:18:50.360462 I 39904 0 0 CommandLineOptions.cpp:1974 	Per-query Max available resource utilization ratio: 0.8
2025-04-19T00:18:50.360467 I 39904 0 0 CommandLineOptions.cpp:1985 Runtime UDF/UDTF Registration Policy:  ALLOWED for superusers only
2025-04-19T00:18:50.360478 1 39904 0 0 CommandLineOptions.cpp:1237 taking [/var/lib/heavyai/storage/heavydb_pid.lck] read+write lock until process exit
2025-04-19T00:18:50.360537 I 39904 0 0 CommandLineOptions.cpp:1318 HeavyDB started with data directory at '/var/lib/heavyai/storage'
2025-04-19T00:18:50.360544 I 39904 0 0 CommandLineOptions.cpp:1323  Server read-only mode is false (--read-only)
2025-04-19T00:18:50.360548 I 39904 0 0 CommandLineOptions.cpp:1340  Threading layer: TBB
2025-04-19T00:18:50.360552 I 39904 0 0 CommandLineOptions.cpp:1344  Watchdog is set to true
2025-04-19T00:18:50.360561 I 39904 0 0 CommandLineOptions.cpp:1345  Dynamic Watchdog is set to false
2025-04-19T00:18:50.360565 I 39904 0 0 CommandLineOptions.cpp:1349  Runtime query interrupt is set to true
2025-04-19T00:18:50.360569 I 39904 0 0 CommandLineOptions.cpp:1351  A frequency of checking pending query interrupt request is set to 1000 (in ms.)
2025-04-19T00:18:50.360573 I 39904 0 0 CommandLineOptions.cpp:1353  A frequency of checking running query interrupt request is set to 0.1 (0.0 ~ 1.0)
2025-04-19T00:18:50.360577 I 39904 0 0 CommandLineOptions.cpp:1356  Non-kernel time query interrupt is set to true
2025-04-19T00:18:50.360582 I 39904 0 0 CommandLineOptions.cpp:1359  Debug Timer is set to true
2025-04-19T00:18:50.360585 I 39904 0 0 CommandLineOptions.cpp:1360  LogUserId is set to false
2025-04-19T00:18:50.360589 I 39904 0 0 CommandLineOptions.cpp:1361  Maximum idle session duration 60
2025-04-19T00:18:50.360593 I 39904 0 0 CommandLineOptions.cpp:1362  Maximum active session duration 43200
2025-04-19T00:18:50.360597 I 39904 0 0 CommandLineOptions.cpp:1363  Maximum number of sessions -1
2025-04-19T00:18:50.360601 I 39904 0 0 CommandLineOptions.cpp:1365 Legacy delimited import is set to true
2025-04-19T00:18:50.360605 I 39904 0 0 CommandLineOptions.cpp:1367 Legacy parquet import is set to false
2025-04-19T00:18:50.360609 I 39904 0 0 CommandLineOptions.cpp:1369 FSI regex parsed import is set to true
2025-04-19T00:18:50.360613 I 39904 0 0 CommandLineOptions.cpp:1371 Allowed import paths is set to ["/"]
2025-04-19T00:18:50.360616 I 39904 0 0 CommandLineOptions.cpp:1372 Allowed export paths is set to ["/"]
2025-04-19T00:18:50.360646 I 39904 0 0 DdlUtils.cpp:874 Parsed allowed-import-paths: (/var/lib/heavyai/storage/import /)
2025-04-19T00:18:50.360656 I 39904 0 0 DdlUtils.cpp:874 Parsed allowed-export-paths: (/var/lib/heavyai/storage/export /)
2025-04-19T00:18:50.360670 I 39904 0 0 CommandLineOptions.cpp:1394 FSI has been enabled as a side effect of enabling non-legacy import.
2025-04-19T00:18:50.360676 I 39904 0 0 CommandLineOptions.cpp:1517 Disk cache enabled for foreign tables only
2025-04-19T00:18:50.360681 I 39904 0 0 CommandLineOptions.cpp:1564 Vacuum Min Selectivity: 0.1
2025-04-19T00:18:50.360685 I 39904 0 0 CommandLineOptions.cpp:1566 Enable system tables is set to true
2025-04-19T00:18:50.360689 I 39904 0 0 CommandLineOptions.cpp:1575 Enable FSI is set to true
2025-04-19T00:18:50.360693 I 39904 0 0 CommandLineOptions.cpp:1576 Enable logs system tables set to false
2025-04-19T00:18:50.360697 I 39904 0 0 CommandLineOptions.cpp:1583 Maximum number of logs system table files set to 100
2025-04-19T00:18:50.360700 I 39904 0 0 HeavyDB.cpp:388 HeavyDB starting up
2025-04-19T00:18:50.360722 I 39904 0 0 HeavyDB.cpp:392 Initializing TBB with 32 threads.
2025-04-19T00:18:50.361247 I 39904 0 0 HeavyDB.cpp:397 TBB max concurrency: 32 threads.
2025-04-19T00:18:50.362341 1 39904 0 0 HeavyDB.cpp:327 heartbeat thread starting
2025-04-19T00:18:50.362436 I 39904 0 0 DBHandler.cpp:244 HeavyDB Server 7.1.0-20231018-69d8a78a07
2025-04-19T00:18:50.423176 I 39904 0 0 CudaMgr.cpp:515 Using 1 Gpus.
2025-04-19T00:18:50.423206 1 39904 0 0 CudaMgr.cpp:517 Device: 0
2025-04-19T00:18:50.423211 1 39904 0 0 CudaMgr.cpp:518 UUID: 8c8b4619-0dfc-3e11-b9db-9f2b8cd9a4b5
2025-04-19T00:18:50.423217 1 39904 0 0 CudaMgr.cpp:519 Clock (khz): 1500000
2025-04-19T00:18:50.423221 1 39904 0 0 CudaMgr.cpp:520 Compute Major: 8
2025-04-19T00:18:50.423225 1 39904 0 0 CudaMgr.cpp:521 Compute Minor: 6
2025-04-19T00:18:50.423229 1 39904 0 0 CudaMgr.cpp:522 PCI bus id: 1
2025-04-19T00:18:50.423233 1 39904 0 0 CudaMgr.cpp:523 PCI deviceId id: 0
2025-04-19T00:18:50.423237 1 39904 0 0 CudaMgr.cpp:524 Per device global memory: 3.79565 GB
2025-04-19T00:18:50.423245 1 39904 0 0 CudaMgr.cpp:526 Memory clock (khz): 6001000
2025-04-19T00:18:50.423249 1 39904 0 0 CudaMgr.cpp:527 Memory bandwidth: 96.016 GB/sec
2025-04-19T00:18:50.423254 1 39904 0 0 CudaMgr.cpp:530 Constant Memory: 65536
2025-04-19T00:18:50.423258 1 39904 0 0 CudaMgr.cpp:531 Shared memory per multiprocessor: 102400
2025-04-19T00:18:50.423269 1 39904 0 0 CudaMgr.cpp:533 Shared memory per block: 49152
2025-04-19T00:18:50.423273 1 39904 0 0 CudaMgr.cpp:534 Number of MPs: 16
2025-04-19T00:18:50.423277 1 39904 0 0 CudaMgr.cpp:535 Warp Size: 32
2025-04-19T00:18:50.423280 1 39904 0 0 CudaMgr.cpp:536 Max threads per block: 1024
2025-04-19T00:18:50.423284 1 39904 0 0 CudaMgr.cpp:537 Max registers per block: 65536
2025-04-19T00:18:50.423288 1 39904 0 0 CudaMgr.cpp:538 Max register per MP: 65536
2025-04-19T00:18:50.423292 1 39904 0 0 CudaMgr.cpp:539 Memory bus width in bits: 128
2025-04-19T00:18:50.423296 I 39904 0 0 CudaMgr.cpp:68 Warming up the GPU JIT Compiler... (this may take several seconds)
2025-04-19T00:18:50.424170 1 39904 0 0 NvidiaKernel.cpp:91 CUDA JIT time to create link: 0.859467
2025-04-19T00:18:50.521491 1 39904 0 0 NvidiaKernel.cpp:100 CUDA JIT time to add RT fatbinary: 17.6668
2025-04-19T00:18:50.522275 1 39904 0 0 NvidiaKernel.cpp:109 CUDA JIT time to add GPU table functions library: 17.9154
2025-04-19T00:18:50.524783 I 39904 0 0 CudaMgr.cpp:71 GPU JIT Compiler initialized.
2025-04-19T00:18:50.524805 I 39904 0 0 ArrowForeignStorage.cpp:880 CSV backed temporary tables has been activated. Create table `with (storage_type='CSV:path/to/file.csv');`
2025-04-19T00:18:50.524811 I 39904 0 0 ArrowForeignStorage.cpp:1058 CSV backed temporary tables has been activated. Create table `with (storage_type='CSV:path/to/file.csv');`
2025-04-19T00:18:50.524922 I 39904 0 0 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 0ms Epoch: 0 files read: 0 table location: '/var/lib/heavyai/storage/disk_cache'
2025-04-19T00:18:50.524928 3 39904 0 0 CachingFileMgr.cpp:97 Number of Headers in Vector: 0
2025-04-19T00:18:50.524951 1 39904 0 0 DataMgr.cpp:260 Detected 15841.9M of total system memory.
2025-04-19T00:18:50.524957 I 39904 0 0 DataMgr.cpp:269 Min CPU Slab Size is 256MB
2025-04-19T00:18:50.524962 I 39904 0 0 DataMgr.cpp:270 Max CPU Slab Size is 4096MB
2025-04-19T00:18:50.524966 I 39904 0 0 DataMgr.cpp:271 Max memory pool size for CPU is 12673.5MB
2025-04-19T00:18:50.524971 I 39904 0 0 DataMgr.cpp:293 Reserved GPU memory is 384MB includes render buffer allocation
2025-04-19T00:18:50.524980 I 39904 0 0 DataMgr.cpp:312 Min GPU Slab size for GPU 0 is 256MB
2025-04-19T00:18:50.524984 I 39904 0 0 DataMgr.cpp:314 Max GPU Slab size for GPU 0 is 3502.75MB
2025-04-19T00:18:50.524989 I 39904 0 0 DataMgr.cpp:316 Max memory pool size for GPU 0 is 3502.75MB
2025-04-19T00:18:50.525051 I 39904 0 0 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 0ms Epoch: 0 files read: 0 table location: '/var/lib/heavyai/storage/data/table_0_0'
2025-04-19T00:18:50.525057 3 39904 0 0 FileMgr.cpp:280 Number of Headers in Vector: 0
2025-04-19T00:18:50.525079 I 39904 0 0 DBHandler.cpp:255 Initializing Executor Resource Manager
2025-04-19T00:18:50.525084 I 39904 0 0 DBHandler.cpp:263 	Setting Executor resource pool avaiable CPU threads/slots to default value of 32.
2025-04-19T00:18:50.525101 I 39904 0 0 DBHandler.cpp:274 	Setting max per-query CPU threads to ratio of 0.9 of 32 available threads, or 28 threads.
2025-04-19T00:18:50.525110 I 39904 0 0 DBHandler.cpp:325 	Setting Executor resource pool reserved space for CPU buffer pool memory to 11.75 GB.
2025-04-19T00:18:50.525126 I 39904 0 0 DBHandler.cpp:329 	Setting Executor resource pool reserved space for GPU buffer pool memory to 3.24 GB.
2025-04-19T00:18:50.525131 I 39904 0 0 DBHandler.cpp:333 	Setting Executor resource pool reserved space for CPU result memory to 4.0 GB.
2025-04-19T00:18:50.525214 I 39904 0 0 Calcite.cpp:373 Creating Calcite Handler,  Calcite Port is 6279 base data dir is /var/lib/heavyai/storage
2025-04-19T00:18:50.525226 I 39904 0 0 Calcite.cpp:281 Running Calcite server as a daemon
2025-04-19T00:18:51.140292 I 39904 0 0 Calcite.cpp:321 Calcite server start took 600 ms 
2025-04-19T00:18:51.140355 I 39904 0 0 Calcite.cpp:322 ping took 9 ms 
2025-04-19T00:18:51.144538 1 39904 0 0 Calcite.cpp:634 [{"name":"Truncate__","annotations":[{},{},{"uses_manager":"false"}],"ret":"float","args":["float","i32"]},{"name":"area_triangle","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"ST_AsBinary__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"box_contains_point","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double","double"]},{"name":"Round__","annotations":[{},{},{"uses_manager":"false"}],"ret":"float","args":["float","i32"]},{"name":"array_first_half__f64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>"]},{"name":"array_equal__textdict","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<TextEncodingDict>","Array<TextEncodingDict>"]},{"name":"ST_YMax","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_AsWkt__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"ST_Intersects_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_point_point_squared","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"centroid_add_polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32","i32","i32","double*","double*","double*","double*","i64*","double*"]},{"name":"h3ToGeoPacked","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_AsBinary__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"perimeter_multipolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32","i1"]},{"name":"ST_Distance_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_downAp7","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Centroid_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32*","i32","i32*","i32","i32","i32","i32","double*"]},{"name":"array_equal__f32","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<float>","Array<float>"]},{"name":"ST_AsWkt__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"convert_meters_to_pixel_height","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i8*","i64","i32","i32","i32","double","double","i32","double"]},{"name":"_hex2dToGeo","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32","i32","double*"]},{"name":"tol_eq","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"ST_YMin_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ST_Centroid_Polygon","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32*","i32","i32","i32","i32","double*"]},{"name":"_square","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Log10","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_YMax_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ct_device_selection_udf_gpu__gpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_DWithin_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"round_to_digit","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"_ijkScale","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32"]},{"name":"_rotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_append__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>","double"]},{"name":"array_append__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>","i8"]},{"name":"array_append__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>","i16"]},{"name":"_geoToFaceIjk","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32*"]},{"name":"array_append__4","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>","float"]},{"name":"x_and_y_are_dependent","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32","i32"]},{"name":"ST_XMin_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"raw_array_as_scalar_same_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64*","i64"]},{"name":"ST_X_Point","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_Distance_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_append","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>","i64"]},{"name":"ST_Length_LineString_Geodesic","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"point_in_polygon_winding_number","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","i64","i64","i32","i32","i32"]},{"name":"array_first_half__t32","annotations":[{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"ST_cContains_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_cIntersects_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"udf_identity","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone"]},{"name":"_v2dMag","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double*"]},{"name":"_neighbor","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32"]},{"name":"ST_cIntersects_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"strtok_to_array__1","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["TextEncodingDict","TextEncodingNone"]},{"name":"ST_Distance_MultiLineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsText__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"reg_hex_horiz_pixel_bin_y","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"reg_hex_horiz_pixel_bin_x","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"compressed_coord","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i8*","i32"]},{"name":"ST_Distance_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"area_polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ct_device_selection_udf_both__gpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Log__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"text_encoding_dict_concat","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingNone"]},{"name":"ST_XMax","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_DWithin_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_ijkToHex2d","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","double*"]},{"name":"ST_Perimeter_MultiPolygon_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiPoint_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Contains_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsWkb__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"centroid_add_triangle","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double","double*","double*"]},{"name":"distance_point_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","i1","double"]},{"name":"ST_Contains_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ct_sleep_us__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i64"]},{"name":"array_second_half__i64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>"]},{"name":"h3ToLat","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["i64"]},{"name":"ST_Distance_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_LineString_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_second_half_impl","annotations":[{},{"uses_manager":"false"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"ST_AsWkb__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"_h3ToGeo","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","double*"]},{"name":"array_second_half__i16","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>"]},{"name":"_upAp7r","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"Point_Overlaps_Box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double","double"]},{"name":"point_dwithin_box","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","double*","i64","i32","i32","double"]},{"name":"Floor__2","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_Distance_Point_ClosedLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Floor__3","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Intersects_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiPolygon_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Floor__1","annotations":[{},{"uses_manager":"false"}],"ret":"i16","args":["i16"]},{"name":"ST_Intersects_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsBinary__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"array_append__","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>","i32"]},{"name":"_upAp7","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_AsText__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"_faceIjkToH3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i32*","i32"]},{"name":"Sinh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"barray_append","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>","i1"]},{"name":"ST_XMin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_DWithin_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_MultiPolygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsBinary__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"ST_Intersects_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiLineString_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Perimeter_Polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_DWithin_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"geoToH3","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["double","double","i32"]},{"name":"ST_Distance_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"array_first_half__b8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>"]},{"name":"max_distance_point_line","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"HeavyDB_Geo_PolyBoundsPtr","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["double*","i64"]},{"name":"array_second_half__b8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>"]},{"name":"_pointSquareDist","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","double*"]},{"name":"ST_DWithin_LineString_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_unitIjkToDigit","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"array_equal__i8","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i8>","Array<i8>"]},{"name":"ST_Contains_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Sin","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Distance_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_Point_MultiPoint_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_second_half__i32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>"]},{"name":"ST_Distance_LineString_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_point_point","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"_downAp7r","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Contains_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"tol_ge","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"ST_Distance_MultiPoint_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Contains_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_XMax_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ST_Intersects_MultiPolygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ln__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_Contains_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"text_encoding_none_concat","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone","TextEncodingNone"]},{"name":"distance_point_multilinestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkt__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"convert_meters_to_merc_pixel_width","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","i32","double"]},{"name":"ST_AsWkt__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"ST_Intersects_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Length_LineString","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_AsText__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"ST_Perimeter_Polygon_Geodesic","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Contains_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"tarray_append","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>","TextEncodingDict"]},{"name":"ST_Area_Polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"is_inf","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["double"]},{"name":"ST_AsText__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"ct_device_selection_udf_both__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_first_half__f32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>"]},{"name":"box_dwithin_box","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","i32","double*","i64","i32","i32","double"]},{"name":"centroid_add_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","i32","i1","double*","double*","i64*","double*"]},{"name":"Log10__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_Intersects_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"Asin","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Distance_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"rect_pixel_bin_x","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","i32"]},{"name":"rect_pixel_bin_y","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","i32"]},{"name":"ST_Intersects_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"is_inf__","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["float"]},{"name":"is_point_in_view","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","double","double","double","double"]},{"name":"is_point_size_in_merc_view","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double"]},{"name":"array_equal__f64","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<double>","Array<double>"]},{"name":"ST_Centroid_MultiPoint","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"_ijkRotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Distance_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_LineString_Linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_Point_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Contains_MultiPolygon_Point_Impl","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsText__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"ST_Distance_MultiPoint_Point_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"raw_array_as_array_diff_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["i64*","i64"]},{"name":"_geoToHex2d","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32*","double*"]},{"name":"_adjustOverageClassII","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32*","i32","i32","i32"]},{"name":"degrees","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_second_half__t32","annotations":[{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"approx_distance_in_meters","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["float","float","float","float"]},{"name":"raw_array_as_scalar_diff_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i64*","i64"]},{"name":"constrainLng","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Length_MultiLineString","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32"]},{"name":"array_first_half__i32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>"]},{"name":"ST_Intersects_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_DWithin_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_posAngleRads","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Tanh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_equal__i16","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i16>","Array<i16>"]},{"name":"_isBaseCellPentagon","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_MaxDistance_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"_h3ToFaceIjk","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","i32*"]},{"name":"Log","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"is_nan","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["double"]},{"name":"ST_Perimeter_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"tol_zero_template","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","i64"]},{"name":"centroid_add_ring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","i32","double","double*","double*","double*","double*","i64*","double*"]},{"name":"_ijkSub","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32*","i32*"]},{"name":"ST_YMin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"array_second_half__f64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>"]},{"name":"_h3ToFaceIjkWithInitializedFijk","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i64","i32*"]},{"name":"Ceil","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"polygon_contains_point","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","double","double","i32","i32","i32"]},{"name":"ST_Distance_MultiLineString_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Centroid_LineString","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"ST_Distance_Point_LineString_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_in_meters__","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["float","float","float","float"]},{"name":"Floor__","annotations":[{},{"uses_manager":"false"}],"ret":"float","args":["float"]},{"name":"box_overlaps_box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double*","i64"]},{"name":"decompress_coord","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i32"]},{"name":"isResClassIII","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_first_half__i64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>"]},{"name":"array_append_impl","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>","float"]},{"name":"array_first_half_impl","annotations":[{},{"uses_manager":"false"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"max_distance_point_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","i1"]},{"name":"ST_AsBinary__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"ST_Distance_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"tol_zero","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double"]},{"name":"ST_AsWkb__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"rect_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"barray_append_impl","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>","i8"]},{"name":"ST_Distance_Polygon_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_rotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"tol","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["i32","i32"]},{"name":"_geoAzDistanceRads","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","double","double","double*"]},{"name":"_ijkAdd","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32*","i32*"]},{"name":"ST_DWithin_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"convert_meters_to_pixel_width","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i8*","i64","i32","i32","i32","double","double","i32","double"]},{"name":"reg_hex_vert_pixel_bin_y","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"reg_hex_vert_pixel_bin_x","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"ST_Contains_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"_faceIjkToBaseCellCCWrot60","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"ST_Distance_MultiPoint_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"power","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double"]},{"name":"ST_AsWkb__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"area_ring","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"reg_hex_vert_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"text_encoding_dict_concat3","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingDict"]},{"name":"Atanh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"length_linestring","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i32","i32","i32","i1","i1"]},{"name":"Cos","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Sqrt","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"tol_le","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"Cot","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_DWithin_Point_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_h3LeadingNonZeroDigit","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i64"]},{"name":"box_contains_box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double*","i64"]},{"name":"ST_DWithin_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"line_intersects_line","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double","double"]},{"name":"_faceIjkToBaseCell","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"compression_unit_size","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_Distance_MultiPoint_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Area_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Intersects_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"centroid_add_segment","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double*","double*"]},{"name":"radsToDegs","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"text_encoding_dict_concat2","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingNone","TextEncodingDict"]},{"name":"Tan","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"_h3RotatePent60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Distance_MultiPoint_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_faceIjkToGeo","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32","double*"]},{"name":"ln","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"_h3RotatePent60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"array_second_half__i8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>"]},{"name":"array_first_half__i8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>"]},{"name":"ST_Contains_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"rect_pixel_bin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","i32","i32"]},{"name":"ST_Distance_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkb__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"distance_point_multipolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ct_device_selection_udf_any","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_AsText__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"ST_AsWkt__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"_geoToVec3d","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","double*"]},{"name":"Ceil__2","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Ceil__1","annotations":[{},{"uses_manager":"false"}],"ret":"i16","args":["i16"]},{"name":"array_second_half__f32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>"]},{"name":"Ceil__3","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Distance_Point_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkb__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"distance_point_line","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"ST_Centroid_Point","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"_hex2dToCoordIJK","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32*"]},{"name":"ST_Distance_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Round2_to_digit","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"ST_DWithin_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"on_segment","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double"]},{"name":"h3ToLon","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["i64"]},{"name":"ST_AsWkt__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"distance_in_meters","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"_baseCellIsCwOffset","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32","i32"]},{"name":"ST_DWithin_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"text_encoding_none_length","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["TextEncodingNone"]},{"name":"_setIJK","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32","i32","i32"]},{"name":"Atan2","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double"]},{"name":"Acos","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_equal__i64","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i64>","Array<i64>"]},{"name":"ST_Y_Point","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"_ijkMatches","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32*","i32*"]},{"name":"Cosh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"distance_point_polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"is_nan__","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["float"]},{"name":"ST_Contains_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Intersects_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"text_encoding_none_copy","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone"]},{"name":"Truncate","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"text_encoding_dict_copy_from","annotations":[{},{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingDict","i32"]},{"name":"ST_cContains_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"radians","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_MaxDistance_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"h3ToParent","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"_h3Rotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"text_encoding_dict_copy","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict"]},{"name":"_ijkNormalize","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"Ceil__","annotations":[{},{"uses_manager":"false"}],"ret":"float","args":["float"]},{"name":"reg_hex_horiz_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"ST_Distance_Point_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_ijkRotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"array_equal__bool","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<bool>","Array<bool>"]},{"name":"ST_Distance_MultiPoint_MultiPoint_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"convert_meters_to_merc_pixel_height","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","i32","double"]},{"name":"Round","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"ST_Intersects_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"array_equal__i32","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i32>","Array<i32>"]},{"name":"is_point_size_in_view","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","double","double","double","double","double"]},{"name":"conv_4326_900913_x","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_first_half__i16","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>"]},{"name":"Contains_Polygon_Point_Impl","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"conv_4326_900913_y","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Atan","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ct_device_selection_udf_cpu__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Floor","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"orientation","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i16","args":["double","double","double","double","double","double"]},{"name":"Truncate__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"i16","args":["i16","i32"]},{"name":"ST_Distance_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Truncate__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32","i32"]},{"name":"is_left","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i64","i64","i64","i64","i64"]},{"name":"Truncate__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"is_point_in_merc_view","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double"]},{"name":"degsToRads","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Tan__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_AsBinary__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"polygon_contains_linestring","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_LineString_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"raw_array_as_array_same_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["i64*","i64"]},{"name":"ST_Distance_MultiPoint_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_geoAzimuthRads","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","double*"]},{"name":"strtok_to_array","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["TextEncodingNone","TextEncodingNone"]},{"name":"pi","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":[]},{"name":"Round__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"i16","args":["i16","i32"]},{"name":"ST_Distance_Point_Point_Squared","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Exp","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Round__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32","i32"]},{"name":"Round__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"Round__4","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32","i32"]},{"name":"_h3Rotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]}]
2025-04-19T00:18:51.196338 I 39904 0 0 DBHandler.cpp:527 Started in GPU mode.
2025-04-19T00:18:51.196952 2 39904 0 0 SysCatalog.cpp:251 reloading catalog caches for: system_catalog
2025-04-19T00:18:51.197043 I 39904 0 0 QueryEngine.h:47 Query Engine CUDA streams disabled
2025-04-19T00:18:51.197057 I 39904 0 0 DBHandler.cpp:567 Overriding default geos library with 'libgeos_c.so'
2025-04-19T00:18:51.197151 I 39904 0 0 HeavyDB.cpp:552  HeavyDB server using unencrypted connection
2025-04-19T00:19:04.330486 I 39904 1 1 DBHandler.cpp:659 stdlog_begin connect 0 0     
2025-04-19T00:19:04.503376 I 39904 1 1 DBHandler.cpp:701 User admin connected to database heavyai
2025-04-19T00:19:04.503417 I 39904 1 1 DBHandler.cpp:659 stdlog connect 0 172 heavyai admin 904-AIYL {"client","roles"} {"tcp:localhost:47826","super"}
2025-04-19T00:19:04.503610 1 39904 2 1 DBHandler.cpp:960 stdlog_begin get_session_info 1 0 heavyai admin 904-AIYL  
2025-04-19T00:19:04.503630 I 39904 2 1 DBHandler.cpp:960 stdlog get_session_info 1 0 heavyai admin 904-AIYL {"client"} {"tcp:localhost:47826"}
2025-04-19T00:19:05.676761 I 39904 3 1 DBHandler.cpp:1300 stdlog_begin sql_execute 2 0 heavyai admin 904-AIYL {"query_str"} {"with ws as (select d_year AS ws_sold_year, ws_item_sk, ws_bill_customer_sk ws_customer_sk, sum(ws_quantity) ws_qty, sum(ws_wholesale_cost) ws_wc, sum(ws_sales_price) ws_sp from web_sales left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk join date_dim on ws_sold_date_sk = d_date_sk where wr_order_number is null group by d_year, ws_item_sk, ws_bill_customer_sk ), cs as (select d_year AS cs_sold_year, cs_item_sk, cs_bill_customer_sk cs_customer_sk, sum(cs_quantity) cs_qty, sum(cs_wholesale_cost) cs_wc, sum(cs_sales_price) cs_sp from catalog_sales left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk join date_dim on cs_sold_date_sk = d_date_sk where cr_order_number is null group by d_year, cs_item_sk, cs_bill_customer_sk ), ss as (select d_year AS ss_sold_year, ss_item_sk, ss_customer_sk, sum(ss_quantity) ss_qty, sum(ss_wholesale_cost) ss_wc, sum(ss_sales_price) ss_sp from store_sales left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk join date_dim on ss_sold_date_sk = d_date_sk where sr_ticket_number is null group by d_year, ss_item_sk, ss_customer_sk ) select ss_customer_sk, round(ss_qty/(coalesce(ws_qty,0)+coalesce(cs_qty,0)),2) ratio, ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price, coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty, coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost, coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price from ss left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk) left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=ss_item_sk and cs_customer_sk=ss_customer_sk) where (coalesce(ws_qty,0)>0 or coalesce(cs_qty, 0)>0) and ss_sold_year=1998 order by ss_customer_sk, ss_qty desc, ss_wc desc, ss_sp desc, other_chan_qty, other_chan_wholesale_cost, other_chan_sales_price, ratio limit 100;"}
2025-04-19T00:19:05.676827 1 39904 3 1 DBHandler.cpp:1205 query type: READ
2025-04-19T00:19:05.678188 I 39904 3 1 Calcite.cpp:566 User calcite catalog heavyai sql 'with ws as (select d_year AS ws_sold_year, ws_item_sk, ws_bill_customer_sk ws_customer_sk, sum(ws_quantity) ws_qty, sum(ws_wholesale_cost) ws_wc, sum(ws_sales_price) ws_sp from web_sales left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk join date_dim on ws_sold_date_sk = d_date_sk where wr_order_number is null group by d_year, ws_item_sk, ws_bill_customer_sk ), cs as (select d_year AS cs_sold_year, cs_item_sk, cs_bill_customer_sk cs_customer_sk, sum(cs_quantity) cs_qty, sum(cs_wholesale_cost) cs_wc, sum(cs_sales_price) cs_sp from catalog_sales left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk join date_dim on cs_sold_date_sk = d_date_sk where cr_order_number is null group by d_year, cs_item_sk, cs_bill_customer_sk ), ss as (select d_year AS ss_sold_year, ss_item_sk, ss_customer_sk, sum(ss_quantity) ss_qty, sum(ss_wholesale_cost) ss_wc, sum(ss_sales_price) ss_sp from store_sales left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk join date_dim on ss_sold_date_sk = d_date_sk where sr_ticket_number is null group by d_year, ss_item_sk, ss_customer_sk ) select ss_customer_sk, round(ss_qty/(coalesce(ws_qty,0)+coalesce(cs_qty,0)),2) ratio, ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price, coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty, coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost, coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price from ss left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk) left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=ss_item_sk and cs_customer_sk=ss_customer_sk) where (coalesce(ws_qty,0)>0 or coalesce(cs_qty, 0)>0) and ss_sold_year=1998 order by ss_customer_sk, ss_qty desc, ss_wc desc, ss_sp desc, other_chan_qty, other_chan_wholesale_cost, other_chan_sales_price, ratio limit 100;'
2025-04-19T00:19:05.701352 1 39904 3 2 DBHandler.cpp:3056 stdlog_begin get_databases 3 0 heavyai calcite 905-67f3  
2025-04-19T00:19:05.701515 I 39904 3 2 DBHandler.cpp:3056 stdlog get_databases 3 0 heavyai calcite 905-67f3 {"client"} {"tcp:localhost:47830"}
2025-04-19T00:19:06.200913 1 39904 3 3 DBHandler.cpp:2703 stdlog_begin get_tables_for_database 4 0 heavyai calcite 905-67f3  
2025-04-19T00:19:06.200970 I 39904 3 3 DBHandler.cpp:2703 stdlog get_tables_for_database 4 0 heavyai calcite 905-67f3 {"client"} {"tcp:localhost:47834"}
2025-04-19T00:19:06.203415 1 39904 3 4 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 5 0 heavyai calcite 905-67f3 {"table_name"} {"web_sales"}
2025-04-19T00:19:06.203437 1 39904 3 4 LockMgr.h:128 Acquiring Table Schema Read Lock for table: web_sales
2025-04-19T00:19:06.203553 I 39904 3 4 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 5 0 heavyai calcite 905-67f3 {"table_name","client"} {"web_sales","tcp:localhost:47844"}
2025-04-19T00:19:06.219199 1 39904 3 5 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 6 0 heavyai calcite 905-67f3 {"table_name"} {"web_returns"}
2025-04-19T00:19:06.219230 1 39904 3 5 LockMgr.h:128 Acquiring Table Schema Read Lock for table: web_returns
2025-04-19T00:19:06.219319 I 39904 3 5 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 6 0 heavyai calcite 905-67f3 {"table_name","client"} {"web_returns","tcp:localhost:47858"}
2025-04-19T00:19:06.229520 1 39904 3 6 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 7 0 heavyai calcite 905-67f3 {"table_name"} {"date_dim"}
2025-04-19T00:19:06.229551 1 39904 3 6 LockMgr.h:128 Acquiring Table Schema Read Lock for table: date_dim
2025-04-19T00:19:06.229642 I 39904 3 6 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 7 0 heavyai calcite 905-67f3 {"table_name","client"} {"date_dim","tcp:localhost:47866"}
2025-04-19T00:19:06.248392 1 39904 3 7 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 8 0 heavyai calcite 905-67f3 {"table_name"} {"catalog_sales"}
2025-04-19T00:19:06.248422 1 39904 3 7 LockMgr.h:128 Acquiring Table Schema Read Lock for table: catalog_sales
2025-04-19T00:19:06.248526 I 39904 3 7 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 8 0 heavyai calcite 905-67f3 {"table_name","client"} {"catalog_sales","tcp:localhost:47868"}
2025-04-19T00:19:06.250027 1 39904 3 8 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 9 0 heavyai calcite 905-67f3 {"table_name"} {"catalog_returns"}
2025-04-19T00:19:06.250044 1 39904 3 8 LockMgr.h:128 Acquiring Table Schema Read Lock for table: catalog_returns
2025-04-19T00:19:06.250103 I 39904 3 8 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 9 0 heavyai calcite 905-67f3 {"table_name","client"} {"catalog_returns","tcp:localhost:47884"}
2025-04-19T00:19:06.256974 1 39904 3 9 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 10 0 heavyai calcite 905-67f3 {"table_name"} {"store_sales"}
2025-04-19T00:19:06.257000 1 39904 3 9 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_sales
2025-04-19T00:19:06.257074 I 39904 3 9 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 10 0 heavyai calcite 905-67f3 {"table_name","client"} {"store_sales","tcp:localhost:47888"}
2025-04-19T00:19:06.257964 1 39904 3 10 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 11 0 heavyai calcite 905-67f3 {"table_name"} {"store_returns"}
2025-04-19T00:19:06.257983 1 39904 3 10 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_returns
2025-04-19T00:19:06.258035 I 39904 3 10 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 11 0 heavyai calcite 905-67f3 {"table_name","client"} {"store_returns","tcp:localhost:47896"}
2025-04-19T00:19:06.546872 I 39904 3 1 Calcite.cpp:599 Time in Thrift 7 (ms), Time in Java Calcite server 861 (ms)
2025-04-19T00:19:06.547173 1 39904 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: catalog_returns
2025-04-19T00:19:06.549097 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,1,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549119 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,2,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549128 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,3,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549230 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,4,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549240 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,5,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549240 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,1,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.549249 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,6,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549271 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,7,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549278 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,8,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549286 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,9,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549293 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,10,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549300 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,11,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549367 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,12,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549378 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,2,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.549383 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,13,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549391 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,14,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549398 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,15,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549405 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,16,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549412 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,17,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549419 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,18,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549427 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,19,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549434 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,20,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549441 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,21,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549448 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,22,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549455 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,23,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549462 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,24,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549470 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,25,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549476 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,26,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549483 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,3,27,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.549609 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,3,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.549832 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,4,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.550072 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,5,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.550432 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,6,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.550680 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,7,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.551024 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,8,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.551352 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,9,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.551697 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,10,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.552049 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,11,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.552400 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,12,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.552781 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,13,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.553119 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,14,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.553361 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,15,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.553699 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,16,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.554036 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,17,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.554373 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,18,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.554748 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,19,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.555110 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,20,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.555455 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,21,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.555789 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,22,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.556112 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,23,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.556465 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,24,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.556827 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,25,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.557186 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,26,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.557533 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,3,27,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.574418 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,3,29,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.594097 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,3,29,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.594326 I 39904 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 45ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_3'
2025-04-19T00:19:06.594359 3 39904 3 1 FileMgr.cpp:280 Number of Headers in Vector: 56
2025-04-19T00:19:06.594597 I 39904 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table catalog_returns took 47ms
2025-04-19T00:19:06.594611 1 39904 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: catalog_returns
2025-04-19T00:19:06.594636 1 39904 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: catalog_sales
2025-04-19T00:19:06.594980 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,1,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595021 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,2,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595033 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,3,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595033 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,1,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595043 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,4,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595061 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,2,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595071 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,5,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595074 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,3,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595082 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,6,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595085 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,4,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595092 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,7,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595095 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,5,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595101 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,8,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595105 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,6,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595111 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,9,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595115 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,7,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595120 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,10,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595124 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,8,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595130 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,11,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595135 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,9,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595140 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,12,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595145 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,10,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595150 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,13,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595173 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,14,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595155 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,11,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595183 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,15,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595190 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,12,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595193 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,16,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595206 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,13,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595217 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,17,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595225 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,14,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595228 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,18,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595236 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,15,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595239 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,19,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595246 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,16,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595248 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,20,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595269 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,21,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595269 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,17,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595281 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,22,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595288 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,18,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595290 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,23,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595301 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,19,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595312 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,24,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595323 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,20,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595330 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,25,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595333 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,21,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595340 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,26,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595343 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,22,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595350 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,27,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595353 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,23,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595361 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,28,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595364 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,24,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595370 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,29,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595374 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,25,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595380 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,30,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595383 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,26,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595390 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,31,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595393 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,27,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595399 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,32,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595412 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,28,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595429 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,33,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595434 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,29,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595440 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,34,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.595444 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,30,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595454 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,31,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595463 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,32,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595481 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,33,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595492 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,34,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595501 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,36,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.595510 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,1,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595520 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,2,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595530 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,3,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595539 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,4,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595548 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,5,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595558 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,6,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595567 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,7,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595577 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,8,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595586 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,9,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595595 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,10,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595606 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,11,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595615 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,12,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595625 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,13,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595634 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,14,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595643 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,15,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595653 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,16,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595662 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,17,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595672 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,18,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595681 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,19,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595691 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,20,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595700 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,21,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595710 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,22,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595719 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,23,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595729 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,24,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595738 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,25,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595753 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,26,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595763 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,27,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595785 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,28,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595800 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,29,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595818 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,30,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595828 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,31,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595838 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,32,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595847 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,33,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595857 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,34,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.595866 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,1,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595876 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,2,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595885 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,3,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595895 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,4,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595905 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,5,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595914 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,6,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595924 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,7,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595933 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,8,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595943 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,9,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595952 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,10,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595962 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,11,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595971 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,12,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595981 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,13,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595990 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,14,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.595998 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,15,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596006 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,16,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596013 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,17,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596021 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,18,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596029 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,19,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596037 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,20,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596045 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,21,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596053 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,22,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596061 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,23,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596069 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,24,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596076 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,25,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596084 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,26,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596098 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,27,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596106 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,28,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596113 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,29,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596122 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,30,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596129 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,31,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596137 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,32,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596145 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,33,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.596451 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,4,34,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.602390 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,4,36,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.602478 I 39904 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 7ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_4'
2025-04-19T00:19:06.602519 3 39904 3 1 FileMgr.cpp:280 Number of Headers in Vector: 138
2025-04-19T00:19:06.602879 I 39904 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table catalog_sales took 8ms
2025-04-19T00:19:06.602897 1 39904 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: catalog_sales
2025-04-19T00:19:06.602917 1 39904 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: date_dim
2025-04-19T00:19:06.603182 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,1,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603228 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,1,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603236 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,2,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603254 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,2,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603264 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,3,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603267 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,3,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603276 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,4,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603279 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,4,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603286 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,5,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603289 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,5,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603296 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,6,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603299 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,6,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603305 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,7,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603308 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,7,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603315 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,8,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603318 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,8,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603325 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,9,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603328 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,9,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603335 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,10,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603339 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,10,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603344 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,11,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603349 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,11,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603369 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,12,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603354 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,12,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603379 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,13,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603383 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,13,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603388 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,14,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603393 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,14,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603398 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,15,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603402 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,15,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603408 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,16,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603412 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,16,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603418 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,17,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603422 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,17,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603428 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,18,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603432 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,18,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603437 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,19,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603442 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,19,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603447 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,20,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603451 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,20,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603457 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,21,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603461 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,21,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603466 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,22,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603470 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,22,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603476 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,23,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603480 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,23,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603486 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,24,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603490 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,24,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603496 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,25,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603499 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,25,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603505 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,26,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603508 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,26,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603515 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,27,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603518 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,27,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.603525 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,28,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.603527 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,28,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.604015 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,8,30,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.609551 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,8,30,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.609609 I 39904 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 6ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_8'
2025-04-19T00:19:06.609626 3 39904 3 1 FileMgr.cpp:280 Number of Headers in Vector: 58
2025-04-19T00:19:06.609793 I 39904 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table date_dim took 6ms
2025-04-19T00:19:06.609810 1 39904 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: date_dim
2025-04-19T00:19:06.609824 1 39904 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_returns
2025-04-19T00:19:06.610029 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,1,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610042 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,1,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610051 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,2,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610055 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,2,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610060 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,3,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610069 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,4,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610076 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,5,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610062 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,3,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610084 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,6,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610090 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,4,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610092 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,7,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610096 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,5,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610099 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,8,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610102 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,6,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610107 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,9,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610114 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,10,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610108 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,7,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610122 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,11,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610126 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,8,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610129 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,12,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610131 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,9,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610136 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,13,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610138 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,10,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610144 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,14,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610148 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,11,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610151 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,15,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610154 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,12,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610158 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,16,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610160 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,13,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610166 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,17,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610179 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,18,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610170 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,14,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610187 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,19,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610189 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,15,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610194 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,20,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.610196 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,16,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610209 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,17,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610216 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,18,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610221 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,19,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610227 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,20,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.610521 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,17,22,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615070 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,17,22,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615136 I 39904 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_17'
2025-04-19T00:19:06.615155 3 39904 3 1 FileMgr.cpp:280 Number of Headers in Vector: 42
2025-04-19T00:19:06.615276 I 39904 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table store_returns took 5ms
2025-04-19T00:19:06.615285 1 39904 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store_returns
2025-04-19T00:19:06.615299 1 39904 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_sales
2025-04-19T00:19:06.615471 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,1,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615497 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,2,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615505 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,3,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615513 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,4,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615520 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,5,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615527 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,6,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615526 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615534 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,7,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615545 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615552 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,8,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615555 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615559 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,9,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615562 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615566 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,10,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615569 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615573 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,11,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615576 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615580 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,12,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615594 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,13,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615603 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,14,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615583 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615611 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,15,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615617 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,16,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615624 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,17,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615617 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615632 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,18,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615635 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615639 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,19,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615642 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615646 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,20,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615650 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615652 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,21,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615657 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615659 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,22,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615664 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615666 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,23,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.615671 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615678 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615686 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615699 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615706 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615714 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615721 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615728 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615735 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615742 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615750 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,25,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.615756 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615764 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615778 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615792 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615798 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615806 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615819 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615827 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615842 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615849 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615856 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615863 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615870 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615877 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615885 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615892 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615899 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615906 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615913 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615920 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615927 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615934 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615941 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.615948 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.615955 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.615963 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.615970 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.615977 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.615984 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.615991 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.615998 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616005 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616013 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616020 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616027 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616034 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616041 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616048 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616056 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616063 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616075 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616086 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616094 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616101 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616108 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616115 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 2 Epoch: 1
2025-04-19T00:19:06.616122 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616129 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616136 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616144 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616151 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616158 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616165 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616173 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616180 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616187 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616194 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616201 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616208 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616216 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616223 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616230 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616237 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616245 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616252 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616259 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616266 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616273 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616280 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 3 Epoch: 1
2025-04-19T00:19:06.616287 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616295 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616302 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616309 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616316 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616323 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616330 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616344 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616351 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616358 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616365 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616372 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616379 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616387 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616393 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616400 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616408 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616415 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616422 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616430 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616436 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616443 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616451 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 4 Epoch: 1
2025-04-19T00:19:06.616458 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,25,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.616465 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616472 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616479 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616487 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616494 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616501 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616509 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616516 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616523 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616530 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616537 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616553 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616561 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616568 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616575 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616582 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616589 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616597 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616608 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616615 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616622 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616629 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.616839 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 5 Epoch: 1
2025-04-19T00:19:06.621042 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,18,25,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621121 I 39904 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_18'
2025-04-19T00:19:06.621153 3 39904 3 1 FileMgr.cpp:280 Number of Headers in Vector: 164
2025-04-19T00:19:06.621393 I 39904 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table store_sales took 6ms
2025-04-19T00:19:06.621401 1 39904 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store_sales
2025-04-19T00:19:06.621416 1 39904 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: web_returns
2025-04-19T00:19:06.621760 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,1,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621795 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,2,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621813 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,3,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621820 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,4,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621828 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,5,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621836 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,6,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621843 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,7,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621858 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,8,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621855 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,1,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621866 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,9,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621873 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,10,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621884 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,11,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621873 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,2,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621891 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,12,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621895 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,3,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621898 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,13,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621903 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,4,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621905 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,14,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621911 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,5,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621919 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,6,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621912 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,15,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621928 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,7,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621933 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,16,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621935 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,8,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621941 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,17,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621953 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,18,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621962 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,19,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621943 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,9,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621969 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,20,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621971 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,10,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621976 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,21,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621978 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,11,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621983 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,22,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621986 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,12,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621990 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,23,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621993 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,13,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.621997 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,22,24,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.621999 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,14,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622007 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,15,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622014 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,16,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622022 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,17,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622028 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,18,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622036 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,19,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622042 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,20,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622049 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,21,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622056 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,22,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622063 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,23,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622071 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,22,24,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.622406 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,22,26,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627209 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,22,26,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627257 I 39904 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_22'
2025-04-19T00:19:06.627270 3 39904 3 1 FileMgr.cpp:280 Number of Headers in Vector: 50
2025-04-19T00:19:06.627381 I 39904 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table web_returns took 5ms
2025-04-19T00:19:06.627389 1 39904 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: web_returns
2025-04-19T00:19:06.627400 1 39904 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: web_sales
2025-04-19T00:19:06.627546 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,1,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627558 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,2,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627566 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,3,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627573 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,4,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627579 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,5,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627589 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,6,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627595 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,7,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627607 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,8,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627605 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,1,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627623 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,2,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627633 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,3,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627613 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,9,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627641 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,4,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627647 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,10,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627649 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,5,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627654 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,11,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627656 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,6,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627660 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,12,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627664 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,7,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627666 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,13,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627671 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,14,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627680 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,15,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627671 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,8,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627686 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,16,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627691 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,17,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627698 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,18,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627691 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,9,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627704 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,19,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627707 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,10,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627710 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,20,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627715 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,11,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627722 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,12,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627716 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,21,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627730 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,13,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627733 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,22,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627738 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,14,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627740 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,23,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627745 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,24,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627745 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,15,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627759 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,16,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627785 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,17,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627798 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,18,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627752 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,25,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627808 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,19,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627814 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,20,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627824 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,21,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627832 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,22,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627839 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,23,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627814 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,26,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627855 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,27,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627847 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,24,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627862 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,28,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627864 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,25,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627868 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,29,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627872 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,26,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627880 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,27,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627874 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,30,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627889 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,28,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627895 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,31,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627897 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,29,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627900 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,32,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627905 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,30,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627912 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,31,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627919 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,32,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627912 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,33,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627933 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,34,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.627933 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,33,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627950 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,34,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627958 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,36,0, Page id: 0 Epoch: 1
2025-04-19T00:19:06.627965 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,1,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.627972 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,2,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.627979 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,3,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.627987 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,4,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.627994 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,5,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628001 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,6,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628012 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,7,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628019 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,8,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628027 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,9,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628033 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,10,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628041 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,11,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628048 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,12,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628055 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,13,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628062 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,14,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628069 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,15,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628076 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,16,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628083 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,17,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628091 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,18,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628097 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,19,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628104 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,20,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628111 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,21,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628119 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,22,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628126 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,23,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628133 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,24,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628140 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,25,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628147 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,26,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628155 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,27,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628161 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,28,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628168 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,29,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628183 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,30,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628190 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,31,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628197 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,32,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628204 4 39904 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,33,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.628486 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,23,34,0, Page id: 1 Epoch: 1
2025-04-19T00:19:06.633193 4 39904 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,23,36,0, Page id: -1 Epoch: 1
2025-04-19T00:19:06.633256 I 39904 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_23'
2025-04-19T00:19:06.633277 3 39904 3 1 FileMgr.cpp:280 Number of Headers in Vector: 104
2025-04-19T00:19:06.633484 I 39904 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table web_sales took 6ms
2025-04-19T00:19:06.633493 1 39904 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: web_sales
2025-04-19T00:19:06.633605 W 39904 3 1 CudaMgr.cpp:604 Could not find CUDA installation path: environment variables CUDA_HOME or CUDA_DIR are not defined
2025-04-19T00:19:06.633699 W 39904 3 1 Execute.cpp:313 File /libdevice.10.bc does not exist; support for some UDF functions might not be available.
2025-04-19T00:19:06.644433 W 39904 3 1 Execute.cpp:400 Source of rt_libdevice_module LLVM module is unavailable. The module will be unavailable.
2025-04-19T00:19:06.644462 I 39904 3 1 QueryDispatchQueue.h:63 Dispatching query with 0 queries in the queue.
2025-04-19T00:19:06.644507 I 39904 0 0 QueryDispatchQueue.h:100 Worker 1 running query and returning control. There are now 1 workers are running and 0 queries in the queue.
2025-04-19T00:19:06.644540 1 39904 3 11 DBHandler.cpp:6167 Table Schema Locks:
1 3 
1 4 
1 8 
1 17 
1 18 
1 22 
1 23 
2025-04-19T00:19:06.644555 1 39904 3 11 DBHandler.cpp:6168 Table Data Locks:
1 3 
1 4 
1 8 
1 17 
1 18 
1 22 
1 23 
2025-04-19T00:19:06.655196 W 39904 3 11 Execute.cpp:400 Source of rt_libdevice_module LLVM module is unavailable. The module will be unavailable.
2025-04-19T00:19:06.655295 2 39904 3 11 RelAlgDag.cpp:3339 Parsing query RA JSON: {
  "rels": [
    {
      "id": "0",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ss_sold_date_sk",
        "ss_sold_time_sk",
        "ss_item_sk",
        "ss_customer_sk",
        "ss_cdemo_sk",
        "ss_hdemo_sk",
        "ss_addr_sk",
        "ss_store_sk",
        "ss_promo_sk",
        "ss_ticket_number",
        "ss_quantity",
        "ss_wholesale_cost",
        "ss_list_price",
        "ss_sales_price",
        "ss_ext_discount_amt",
        "ss_ext_sales_price",
        "ss_ext_wholesale_cost",
        "ss_ext_list_price",
        "ss_ext_tax",
        "ss_coupon_amt",
        "ss_net_paid",
        "ss_net_paid_inc_tax",
        "ss_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_sales"
      ],
      "inputs": []
    },
    {
      "id": "1",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "sr_returned_date_sk",
        "sr_return_time_sk",
        "sr_item_sk",
        "sr_customer_sk",
        "sr_cdemo_sk",
        "sr_hdemo_sk",
        "sr_addr_sk",
        "sr_store_sk",
        "sr_reason_sk",
        "sr_ticket_number",
        "sr_return_quantity",
        "sr_return_amt",
        "sr_return_tax",
        "sr_return_amt_inc_tax",
        "sr_fee",
        "sr_return_ship_cost",
        "sr_refunded_cash",
        "sr_reversed_charge",
        "sr_store_credit",
        "sr_net_loss",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_returns"
      ],
      "inputs": []
    },
    {
      "id": "2",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 33
              },
              {
                "input": 9
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 26
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "left",
      "inputs": [
        "0",
        "1"
      ]
    },
    {
      "id": "3",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "d_date_sk",
        "d_date_id",
        "d_date",
        "d_month_seq",
        "d_week_seq",
        "d_quarter_seq",
        "d_year",
        "d_dow",
        "d_moy",
        "d_dom",
        "d_qoy",
        "d_fy_year",
        "d_fy_quarter_seq",
        "d_fy_week_seq",
        "d_day_name",
        "d_quarter_name",
        "d_holiday",
        "d_weekend",
        "d_following_holiday",
        "d_first_dom",
        "d_last_dom",
        "d_same_day_ly",
        "d_same_day_lq",
        "d_current_day",
        "d_current_week",
        "d_current_month",
        "d_current_quarter",
        "d_current_year",
        "rowid"
      ],
      "table": [
        "heavyai",
        "date_dim"
      ],
      "inputs": []
    },
    {
      "id": "4",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 0
          },
          {
            "input": 45
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "inner",
      "inputs": [
        "2",
        "3"
      ]
    },
    {
      "id": "5",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "IS NULL",
        "operands": [
          {
            "input": 33
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": false
        }
      }
    },
    {
      "id": "6",
      "relOp": "LogicalProject",
      "fields": [
        "ss_sold_year",
        "ss_item_sk",
        "ss_customer_sk",
        "ss_quantity",
        "ss_wholesale_cost",
        "ss_sales_price"
      ],
      "exprs": [
        {
          "input": 51
        },
        {
          "input": 2
        },
        {
          "input": 3
        },
        {
          "input": 10
        },
        {
          "input": 11
        },
        {
          "input": 13
        }
      ]
    },
    {
      "id": "7",
      "relOp": "LogicalAggregate",
      "fields": [
        "ss_sold_year",
        "ss_item_sk",
        "ss_customer_sk",
        "ss_qty",
        "ss_wc",
        "ss_sp"
      ],
      "group": [
        0,
        1,
        2
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "INTEGER",
            "nullable": true
          },
          "distinct": false,
          "operands": [
            3
          ]
        },
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            4
          ]
        },
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            5
          ]
        }
      ]
    },
    {
      "id": "8",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ws_sold_date_sk",
        "ws_sold_time_sk",
        "ws_ship_date_sk",
        "ws_item_sk",
        "ws_bill_customer_sk",
        "ws_bill_cdemo_sk",
        "ws_bill_hdemo_sk",
        "ws_bill_addr_sk",
        "ws_ship_customer_sk",
        "ws_ship_cdemo_sk",
        "ws_ship_hdemo_sk",
        "ws_ship_addr_sk",
        "ws_web_page_sk",
        "ws_web_site_sk",
        "ws_ship_mode_sk",
        "ws_warehouse_sk",
        "ws_promo_sk",
        "ws_order_number",
        "ws_quantity",
        "ws_wholesale_cost",
        "ws_list_price",
        "ws_sales_price",
        "ws_ext_discount_amt",
        "ws_ext_sales_price",
        "ws_ext_wholesale_cost",
        "ws_ext_list_price",
        "ws_ext_tax",
        "ws_coupon_amt",
        "ws_ext_ship_cost",
        "ws_net_paid",
        "ws_net_paid_inc_tax",
        "ws_net_paid_inc_ship",
        "ws_net_paid_inc_ship_tax",
        "ws_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "web_sales"
      ],
      "inputs": []
    },
    {
      "id": "9",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "wr_returned_date_sk",
        "wr_returned_time_sk",
        "wr_item_sk",
        "wr_refunded_customer_sk",
        "wr_refunded_cdemo_sk",
        "wr_refunded_hdemo_sk",
        "wr_refunded_addr_sk",
        "wr_returning_customer_sk",
        "wr_returning_cdemo_sk",
        "wr_returning_hdemo_sk",
        "wr_returning_addr_sk",
        "wr_web_page_sk",
        "wr_reason_sk",
        "wr_order_number",
        "wr_return_quantity",
        "wr_return_amt",
        "wr_return_tax",
        "wr_return_amt_inc_tax",
        "wr_fee",
        "wr_return_ship_cost",
        "wr_refunded_cash",
        "wr_reversed_charge",
        "wr_account_credit",
        "wr_net_loss",
        "rowid"
      ],
      "table": [
        "heavyai",
        "web_returns"
      ],
      "inputs": []
    },
    {
      "id": "10",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 48
              },
              {
                "input": 17
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 3
              },
              {
                "input": 37
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "left",
      "inputs": [
        "8",
        "9"
      ]
    },
    {
      "id": "11",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "d_date_sk",
        "d_date_id",
        "d_date",
        "d_month_seq",
        "d_week_seq",
        "d_quarter_seq",
        "d_year",
        "d_dow",
        "d_moy",
        "d_dom",
        "d_qoy",
        "d_fy_year",
        "d_fy_quarter_seq",
        "d_fy_week_seq",
        "d_day_name",
        "d_quarter_name",
        "d_holiday",
        "d_weekend",
        "d_following_holiday",
        "d_first_dom",
        "d_last_dom",
        "d_same_day_ly",
        "d_same_day_lq",
        "d_current_day",
        "d_current_week",
        "d_current_month",
        "d_current_quarter",
        "d_current_year",
        "rowid"
      ],
      "table": [
        "heavyai",
        "date_dim"
      ],
      "inputs": []
    },
    {
      "id": "12",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 0
          },
          {
            "input": 60
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "inner",
      "inputs": [
        "10",
        "11"
      ]
    },
    {
      "id": "13",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "IS NULL",
        "operands": [
          {
            "input": 48
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": false
        }
      }
    },
    {
      "id": "14",
      "relOp": "LogicalProject",
      "fields": [
        "ws_sold_year",
        "ws_item_sk",
        "ws_customer_sk",
        "ws_quantity",
        "ws_wholesale_cost",
        "ws_sales_price"
      ],
      "exprs": [
        {
          "input": 66
        },
        {
          "input": 3
        },
        {
          "input": 4
        },
        {
          "input": 18
        },
        {
          "input": 19
        },
        {
          "input": 21
        }
      ]
    },
    {
      "id": "15",
      "relOp": "LogicalAggregate",
      "fields": [
        "ws_sold_year",
        "ws_item_sk",
        "ws_customer_sk",
        "ws_qty",
        "ws_wc",
        "ws_sp"
      ],
      "group": [
        0,
        1,
        2
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "INTEGER",
            "nullable": true
          },
          "distinct": false,
          "operands": [
            3
          ]
        },
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            4
          ]
        },
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            5
          ]
        }
      ]
    },
    {
      "id": "16",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 6
              },
              {
                "input": 0
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 7
              },
              {
                "input": 1
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 8
              },
              {
                "input": 2
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "left",
      "inputs": [
        "7",
        "15"
      ]
    },
    {
      "id": "17",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "cs_sold_date_sk",
        "cs_sold_time_sk",
        "cs_ship_date_sk",
        "cs_bill_customer_sk",
        "cs_bill_cdemo_sk",
        "cs_bill_hdemo_sk",
        "cs_bill_addr_sk",
        "cs_ship_customer_sk",
        "cs_ship_cdemo_sk",
        "cs_ship_hdemo_sk",
        "cs_ship_addr_sk",
        "cs_call_center_sk",
        "cs_catalog_page_sk",
        "cs_ship_mode_sk",
        "cs_warehouse_sk",
        "cs_item_sk",
        "cs_promo_sk",
        "cs_order_number",
        "cs_quantity",
        "cs_wholesale_cost",
        "cs_list_price",
        "cs_sales_price",
        "cs_ext_discount_amt",
        "cs_ext_sales_price",
        "cs_ext_wholesale_cost",
        "cs_ext_list_price",
        "cs_ext_tax",
        "cs_coupon_amt",
        "cs_ext_ship_cost",
        "cs_net_paid",
        "cs_net_paid_inc_tax",
        "cs_net_paid_inc_ship",
        "cs_net_paid_inc_ship_tax",
        "cs_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "catalog_sales"
      ],
      "inputs": []
    },
    {
      "id": "18",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "cr_returned_date_sk",
        "cr_returned_time_sk",
        "cr_item_sk",
        "cr_refunded_customer_sk",
        "cr_refunded_cdemo_sk",
        "cr_refunded_hdemo_sk",
        "cr_refunded_addr_sk",
        "cr_returning_customer_sk",
        "cr_returning_cdemo_sk",
        "cr_returning_hdemo_sk",
        "cr_returning_addr_sk",
        "cr_call_center_sk",
        "cr_catalog_page_sk",
        "cr_ship_mode_sk",
        "cr_warehouse_sk",
        "cr_reason_sk",
        "cr_order_number",
        "cr_return_quantity",
        "cr_return_amount",
        "cr_return_tax",
        "cr_return_amt_inc_tax",
        "cr_fee",
        "cr_return_ship_cost",
        "cr_refunded_cash",
        "cr_reversed_charge",
        "cr_store_credit",
        "cr_net_loss",
        "rowid"
      ],
      "table": [
        "heavyai",
        "catalog_returns"
      ],
      "inputs": []
    },
    {
      "id": "19",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 51
              },
              {
                "input": 17
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 15
              },
              {
                "input": 37
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "left",
      "inputs": [
        "17",
        "18"
      ]
    },
    {
      "id": "20",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "d_date_sk",
        "d_date_id",
        "d_date",
        "d_month_seq",
        "d_week_seq",
        "d_quarter_seq",
        "d_year",
        "d_dow",
        "d_moy",
        "d_dom",
        "d_qoy",
        "d_fy_year",
        "d_fy_quarter_seq",
        "d_fy_week_seq",
        "d_day_name",
        "d_quarter_name",
        "d_holiday",
        "d_weekend",
        "d_following_holiday",
        "d_first_dom",
        "d_last_dom",
        "d_same_day_ly",
        "d_same_day_lq",
        "d_current_day",
        "d_current_week",
        "d_current_month",
        "d_current_quarter",
        "d_current_year",
        "rowid"
      ],
      "table": [
        "heavyai",
        "date_dim"
      ],
      "inputs": []
    },
    {
      "id": "21",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 0
          },
          {
            "input": 63
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "inner",
      "inputs": [
        "19",
        "20"
      ]
    },
    {
      "id": "22",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "IS NULL",
        "operands": [
          {
            "input": 51
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": false
        }
      }
    },
    {
      "id": "23",
      "relOp": "LogicalProject",
      "fields": [
        "cs_sold_year",
        "cs_item_sk",
        "cs_customer_sk",
        "cs_quantity",
        "cs_wholesale_cost",
        "cs_sales_price"
      ],
      "exprs": [
        {
          "input": 69
        },
        {
          "input": 15
        },
        {
          "input": 3
        },
        {
          "input": 18
        },
        {
          "input": 19
        },
        {
          "input": 21
        }
      ]
    },
    {
      "id": "24",
      "relOp": "LogicalAggregate",
      "fields": [
        "cs_sold_year",
        "cs_item_sk",
        "cs_customer_sk",
        "cs_qty",
        "cs_wc",
        "cs_sp"
      ],
      "group": [
        0,
        1,
        2
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "INTEGER",
            "nullable": true
          },
          "distinct": false,
          "operands": [
            3
          ]
        },
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            4
          ]
        },
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            5
          ]
        }
      ]
    },
    {
      "id": "25",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 12
              },
              {
                "input": 0
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 13
              },
              {
                "input": 1
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 14
              },
              {
                "input": 2
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "left",
      "inputs": [
        "16",
        "24"
      ]
    },
    {
      "id": "26",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "OR",
            "operands": [
              {
                "op": ">",
                "operands": [
                  {
                    "op": "CASE",
                    "operands": [
                      {
                        "op": "IS NOT NULL",
                        "operands": [
                          {
                            "input": 9
                          }
                        ],
                        "type": {
                          "type": "BOOLEAN",
                          "nullable": false
                        }
                      },
                      {
                        "op": "CAST",
                        "operands": [
                          {
                            "input": 9
                          }
                        ],
                        "type": {
                          "type": "INTEGER",
                          "nullable": false
                        }
                      },
                      {
                        "literal": 0,
                        "type": "DECIMAL",
                        "target_type": "INTEGER",
                        "scale": 0,
                        "precision": 1,
                        "type_scale": 0,
                        "type_precision": 10
                      }
                    ],
                    "type": {
                      "type": "INTEGER",
                      "nullable": false
                    }
                  },
                  {
                    "literal": 0,
                    "type": "DECIMAL",
                    "target_type": "INTEGER",
                    "scale": 0,
                    "precision": 1,
                    "type_scale": 0,
                    "type_precision": 10
                  }
                ],
                "type": {
                  "type": "BOOLEAN",
                  "nullable": false
                }
              },
              {
                "op": ">",
                "operands": [
                  {
                    "op": "CASE",
                    "operands": [
                      {
                        "op": "IS NOT NULL",
                        "operands": [
                          {
                            "input": 15
                          }
                        ],
                        "type": {
                          "type": "BOOLEAN",
                          "nullable": false
                        }
                      },
                      {
                        "op": "CAST",
                        "operands": [
                          {
                            "input": 15
                          }
                        ],
                        "type": {
                          "type": "INTEGER",
                          "nullable": false
                        }
                      },
                      {
                        "literal": 0,
                        "type": "DECIMAL",
                        "target_type": "INTEGER",
                        "scale": 0,
                        "precision": 1,
                        "type_scale": 0,
                        "type_precision": 10
                      }
                    ],
                    "type": {
                      "type": "INTEGER",
                      "nullable": false
                    }
                  },
                  {
                    "literal": 0,
                    "type": "DECIMAL",
                    "target_type": "INTEGER",
                    "scale": 0,
                    "precision": 1,
                    "type_scale": 0,
                    "type_precision": 10
                  }
                ],
                "type": {
                  "type": "BOOLEAN",
                  "nullable": false
                }
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": false
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 0
              },
              {
                "literal": 1998,
                "type": "DECIMAL",
                "target_type": "INTEGER",
                "scale": 0,
                "precision": 4,
                "type_scale": 0,
                "type_precision": 10
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "27",
      "relOp": "LogicalProject",
      "fields": [
        "ss_customer_sk",
        "ratio",
        "store_qty",
        "store_wholesale_cost",
        "store_sales_price",
        "other_chan_qty",
        "other_chan_wholesale_cost",
        "other_chan_sales_price"
      ],
      "exprs": [
        {
          "input": 2
        },
        {
          "op": "ROUND",
          "operands": [
            {
              "op": "\/",
              "operands": [
                {
                  "input": 3
                },
                {
                  "op": "+",
                  "operands": [
                    {
                      "op": "CASE",
                      "operands": [
                        {
                          "op": "IS NOT NULL",
                          "operands": [
                            {
                              "input": 9
                            }
                          ],
                          "type": {
                            "type": "BOOLEAN",
                            "nullable": false
                          }
                        },
                        {
                          "op": "CAST",
                          "operands": [
                            {
                              "input": 9
                            }
                          ],
                          "type": {
                            "type": "INTEGER",
                            "nullable": false
                          }
                        },
                        {
                          "literal": 0,
                          "type": "DECIMAL",
                          "target_type": "INTEGER",
                          "scale": 0,
                          "precision": 1,
                          "type_scale": 0,
                          "type_precision": 10
                        }
                      ],
                      "type": {
                        "type": "INTEGER",
                        "nullable": false
                      }
                    },
                    {
                      "op": "CASE",
                      "operands": [
                        {
                          "op": "IS NOT NULL",
                          "operands": [
                            {
                              "input": 15
                            }
                          ],
                          "type": {
                            "type": "BOOLEAN",
                            "nullable": false
                          }
                        },
                        {
                          "op": "CAST",
                          "operands": [
                            {
                              "input": 15
                            }
                          ],
                          "type": {
                            "type": "INTEGER",
                            "nullable": false
                          }
                        },
                        {
                          "literal": 0,
                          "type": "DECIMAL",
                          "target_type": "INTEGER",
                          "scale": 0,
                          "precision": 1,
                          "type_scale": 0,
                          "type_precision": 10
                        }
                      ],
                      "type": {
                        "type": "INTEGER",
                        "nullable": false
                      }
                    }
                  ],
                  "type": {
                    "type": "INTEGER",
                    "nullable": false
                  }
                }
              ],
              "type": {
                "type": "INTEGER",
                "nullable": true
              }
            },
            {
              "literal": 2,
              "type": "DECIMAL",
              "target_type": "INTEGER",
              "scale": 0,
              "precision": 1,
              "type_scale": 0,
              "type_precision": 10
            }
          ],
          "type": {
            "type": "INTEGER",
            "nullable": true
          }
        },
        {
          "input": 3
        },
        {
          "input": 4
        },
        {
          "input": 5
        },
        {
          "op": "+",
          "operands": [
            {
              "op": "CASE",
              "operands": [
                {
                  "op": "IS NOT NULL",
                  "operands": [
                    {
                      "input": 9
                    }
                  ],
                  "type": {
                    "type": "BOOLEAN",
                    "nullable": false
                  }
                },
                {
                  "op": "CAST",
                  "operands": [
                    {
                      "input": 9
                    }
                  ],
                  "type": {
                    "type": "INTEGER",
                    "nullable": false
                  }
                },
                {
                  "literal": 0,
                  "type": "DECIMAL",
                  "target_type": "INTEGER",
                  "scale": 0,
                  "precision": 1,
                  "type_scale": 0,
                  "type_precision": 10
                }
              ],
              "type": {
                "type": "INTEGER",
                "nullable": false
              }
            },
            {
              "op": "CASE",
              "operands": [
                {
                  "op": "IS NOT NULL",
                  "operands": [
                    {
                      "input": 15
                    }
                  ],
                  "type": {
                    "type": "BOOLEAN",
                    "nullable": false
                  }
                },
                {
                  "op": "CAST",
                  "operands": [
                    {
                      "input": 15
                    }
                  ],
                  "type": {
                    "type": "INTEGER",
                    "nullable": false
                  }
                },
                {
                  "literal": 0,
                  "type": "DECIMAL",
                  "target_type": "INTEGER",
                  "scale": 0,
                  "precision": 1,
                  "type_scale": 0,
                  "type_precision": 10
                }
              ],
              "type": {
                "type": "INTEGER",
                "nullable": false
              }
            }
          ],
          "type": {
            "type": "INTEGER",
            "nullable": false
          }
        },
        {
          "op": "+",
          "operands": [
            {
              "op": "CASE",
              "operands": [
                {
                  "op": "IS NOT NULL",
                  "operands": [
                    {
                      "input": 10
                    }
                  ],
                  "type": {
                    "type": "BOOLEAN",
                    "nullable": false
                  }
                },
                {
                  "op": "CAST",
                  "operands": [
                    {
                      "input": 10
                    }
                  ],
                  "type": {
                    "type": "DECIMAL",
                    "nullable": false,
                    "precision": 19,
                    "scale": 2
                  }
                },
                {
                  "literal": 0,
                  "type": "DECIMAL",
                  "target_type": "DECIMAL",
                  "scale": 0,
                  "precision": 1,
                  "type_scale": 2,
                  "type_precision": 19
                }
              ],
              "type": {
                "type": "DECIMAL",
                "nullable": false,
                "precision": 19,
                "scale": 2
              }
            },
            {
              "op": "CASE",
              "operands": [
                {
                  "op": "IS NOT NULL",
                  "operands": [
                    {
                      "input": 16
                    }
                  ],
                  "type": {
                    "type": "BOOLEAN",
                    "nullable": false
                  }
                },
                {
                  "op": "CAST",
                  "operands": [
                    {
                      "input": 16
                    }
                  ],
                  "type": {
                    "type": "DECIMAL",
                    "nullable": false,
                    "precision": 19,
                    "scale": 2
                  }
                },
                {
                  "literal": 0,
                  "type": "DECIMAL",
                  "target_type": "DECIMAL",
                  "scale": 0,
                  "precision": 1,
                  "type_scale": 2,
                  "type_precision": 19
                }
              ],
              "type": {
                "type": "DECIMAL",
                "nullable": false,
                "precision": 19,
                "scale": 2
              }
            }
          ],
          "type": {
            "type": "DECIMAL",
            "nullable": false,
            "precision": 19,
            "scale": 2
          }
        },
        {
          "op": "+",
          "operands": [
            {
              "op": "CASE",
              "operands": [
                {
                  "op": "IS NOT NULL",
                  "operands": [
                    {
                      "input": 11
                    }
                  ],
                  "type": {
                    "type": "BOOLEAN",
                    "nullable": false
                  }
                },
                {
                  "op": "CAST",
                  "operands": [
                    {
                      "input": 11
                    }
                  ],
                  "type": {
                    "type": "DECIMAL",
                    "nullable": false,
                    "precision": 19,
                    "scale": 2
                  }
                },
                {
                  "literal": 0,
                  "type": "DECIMAL",
                  "target_type": "DECIMAL",
                  "scale": 0,
                  "precision": 1,
                  "type_scale": 2,
                  "type_precision": 19
                }
              ],
              "type": {
                "type": "DECIMAL",
                "nullable": false,
                "precision": 19,
                "scale": 2
              }
            },
            {
              "op": "CASE",
              "operands": [
                {
                  "op": "IS NOT NULL",
                  "operands": [
                    {
                      "input": 17
                    }
                  ],
                  "type": {
                    "type": "BOOLEAN",
                    "nullable": false
                  }
                },
                {
                  "op": "CAST",
                  "operands": [
                    {
                      "input": 17
                    }
                  ],
                  "type": {
                    "type": "DECIMAL",
                    "nullable": false,
                    "precision": 19,
                    "scale": 2
                  }
                },
                {
                  "literal": 0,
                  "type": "DECIMAL",
                  "target_type": "DECIMAL",
                  "scale": 0,
                  "precision": 1,
                  "type_scale": 2,
                  "type_precision": 19
                }
              ],
              "type": {
                "type": "DECIMAL",
                "nullable": false,
                "precision": 19,
                "scale": 2
              }
            }
          ],
          "type": {
            "type": "DECIMAL",
            "nullable": false,
            "precision": 19,
            "scale": 2
          }
        }
      ]
    },
    {
      "id": "28",
      "relOp": "LogicalSort",
      "collation": [
        {
          "field": 0,
          "direction": "ASCENDING",
          "nulls": "LAST"
        },
        {
          "field": 2,
          "direction": "DESCENDING",
          "nulls": "FIRST"
        },
        {
          "field": 3,
          "direction": "DESCENDING",
          "nulls": "FIRST"
        },
        {
          "field": 4,
          "direction": "DESCENDING",
          "nulls": "FIRST"
        },
        {
          "field": 5,
          "direction": "ASCENDING",
          "nulls": "LAST"
        },
        {
          "field": 6,
          "direction": "ASCENDING",
          "nulls": "LAST"
        },
        {
          "field": 7,
          "direction": "ASCENDING",
          "nulls": "LAST"
        },
        {
          "field": 1,
          "direction": "ASCENDING",
          "nulls": "LAST"
        }
      ],
      "fetch": {
        "literal": 100,
        "type": "DECIMAL",
        "target_type": "INTEGER",
        "scale": 0,
        "precision": 3,
        "type_scale": 0,
        "type_precision": 10
      }
    }
  ]
}
2025-04-19T00:19:06.655863 I 39904 3 11 measure.h:77 Timer start                  executeRelAlgQuery                  executeRelAlgQuery:  573
2025-04-19T00:19:06.655877 I 39904 3 11 measure.h:77 Timer start           executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612
2025-04-19T00:19:06.656322 I 39904 3 11 measure.h:77 Timer start                    executeRelAlgSeq                    executeRelAlgSeq:  895
2025-04-19T00:19:06.656332 1 39904 3 11 RelAlgExecutor.cpp:945 Executing query step 0 / 3
2025-04-19T00:19:06.656338 I 39904 3 11 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:19:06.656363 3 39904 3 11 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:19:06.656368 3 39904 3 11 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:19:06.656410 3 39904 3 11 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1 input_col_descs_unique.size()=6 source_used_inputs.size()=7
2025-04-19T00:19:06.656438 3 39904 3 11 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(4),nest_level(0)) InputDescriptor(db_id(1), table_id(3),nest_level(1)) InputDescriptor(db_id(1), table_id(8),nest_level(2)))
2025-04-19T00:19:06.656443 3 39904 3 11 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(20),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(22),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(3),nest_level(1))) InputColDescriptor(col_id(17),InputDescriptor(db_id(1), table_id(3),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(2))))
2025-04-19T00:19:06.656497 3 39904 3 11 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1) = 9
2025-04-19T00:19:06.656578 2 39904 3 11 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 14031858717153159537 (access path: 3|), outer join col info: 12683706382181458821 (access path: 2|)
2025-04-19T00:19:06.656599 2 39904 3 11 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 17117943113708969057 (access path: 4|), outer join col info: 8659468908960354046 (access path: 2|)
2025-04-19T00:19:06.656614 I 39904 3 11 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:19:06.656628 3 39904 3 11 RelAlgExecutor.cpp:3692 body->getId()=32 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:19:06.656697 1 39904 3 11 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:19:06.656703 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 16100740188082579601
	Table/Col/Levels: ((db_id: 1, table_id: 4), 1, 0) ((db_id: 1, table_id: 4), 4, 0) ((db_id: 1, table_id: 4), 16, 0) ((db_id: 1, table_id: 4), 18, 0) ((db_id: 1, table_id: 4), 19, 0) ((db_id: 1, table_id: 4), 20, 0) ((db_id: 1, table_id: 4), 22, 0) ((db_id: 1, table_id: 3), 3, 1) ((db_id: 1, table_id: 3), 17, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) 
	Join Quals: 		0 LEFT(= (ColumnVar (db_id: 1, table_id: 3, column_id: 17), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 4, column_id: 18), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 4, column_id: 16), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 3, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 4, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (IS NULL (ColumnVar (db_id: 1, table_id: 3, column_id: 17), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 4, column_id: 16), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 4, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 8, column_id: 7), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 4, column_id: 16), rte: 0, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 4, column_id: 4), rte: 0, which_row: 3, varno: 3) , (SUM (ColumnVar (db_id: 1, table_id: 4, column_id: 19), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 4, column_id: 20), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 4, column_id: 22), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:06.656742 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:06.656764 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:06.656898 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:19:06.656912 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:19:06.656935 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 16100740188082579601
	Table/Col/Levels: ((db_id: 1, table_id: 4), 1, 0) ((db_id: 1, table_id: 4), 4, 0) ((db_id: 1, table_id: 4), 16, 0) ((db_id: 1, table_id: 4), 18, 0) ((db_id: 1, table_id: 4), 19, 0) ((db_id: 1, table_id: 4), 20, 0) ((db_id: 1, table_id: 4), 22, 0) ((db_id: 1, table_id: 3), 3, 1) ((db_id: 1, table_id: 3), 17, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) 
	Join Quals: 		0 LEFT(= (ColumnVar (db_id: 1, table_id: 3, column_id: 17), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 4, column_id: 18), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 4, column_id: 16), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 3, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 4, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (IS NULL (ColumnVar (db_id: 1, table_id: 3, column_id: 17), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:06.656961 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:06.656971 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:06.657929 I 39904 3 11 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:19:06.657943 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:06.658168 1 39904 3 11 CudaMgr.cpp:35 CUDA Error (2): out of memory
2025-04-19T00:19:06.658183 1 39904 3 11 CudaMgr.cpp:36  0# CudaMgr_Namespace::CudaErrorException::CudaErrorException(cudaError_enum) in /opt/heavyai/bin/heavydb
 1# 0x0000000001CE9716 in /opt/heavyai/bin/heavydb
 2# Buffer_Namespace::GpuCudaBufferMgr::addSlab(unsigned long) in /opt/heavyai/bin/heavydb
 3# Buffer_Namespace::BufferMgr::findFreeBuffer(unsigned long) in /opt/heavyai/bin/heavydb
 4# Buffer_Namespace::BufferMgr::reserveBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>&, unsigned long) in /opt/heavyai/bin/heavydb
 5# Buffer_Namespace::Buffer::reserve(unsigned long) in /opt/heavyai/bin/heavydb
 6# Buffer_Namespace::Buffer::Buffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 7# Buffer_Namespace::GpuCudaBuffer::GpuCudaBuffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, CudaMgr_Namespace::CudaMgr*, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 8# Buffer_Namespace::GpuCudaBufferMgr::allocateBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 9# Buffer_Namespace::BufferMgr::createBuffer(std::vector<int, std::allocator<int> > const&, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
10# Buffer_Namespace::BufferMgr::getBuffer(std::vector<int, std::allocator<int> > const&, unsigned long) in /opt/heavyai/bin/heavydb
11# Data_Namespace::DataMgr::getChunkBuffer(std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long) in /opt/heavyai/bin/heavydb
12# Chunk_NS::Chunk::getChunkBuffer(Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
13# Chunk_NS::Chunk::getChunk(ColumnDescriptor const*, Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long, bool) in /opt/heavyai/bin/heavydb
14# ColumnFetcher::getOneColumnFragment(Executor*, Analyzer::ColumnVar const&, Fragmenter_Namespace::FragmentInfo const&, Data_Namespace::MemoryLevel, int, DeviceAllocator*, unsigned long, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
15# ColumnFetcher::makeJoinColumn(Executor*, Analyzer::ColumnVar const&, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, Data_Namespace::MemoryLevel, int, DeviceAllocator*, unsigned long, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::vector<std::shared_ptr<void>, std::allocator<std::shared_ptr<void> > >&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
16# HashJoin::fetchJoinColumn(Analyzer::ColumnVar const*, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, Data_Namespace::MemoryLevel, int, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, DeviceAllocator*, std::vector<std::shared_ptr<void>, std::allocator<std::shared_ptr<void> > >&, Executor*, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >*) in /opt/heavyai/bin/heavydb
17# PerfectJoinHashTable::fetchColumnsForDevice(std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, int, DeviceAllocator*) in /opt/heavyai/bin/heavydb
18# PerfectJoinHashTable::reify() in /opt/heavyai/bin/heavydb
19# PerfectJoinHashTable::getInstance(std::shared_ptr<Analyzer::BinOper>, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, int, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, Executor*, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
20# HashJoin::getInstance(std::shared_ptr<Analyzer::BinOper>, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, int, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, Executor*, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
21# Executor::buildHashTableForQualifier(std::shared_ptr<Analyzer::BinOper> const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
22# Executor::buildCurrentLevelHashTable(JoinCondition const&, unsigned long, RelAlgExecutionUnit&, CompilationOptions const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) in /opt/heavyai/bin/heavydb
23# Executor::buildJoinLoops(RelAlgExecutionUnit&, CompilationOptions const&, ExecutionOptions const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
24# Executor::compileWorkUnit(std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, ColumnDescriptor const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, ColumnDescriptor const*> > > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, CudaMgr_Namespace::CudaMgr const*, bool, std::shared_ptr<RowSetMemoryOwner>, unsigned long, signed char, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, RenderInfo*) in /opt/heavyai/bin/heavydb
25# QueryCompilationDescriptor::compile(unsigned long, signed char, bool, RelAlgExecutionUnit const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, ColumnDescriptor const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, ColumnDescriptor const*> > > const&, ColumnFetcher const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, Executor*) in /opt/heavyai/bin/heavydb
26# Executor::executeWorkUnitImpl(unsigned long&, bool, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, std::shared_ptr<RowSetMemoryOwner>, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
27# Executor::executeWorkUnit(unsigned long&, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
28# RelAlgExecutor::getNDVEstimation(RelAlgExecutor::WorkUnit const&, long, bool, CompilationOptions const&, ExecutionOptions const&) in /opt/heavyai/bin/heavydb
29# 0x0000000001B2F3F9 in /opt/heavyai/bin/heavydb
30# RelAlgExecutor::executeCompound(RelCompound const*, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
31# RelAlgExecutor::executeRelAlgStep(RaExecutionSequence const&, unsigned long, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
32# RelAlgExecutor::executeRelAlgSeq(RaExecutionSequence const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, bool) in /opt/heavyai/bin/heavydb
33# RelAlgExecutor::executeRelAlgQueryNoRetry(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
34# RelAlgExecutor::executeRelAlgQuery(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
35# DBHandler::execute_rel_alg(ExecutionResult&, query_state::QueryStateProxy, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, ExecutorDeviceType, int, int, bool, bool, ExplainInfo const&, std::optional<unsigned long>) const in /opt/heavyai/bin/heavydb
36# 0x000000000215E287 in /opt/heavyai/bin/heavydb
37# 0x000000000215EA14 in /opt/heavyai/bin/heavydb
38# 0x000000000215F87B in /opt/heavyai/bin/heavydb
39# 0x0000756FAE499EE8 in /lib/x86_64-linux-gnu/libc.so.6
40# 0x00000000020F3DF3 in /opt/heavyai/bin/heavydb
41# QueryDispatchQueue::worker(unsigned long) in /opt/heavyai/bin/heavydb
42# 0x000000000A62E230 in /opt/heavyai/bin/heavydb
43# 0x0000756FAE494AC3 in /lib/x86_64-linux-gnu/libc.so.6
44# 0x0000756FAE526850 in /lib/x86_64-linux-gnu/libc.so.6
2025-04-19T00:19:06.703632 1 39904 3 11 BufferMgr.h:55 Failed to allocate 3672899584 bytes with condition FailedToCreateSlab
2025-04-19T00:19:06.703639 1 39904 3 11 BufferMgr.h:56  0# OutOfMemory::OutOfMemory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) in /opt/heavyai/bin/heavydb
 1# FailedToCreateSlab::FailedToCreateSlab(unsigned long) in /opt/heavyai/bin/heavydb
 2# 0x0000000001BCAFF3 in /opt/heavyai/bin/heavydb
 3# Buffer_Namespace::BufferMgr::findFreeBuffer(unsigned long) in /opt/heavyai/bin/heavydb
 4# Buffer_Namespace::BufferMgr::reserveBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>&, unsigned long) in /opt/heavyai/bin/heavydb
 5# Buffer_Namespace::Buffer::reserve(unsigned long) in /opt/heavyai/bin/heavydb
 6# Buffer_Namespace::Buffer::Buffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 7# Buffer_Namespace::GpuCudaBuffer::GpuCudaBuffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, CudaMgr_Namespace::CudaMgr*, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 8# Buffer_Namespace::GpuCudaBufferMgr::allocateBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 9# Buffer_Namespace::BufferMgr::createBuffer(std::vector<int, std::allocator<int> > const&, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
10# Buffer_Namespace::BufferMgr::getBuffer(std::vector<int, std::allocator<int> > const&, unsigned long) in /opt/heavyai/bin/heavydb
11# Data_Namespace::DataMgr::getChunkBuffer(std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long) in /opt/heavyai/bin/heavydb
12# Chunk_NS::Chunk::getChunkBuffer(Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
13# Chunk_NS::Chunk::getChunk(ColumnDescriptor const*, Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long, bool) in /opt/heavyai/bin/heavydb
14# ColumnFetcher::getOneColumnFragment(Executor*, Analyzer::ColumnVar const&, Fragmenter_Namespace::FragmentInfo const&, Data_Namespace::MemoryLevel, int, DeviceAllocator*, unsigned long, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
15# ColumnFetcher::makeJoinColumn(Executor*, Analyzer::ColumnVar const&, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, Data_Namespace::MemoryLevel, int, DeviceAllocator*, unsigned long, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::vector<std::shared_ptr<void>, std::allocator<std::shared_ptr<void> > >&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
16# HashJoin::fetchJoinColumn(Analyzer::ColumnVar const*, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, Data_Namespace::MemoryLevel, int, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, DeviceAllocator*, std::vector<std::shared_ptr<void>, std::allocator<std::shared_ptr<void> > >&, Executor*, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >*) in /opt/heavyai/bin/heavydb
17# PerfectJoinHashTable::fetchColumnsForDevice(std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, int, DeviceAllocator*) in /opt/heavyai/bin/heavydb
18# PerfectJoinHashTable::reify() in /opt/heavyai/bin/heavydb
19# PerfectJoinHashTable::getInstance(std::shared_ptr<Analyzer::BinOper>, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, int, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, Executor*, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
20# HashJoin::getInstance(std::shared_ptr<Analyzer::BinOper>, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, int, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, Executor*, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
21# Executor::buildHashTableForQualifier(std::shared_ptr<Analyzer::BinOper> const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
22# Executor::buildCurrentLevelHashTable(JoinCondition const&, unsigned long, RelAlgExecutionUnit&, CompilationOptions const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) in /opt/heavyai/bin/heavydb
23# Executor::buildJoinLoops(RelAlgExecutionUnit&, CompilationOptions const&, ExecutionOptions const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
24# Executor::compileWorkUnit(std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, ColumnDescriptor const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, ColumnDescriptor const*> > > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, CudaMgr_Namespace::CudaMgr const*, bool, std::shared_ptr<RowSetMemoryOwner>, unsigned long, signed char, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, RenderInfo*) in /opt/heavyai/bin/heavydb
25# QueryCompilationDescriptor::compile(unsigned long, signed char, bool, RelAlgExecutionUnit const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, ColumnDescriptor const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, ColumnDescriptor const*> > > const&, ColumnFetcher const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, Executor*) in /opt/heavyai/bin/heavydb
26# Executor::executeWorkUnitImpl(unsigned long&, bool, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, std::shared_ptr<RowSetMemoryOwner>, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
27# Executor::executeWorkUnit(unsigned long&, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
28# RelAlgExecutor::getNDVEstimation(RelAlgExecutor::WorkUnit const&, long, bool, CompilationOptions const&, ExecutionOptions const&) in /opt/heavyai/bin/heavydb
29# 0x0000000001B2F3F9 in /opt/heavyai/bin/heavydb
30# RelAlgExecutor::executeCompound(RelCompound const*, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
31# RelAlgExecutor::executeRelAlgStep(RaExecutionSequence const&, unsigned long, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
32# RelAlgExecutor::executeRelAlgSeq(RaExecutionSequence const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, bool) in /opt/heavyai/bin/heavydb
33# RelAlgExecutor::executeRelAlgQueryNoRetry(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
34# RelAlgExecutor::executeRelAlgQuery(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
35# DBHandler::execute_rel_alg(ExecutionResult&, query_state::QueryStateProxy, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, ExecutorDeviceType, int, int, bool, bool, ExplainInfo const&, std::optional<unsigned long>) const in /opt/heavyai/bin/heavydb
36# 0x000000000215E287 in /opt/heavyai/bin/heavydb
37# 0x000000000215EA14 in /opt/heavyai/bin/heavydb
38# 0x000000000215F87B in /opt/heavyai/bin/heavydb
39# 0x0000756FAE499EE8 in /lib/x86_64-linux-gnu/libc.so.6
40# 0x00000000020F3DF3 in /opt/heavyai/bin/heavydb
41# QueryDispatchQueue::worker(unsigned long) in /opt/heavyai/bin/heavydb
42# 0x000000000A62E230 in /opt/heavyai/bin/heavydb
43# 0x0000756FAE494AC3 in /lib/x86_64-linux-gnu/libc.so.6
44# 0x0000756FAE526850 in /lib/x86_64-linux-gnu/libc.so.6
2025-04-19T00:19:06.748099 I 39904 3 11 BufferMgr.cpp:322 ALLOCATION Attempted slab of 7173632 pages (3672899584B) failed GPU_MGR:0
2025-04-19T00:19:06.748465 I 39904 3 11 BufferMgr.cpp:309 ALLOCATION slab of 3586816 pages (1836449792B) created in 0 ms GPU_MGR:0
2025-04-19T00:19:06.748477 1 39904 3 11 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 576268, chunk key:  key: 1,3,17,0,
2025-04-19T00:19:06.748510 I 39904 3 11 BufferMgr.cpp:309 ALLOCATION slab of 8388608 pages (4294967296B) created in 0 ms CPU_MGR:0
2025-04-19T00:19:06.748515 1 39904 3 11 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 576268, chunk key:  key: 1,3,17,0,
2025-04-19T00:19:06.752562 1 39904 3 12 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 159999, # entries stored in the payload buffer: 144067, hash table size : 639996 Bytes
2025-04-19T00:19:06.756591 1 39904 3 11 PerfectJoinHashTable.cpp:666 RHS/Inner hash join values detected to not be unique, falling back to One-to-Many hash layout.
2025-04-19T00:19:06.756672 1 39904 3 13 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToMany, # hash entries: 159999, # entries stored in the payload buffer: 144067, hash table size : 1856260 Bytes
2025-04-19T00:19:06.757364 1 39904 3 11 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 996510333959180941)
2025-04-19T00:19:06.757401 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToMany in 99 ms
2025-04-19T00:19:06.757423 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:06.757467 1 39904 3 11 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,1,0,
2025-04-19T00:19:06.757476 1 39904 3 11 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,1,0,
2025-04-19T00:19:06.757834 1 39904 3 14 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 73049, # entries stored in the payload buffer: 73049, hash table size : 292196 Bytes
2025-04-19T00:19:06.758005 1 39904 3 11 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 7985831563889231492)
2025-04-19T00:19:06.758034 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:19:06.758047 I 39904 3 11 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 100 ms
2025-04-19T00:19:06.758254 1 39904 3 11 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 16
2025-04-19T00:19:06.758270 1 39904 3 11 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:19:06.758721 3 39904 3 11 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %22 = sext i32 %pos_start to i64
  %23 = icmp slt i64 %22, %row_count
  br i1 %23, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %24 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %34, %.loop.preheader
  %pos = phi i64 [ %22, %.loop.preheader ], [ %35, %34 ]
  %25 = load i64*, i64** %out, align 8
  %26 = call i32 @row_func(i64* %25, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i64* %join_hash_tables, i8* %row_func_mgr)
  %27 = lshr i64 %pos, 15
  %28 = and i64 %27, 16
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %30 = call i1 @check_interrupt()
  %31 = select i1 %30, i32 10, i32 %26
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %32 = phi i32 [ %31, %.interrupt_check ], [ %26, %.for.body ]
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %.error_exit, label %34

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %32, i32* %error_code)
  ret void

34:                                               ; preds = %.error_check
  %35 = add nsw i64 %pos, %24
  %36 = icmp slt i64 %35, %row_count
  br i1 %36, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %34
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_advance_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  %found_an_outer_match = alloca i1, align 1
  store i1 false, i1* %found_an_outer_match, align 1
  %outer_condition_current_match = alloca i1, align 1
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = load i64, i64* %join_hash_tables, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %0, i64 %3, i64 2, i64 160000, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %6 = add i64 %0, 639996
  %7 = call i64 @hash_join_idx_nullable(i64 %6, i64 %3, i64 2, i64 160000, i64 -2147483648)
  %8 = select i1 %5, i64 %7, i64 0
  %9 = add i64 %0, 1279992
  %10 = inttoptr i64 %9 to i32*
  %11 = getelementptr i32, i32* %10, i64 %4
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %ub_iter_counter_ = getelementptr i32, i32* %11, i64 %ub_iter_counter_val_
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %8
  store i1 false, i1* %outer_condition_current_match, align 1
  br i1 %have_more_inner_rows, label %eval_outer_cond_, label %after_eval_outer_cond_

ub_iter_advance_:                                 ; preds = %singleton_true_, %loop_done_false, %after_eval_outer_cond_
  %12 = add i64 %ub_iter_counter_val_, 1
  store i64 %12, i64* %ub_iter_counter_ptr_, align 8
  %no_more_inner_rows = icmp sgt i64 %12, %8
  br i1 %no_more_inner_rows, label %exit, label %ub_iter_head_

eval_outer_cond_:                                 ; preds = %ub_iter_head_
  %13 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %14 = trunc i64 %13 to i32
  %15 = load i32, i32* %ub_iter_counter_, align 4
  %16 = sext i32 %15 to i64
  %17 = call i64 @fixed_width_int_decode(i8* %col_buf7, i32 4, i64 %16)
  %18 = trunc i64 %17 to i32
  %19 = call i8 @eq_int32_t_nullable(i32 %14, i32 %18, i64 -2147483648, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 true, %20
  store i1 %21, i1* %outer_condition_current_match, align 1
  %22 = load i1, i1* %found_an_outer_match, align 1
  %23 = or i1 %21, %22
  store i1 %23, i1* %found_an_outer_match, align 1
  br label %after_eval_outer_cond_

after_eval_outer_cond_:                           ; preds = %eval_outer_cond_, %ub_iter_head_
  %24 = load i1, i1* %found_an_outer_match, align 1
  %25 = xor i1 %24, true
  %26 = icmp eq i64 %ub_iter_counter_val_, %8
  %27 = and i1 %25, %26
  %28 = load i1, i1* %outer_condition_current_match, align 1
  %29 = or i1 %28, %27
  %30 = load i1, i1* %outer_condition_current_match, align 1
  br i1 %29, label %singleton_true_, label %ub_iter_advance_

singleton_true_:                                  ; preds = %after_eval_outer_cond_
  %31 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %32 = trunc i64 %31 to i32
  %33 = getelementptr i64, i64* %join_hash_tables, i64 1
  %34 = load i64, i64* %33, align 8
  %35 = sext i32 %32 to i64
  %36 = call i64 @hash_join_idx_nullable(i64 %34, i64 %35, i64 2415022, i64 2488070, i64 -2147483648)
  %37 = icmp sge i64 %36, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %38 = load i1, i1* %remaining_outer_cond_match, align 1
  %39 = and i1 %37, %38
  br i1 %39, label %loop_body, label %ub_iter_advance_

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %40 = call i32 @filter_func(i1 %30, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %36, i8* %col_buf2, i64 %pos, i8* %col_buf1, i64* %out, i1* %loop_done)
  %41 = load i1, i1* %loop_done, align 1
  br i1 %41, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %40

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func(i1 %extra0, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %extra1, i8* %col_buf2, i64 %pos, i8* %col_buf1, i64* %out, i1* %loop_done) #33 {
entry:
  br i1 %extra0, label %outer_join_args, label %outer_join_nulls

outer_join_args:                                  ; preds = %entry
  %0 = load i32, i32* %ub_iter_counter_, align 4
  %1 = sext i32 %0 to i64
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %1)
  %3 = trunc i64 %2 to i32
  br label %outer_join_phi

outer_join_nulls:                                 ; preds = %entry
  br label %outer_join_phi

outer_join_phi:                                   ; preds = %outer_join_nulls, %outer_join_args
  %4 = phi i32 [ %3, %outer_join_args ], [ -2147483648, %outer_join_nulls ]
  br label %back_from_outer_join

back_from_outer_join:                             ; preds = %outer_join_phi
  %5 = icmp eq i32 %4, -2147483648
  %6 = and i1 true, %5
  br i1 %6, label %filter_true, label %filter_false

filter_true:                                      ; preds = %back_from_outer_join
  %7 = alloca i64, i32 3, align 8
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %9 to i64
  %11 = getelementptr i64, i64* %7, i32 0
  store i64 %10, i64* %11, align 8
  %12 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %13 = trunc i64 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = getelementptr i64, i64* %7, i32 1
  store i64 %14, i64* %15, align 8
  %16 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %17 = trunc i64 %16 to i32
  %18 = sext i32 %17 to i64
  %19 = getelementptr i64, i64* %7, i32 2
  store i64 %18, i64* %19, align 8
  %20 = bitcast i64* %out to i8*
  %21 = bitcast i64* %7 to i8*
  call void @linear_probabilistic_count(i8* %20, i32 268435456, i8* %21, i32 24)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %back_from_outer_join
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:19:06.759614 1 39904 3 11 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:19:06.775520 1 39904 3 11 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.077244
2025-04-19T00:19:06.870604 1 39904 3 11 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 19.789
2025-04-19T00:19:06.871371 1 39904 3 11 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 20.0433
2025-04-19T00:19:06.888306 1 39904 3 11 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 35.6241
2025-04-19T00:19:06.904660 1 39904 3 11 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_template
ptxas         .     224 bytes stack frame, 200 bytes spill stores, 200 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 280 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:19:06.904700 1 39904 3 11 NvidiaKernel.cpp:188 Generated GPU binary code size: 460640 bytes
2025-04-19T00:19:06.905129 1 39904 3 11 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:19:06.905372 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 248 ms
2025-04-19T00:19:06.905432 1 39904 3 11 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:19:06.905438 1 39904 3 11 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Estimator
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	Empty	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: False
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:19:06.905532 1 39904 3 11 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:19:06.905563 1 39904 3 11 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:19:06.905630 I 39904 3 15 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:19:06.905641 I 39904 3 15 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:19:06.905655 1 39904 3 15 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,1,0,
2025-04-19T00:19:06.905663 1 39904 3 15 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,1,0,
2025-04-19T00:19:06.910415 1 39904 3 15 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,4,0,
2025-04-19T00:19:06.910436 1 39904 3 15 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,4,0,
2025-04-19T00:19:06.914941 1 39904 3 15 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,16,0,
2025-04-19T00:19:06.914959 1 39904 3 15 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,16,0,
2025-04-19T00:19:06.919284 1 39904 3 15 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,18,0,
2025-04-19T00:19:06.919300 1 39904 3 15 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,18,0,
2025-04-19T00:19:06.925600 1 39904 3 15 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,19,0,
2025-04-19T00:19:06.930864 1 39904 3 15 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,20,0,
2025-04-19T00:19:06.936306 1 39904 3 15 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,22,0,
2025-04-19T00:19:06.941588 1 39904 3 15 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 576268, chunk key:  key: 1,3,3,0,
2025-04-19T00:19:06.941609 1 39904 3 15 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 576268, chunk key:  key: 1,3,3,0,
2025-04-19T00:19:06.942695 1 39904 3 15 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,7,0,
2025-04-19T00:19:06.942710 1 39904 3 15 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,7,0,
2025-04-19T00:19:06.942913 I 39904 3 15 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 37 ms
2025-04-19T00:19:06.942940 I 39904 3 15 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:19:06.942952 I 39904 3 15 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:19:06.943002 1 39904 3 15 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.010592 ms
2025-04-19T00:19:06.943012 1 39904 3 15 GpuInterrupt.cpp:26 Registered module 0x756f4060c070 on device 0
2025-04-19T00:19:06.944572 1 39904 3 15 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 1 ms
2025-04-19T00:19:06.944582 1 39904 3 15 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:19:06.944587 1 39904 3 15 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:19:06.946454 1 39904 3 15 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 1 ms
2025-04-19T00:19:07.072935 I 39904 3 15 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 129 ms
2025-04-19T00:19:07.072969 I 39904 3 15 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 130 ms
2025-04-19T00:19:07.072988 I 39904 3 15 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 167 ms
2025-04-19T00:19:07.073028 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 416 ms
2025-04-19T00:19:07.146747 1 39904 3 11 RelAlgExecutor.cpp:3926 CardinalityEstimationRequired, Use ndv_estimation: 1290819, cardinality for estimated_groups_buffer_entry_guess: 2581638
2025-04-19T00:19:07.146784 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 16100740188082579601
	Table/Col/Levels: ((db_id: 1, table_id: 4), 1, 0) ((db_id: 1, table_id: 4), 4, 0) ((db_id: 1, table_id: 4), 16, 0) ((db_id: 1, table_id: 4), 18, 0) ((db_id: 1, table_id: 4), 19, 0) ((db_id: 1, table_id: 4), 20, 0) ((db_id: 1, table_id: 4), 22, 0) ((db_id: 1, table_id: 3), 3, 1) ((db_id: 1, table_id: 3), 17, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) 
	Join Quals: 		0 LEFT(= (ColumnVar (db_id: 1, table_id: 3, column_id: 17), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 4, column_id: 18), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 4, column_id: 16), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 3, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 4, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (IS NULL (ColumnVar (db_id: 1, table_id: 3, column_id: 17), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 4, column_id: 16), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 4, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 8, column_id: 7), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 4, column_id: 16), rte: 0, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 4, column_id: 4), rte: 0, which_row: 3, varno: 3) , (SUM (ColumnVar (db_id: 1, table_id: 4, column_id: 19), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 4, column_id: 20), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 4, column_id: 22), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:07.146845 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:07.146869 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:07.147646 I 39904 3 11 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:19:07.147659 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:07.147701 1 39904 3 11 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToMany(key: 996510333959180941)
2025-04-19T00:19:07.147850 1 39904 3 16 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToMany, # hash entries: 159999, # entries stored in the payload buffer: 144067, hash table size : 1856260 Bytes
2025-04-19T00:19:07.148411 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToMany in 0 ms
2025-04-19T00:19:07.148451 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:07.148476 1 39904 3 11 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 7985831563889231492)
2025-04-19T00:19:07.148558 1 39904 3 17 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 73049, # entries stored in the payload buffer: 73049, hash table size : 292196 Bytes
2025-04-19T00:19:07.148750 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:19:07.148764 I 39904 3 11 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 1 ms
2025-04-19T00:19:07.149038 1 39904 3 11 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 16
2025-04-19T00:19:07.149054 1 39904 3 11 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:19:07.149427 3 39904 3 11 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !27

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !27
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %22 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %23 = call i32 @pos_start_impl(i32* %row_index_resume)
  %24 = call i32 @pos_step_impl()
  %25 = call i32 @group_buff_idx_impl()
  %26 = sext i32 %23 to i64
  %27 = getelementptr i64*, i64** %group_by_buffers, i32 %25
  %col_buffer = load i64*, i64** %27, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %28 = icmp slt i64 %26, %row_count
  br i1 %28, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %29 = sext i32 %24 to i64
  br label %.forbody

.forbody:                                         ; preds = %38, %.loop.preheader
  %pos = phi i64 [ %26, %.loop.preheader ], [ %39, %38 ]
  %30 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i64* %join_hash_tables, i8* %row_func_mgr)
  %31 = lshr i64 %pos, 15
  %32 = and i64 %31, 16
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %34 = call i1 @check_interrupt()
  %35 = select i1 %34, i32 10, i32 %30
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %36 = phi i32 [ %35, %.interrupt_check ], [ %30, %.forbody ]
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %.error_exit, label %38

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %36, i32* %error_code)
  ret void

38:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %39 = add i64 %pos, %29
  %40 = icmp slt i64 %39, %row_count
  br i1 %40, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %38
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_advance_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  %found_an_outer_match = alloca i1, align 1
  store i1 false, i1* %found_an_outer_match, align 1
  %outer_condition_current_match = alloca i1, align 1
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = load i64, i64* %join_hash_tables, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %0, i64 %3, i64 2, i64 160000, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %6 = add i64 %0, 639996
  %7 = call i64 @hash_join_idx_nullable(i64 %6, i64 %3, i64 2, i64 160000, i64 -2147483648)
  %8 = select i1 %5, i64 %7, i64 0
  %9 = add i64 %0, 1279992
  %10 = inttoptr i64 %9 to i32*
  %11 = getelementptr i32, i32* %10, i64 %4
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %ub_iter_counter_ = getelementptr i32, i32* %11, i64 %ub_iter_counter_val_
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %8
  store i1 false, i1* %outer_condition_current_match, align 1
  br i1 %have_more_inner_rows, label %eval_outer_cond_, label %after_eval_outer_cond_

ub_iter_advance_:                                 ; preds = %singleton_true_, %loop_done_false, %after_eval_outer_cond_
  %12 = add i64 %ub_iter_counter_val_, 1
  store i64 %12, i64* %ub_iter_counter_ptr_, align 8
  %no_more_inner_rows = icmp sgt i64 %12, %8
  br i1 %no_more_inner_rows, label %exit, label %ub_iter_head_

eval_outer_cond_:                                 ; preds = %ub_iter_head_
  %13 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %14 = trunc i64 %13 to i32
  %15 = load i32, i32* %ub_iter_counter_, align 4
  %16 = sext i32 %15 to i64
  %17 = call i64 @fixed_width_int_decode(i8* %col_buf7, i32 4, i64 %16)
  %18 = trunc i64 %17 to i32
  %19 = call i8 @eq_int32_t_nullable(i32 %14, i32 %18, i64 -2147483648, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 true, %20
  store i1 %21, i1* %outer_condition_current_match, align 1
  %22 = load i1, i1* %found_an_outer_match, align 1
  %23 = or i1 %21, %22
  store i1 %23, i1* %found_an_outer_match, align 1
  br label %after_eval_outer_cond_

after_eval_outer_cond_:                           ; preds = %eval_outer_cond_, %ub_iter_head_
  %24 = load i1, i1* %found_an_outer_match, align 1
  %25 = xor i1 %24, true
  %26 = icmp eq i64 %ub_iter_counter_val_, %8
  %27 = and i1 %25, %26
  %28 = load i1, i1* %outer_condition_current_match, align 1
  %29 = or i1 %28, %27
  %30 = load i1, i1* %outer_condition_current_match, align 1
  br i1 %29, label %singleton_true_, label %ub_iter_advance_

singleton_true_:                                  ; preds = %after_eval_outer_cond_
  %31 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %32 = trunc i64 %31 to i32
  %33 = getelementptr i64, i64* %join_hash_tables, i64 1
  %34 = load i64, i64* %33, align 8
  %35 = sext i32 %32 to i64
  %36 = call i64 @hash_join_idx_nullable(i64 %34, i64 %35, i64 2415022, i64 2488070, i64 -2147483648)
  %37 = icmp sge i64 %36, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %38 = load i1, i1* %remaining_outer_cond_match, align 1
  %39 = and i1 %37, %38
  br i1 %39, label %loop_body, label %ub_iter_advance_

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %40 = call i32 @filter_func(i1 %30, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %36, i8* %col_buf2, i64 %pos, i8* %col_buf1, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6)
  %41 = load i1, i1* %loop_done, align 1
  br i1 %41, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %40

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func(i1 %extra0, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %extra1, i8* %col_buf2, i64 %pos, i8* %col_buf1, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6) #34 {
entry:
  br i1 %extra0, label %outer_join_args, label %outer_join_nulls

outer_join_args:                                  ; preds = %entry
  %0 = load i32, i32* %ub_iter_counter_, align 4
  %1 = sext i32 %0 to i64
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %1)
  %3 = trunc i64 %2 to i32
  br label %outer_join_phi

outer_join_nulls:                                 ; preds = %entry
  br label %outer_join_phi

outer_join_phi:                                   ; preds = %outer_join_nulls, %outer_join_args
  %4 = phi i32 [ %3, %outer_join_args ], [ -2147483648, %outer_join_nulls ]
  br label %back_from_outer_join

back_from_outer_join:                             ; preds = %outer_join_phi
  %5 = icmp eq i32 %4, -2147483648
  %6 = and i1 true, %5
  br i1 %6, label %filter_true, label %filter_false

filter_true:                                      ; preds = %back_from_outer_join
  %7 = alloca i32, i32 3, align 4
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %9 = trunc i64 %8 to i32
  %10 = getelementptr i32, i32* %7, i32 0
  store i32 %9, i32* %10, align 4
  %11 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %12 = trunc i64 %11 to i32
  %13 = getelementptr i32, i32* %7, i32 1
  store i32 %12, i32* %13, align 4
  %14 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i32, i32* %7, i32 2
  store i32 %15, i32* %16, align 4
  %17 = bitcast i32* %7 to i64*
  %18 = call i64* @get_group_value(i64* %group_by_buff, i32 2581638, i64* %17, i32 3, i32 4, i32 5)
  %19 = icmp ne i64* %18, null
  br i1 %19, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %back_from_outer_join
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %20 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %pos)
  %21 = trunc i64 %20 to i32
  %agg_col_ptr = getelementptr i64, i64* %18, i64 0
  %22 = icmp eq i32 %21, -2147483648
  %23 = sext i32 %21 to i64
  %24 = select i1 %22, i64 -9223372036854775808, i64 %23
  %25 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr, i64 %24, i64 -9223372036854775808)
  %26 = call i64 @fixed_width_int_decode(i8* %col_buf5, i32 4, i64 %pos)
  %27 = trunc i64 %26 to i32
  %28 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %27, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr1 = getelementptr i64, i64* %18, i64 1
  %29 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr1, i64 %28, i64 -9223372036854775808)
  %30 = call i64 @fixed_width_int_decode(i8* %col_buf6, i32 4, i64 %pos)
  %31 = trunc i64 %30 to i32
  %32 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %31, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr2 = getelementptr i64, i64* %18, i64 2
  %33 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr2, i64 %32, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %34 = trunc i64 %pos to i32
  %35 = sub i32 0, %34
  ret i32 %35
}

End of IR
2025-04-19T00:19:07.149768 1 39904 3 11 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:19:07.165906 1 39904 3 11 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.07927
2025-04-19T00:19:07.230129 1 39904 3 11 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.6418
2025-04-19T00:19:07.230887 1 39904 3 11 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 14.8658
2025-04-19T00:19:07.250593 1 39904 3 11 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 32.8191
2025-04-19T00:19:07.267784 1 39904 3 11 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     264 bytes stack frame, 248 bytes spill stores, 288 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 344 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:19:07.267820 1 39904 3 11 NvidiaKernel.cpp:188 Generated GPU binary code size: 476256 bytes
2025-04-19T00:19:07.268287 1 39904 3 11 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:19:07.268608 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 121 ms
2025-04-19T00:19:07.268677 1 39904 3 11 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:19:07.268683 1 39904 3 11 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 3
	Target group by indices: 0,1,2,-1,-1,-1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 0 , 0
	3 | 8 , 8
	4 | 8 , 8
	5 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3], [4], [5]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 2581638
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: False
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:19:07.268790 1 39904 3 11 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:19:07.268813 1 39904 3 11 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:19:07.268835 I 39904 3 18 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:19:07.268845 I 39904 3 18 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:19:07.268863 1 39904 3 18 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,19,0,
2025-04-19T00:19:07.269659 1 39904 3 18 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,20,0,
2025-04-19T00:19:07.270614 1 39904 3 18 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,22,0,
2025-04-19T00:19:07.271585 I 39904 3 18 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 2 ms
2025-04-19T00:19:07.271647 I 39904 3 18 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:19:07.271669 2 39904 3 18 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(4),nest_level(0)) InputDescriptor(db_id(1), table_id(3),nest_level(1)) InputDescriptor(db_id(1), table_id(8),nest_level(2))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(20),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(22),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(3),nest_level(1))) InputColDescriptor(col_id(17),InputDescriptor(db_id(1), table_id(3),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(2)))) ra_exe_unit.scan_limit=0 num_rows=((1441548 144067 73049)) frag_offsets=((0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=2581638 device_id=0 outer_table_key=(db_id: 1, table_id: 4) scan_limit=0 start_rowid=0 num_tables=3
2025-04-19T00:19:07.271686 I 39904 3 18 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:19:07.271794 1 39904 3 18 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.023488 ms
2025-04-19T00:19:07.271807 1 39904 3 18 GpuInterrupt.cpp:26 Registered module 0x756f4017de90 on device 0
2025-04-19T00:19:07.274080 1 39904 3 18 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 2 ms
2025-04-19T00:19:07.274094 1 39904 3 18 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:19:07.274099 1 39904 3 18 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:19:07.281670 1 39904 3 18 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 7 ms
2025-04-19T00:19:07.329336 1 39904 3 18 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:19:07.329367 1 39904 3 18 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 47 ms
2025-04-19T00:19:07.329374 I 39904 3 18 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 57 ms
2025-04-19T00:19:07.330017 3 39904 3 18 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:19:07.330102 3 39904 3 18 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i32*
  %row_ptr_loaded = load i32, i32* %0, align 4
  %is_key_empty = icmp eq i32 %row_ptr_loaded, 2147483647
  ret i1 %is_key_empty
}
2025-04-19T00:19:07.330134 3 39904 3 18 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_targets_ptr, i8* %that_targets_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %target_1_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 0
  %target_1_first_slot1 = getelementptr i8, i8* %that_targets_ptr, i32 0
  %target_2_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 0
  %target_2_first_slot2 = getelementptr i8, i8* %that_targets_ptr, i32 0
  %target_3_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 0
  %target_3_first_slot3 = getelementptr i8, i8* %that_targets_ptr, i32 0
  %sum_dest = bitcast i8* %target_3_first_slot to i64*
  %0 = bitcast i8* %target_3_first_slot3 to i64*
  %target_3_first_slot_loaded = load i64, i64* %0, align 8
  %1 = call i64 @agg_sum_skip_val(i64* %sum_dest, i64 %target_3_first_slot_loaded, i64 -9223372036854775808)
  %target_4_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 8
  %target_4_first_slot4 = getelementptr i8, i8* %that_targets_ptr, i32 8
  %sum_dest5 = bitcast i8* %target_4_first_slot to i64*
  %2 = bitcast i8* %target_4_first_slot4 to i64*
  %target_4_first_slot_loaded = load i64, i64* %2, align 8
  %3 = call i64 @agg_sum_skip_val(i64* %sum_dest5, i64 %target_4_first_slot_loaded, i64 -9223372036854775808)
  %target_5_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 16
  %target_5_first_slot6 = getelementptr i8, i8* %that_targets_ptr, i32 16
  %sum_dest7 = bitcast i8* %target_5_first_slot to i64*
  %4 = bitcast i8* %target_5_first_slot6 to i64*
  %target_5_first_slot_loaded = load i64, i64* %4, align 8
  %5 = call i64 @agg_sum_skip_val(i64* %sum_dest7, i64 %target_5_first_slot_loaded, i64 -9223372036854775808)
  ret i32 0
}
2025-04-19T00:19:07.330181 3 39904 3 18 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %that_entry_idx_64 = sext i32 %that_entry_idx to i64
  %that_row_off_in_bytes = mul i64 %that_entry_idx_64, 40
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %that_row_off_in_bytes
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_ptr_out = alloca i64*, align 8
  %this_is_empty_out = alloca i8, align 1
  call void @get_group_value_reduction_rt(i8* %this_buff, i8* %that_row_ptr, i32 3, i8* %this_qmd_handle, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i64 40, i64** %this_targets_ptr_out, i8* %this_is_empty_out)
  %this_targets_ptr_i64 = load i64*, i64** %this_targets_ptr_out, align 8
  %this_is_empty = load i8, i8* %this_is_empty_out, align 1
  %this_is_empty_bool = trunc i8 %this_is_empty to i1
  br i1 %this_is_empty_bool, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 0

.do_reduction2:                                   ; preds = %.do_reduction
  %this_targets_ptr = bitcast i64* %this_targets_ptr_i64 to i8*
  %that_targets_ptr = getelementptr i8, i8* %that_row_ptr, i32 16
  %0 = call i32 @reduce_one_entry(i8* %this_targets_ptr, i8* %that_targets_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:19:07.333844 2 39904 3 18 Execute.cpp:4139 results->rowCount()=1290840
2025-04-19T00:19:07.338655 I 39904 3 18 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 67 ms
2025-04-19T00:19:07.338698 I 39904 3 18 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 69 ms
2025-04-19T00:19:07.338812 1 39904 3 11 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:19:07.338842 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 192 ms
2025-04-19T00:19:07.338889 1 39904 3 11 Execute.cpp:5202 Put estimated cardinality to the cache
2025-04-19T00:19:07.338912 I 39904 3 11 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 682 ms
2025-04-19T00:19:07.338924 3 39904 3 11 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-32, ...) exec_desc.getResult().getDataPtr()->rowCount()=1290840
2025-04-19T00:19:07.342948 I 39904 3 11 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 686 ms
2025-04-19T00:19:07.342962 1 39904 3 11 RelAlgExecutor.cpp:945 Executing query step 1 / 3
2025-04-19T00:19:07.342970 I 39904 3 11 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:19:07.343002 3 39904 3 11 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:19:07.343009 3 39904 3 11 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:19:07.343101 3 39904 3 11 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1 input_col_descs_unique.size()=6 source_used_inputs.size()=7
2025-04-19T00:19:07.343126 3 39904 3 11 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(23),nest_level(0)) InputDescriptor(db_id(1), table_id(22),nest_level(1)) InputDescriptor(db_id(1), table_id(8),nest_level(2)))
2025-04-19T00:19:07.343131 3 39904 3 11 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(20),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(22),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(22),nest_level(1))) InputColDescriptor(col_id(14),InputDescriptor(db_id(1), table_id(22),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(2))))
2025-04-19T00:19:07.343179 3 39904 3 11 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1) = 9
2025-04-19T00:19:07.343271 2 39904 3 11 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 6388209503631028349 (access path: 8|), outer join col info: 14364552679692060618 (access path: 7|)
2025-04-19T00:19:07.343296 2 39904 3 11 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 17117943113708969057 (access path: 4|), outer join col info: 8053290250870087076 (access path: 7|)
2025-04-19T00:19:07.343315 I 39904 3 11 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:19:07.343327 3 39904 3 11 RelAlgExecutor.cpp:3692 body->getId()=31 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:19:07.343393 1 39904 3 11 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:19:07.343399 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 4921358422441578098
	Table/Col/Levels: ((db_id: 1, table_id: 23), 1, 0) ((db_id: 1, table_id: 23), 4, 0) ((db_id: 1, table_id: 23), 5, 0) ((db_id: 1, table_id: 23), 18, 0) ((db_id: 1, table_id: 23), 19, 0) ((db_id: 1, table_id: 23), 20, 0) ((db_id: 1, table_id: 23), 22, 0) ((db_id: 1, table_id: 22), 3, 1) ((db_id: 1, table_id: 22), 14, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) 
	Join Quals: 		0 LEFT(= (ColumnVar (db_id: 1, table_id: 22, column_id: 14), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 23, column_id: 18), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 23, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 22, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 23, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (IS NULL (ColumnVar (db_id: 1, table_id: 22, column_id: 14), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 23, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 23, column_id: 5), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 8, column_id: 7), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 23, column_id: 4), rte: 0, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 23, column_id: 5), rte: 0, which_row: 3, varno: 3) , (SUM (ColumnVar (db_id: 1, table_id: 23, column_id: 19), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 23, column_id: 20), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 23, column_id: 22), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:07.343437 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:07.343452 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:07.343536 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:19:07.343546 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:19:07.343568 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 4921358422441578098
	Table/Col/Levels: ((db_id: 1, table_id: 23), 1, 0) ((db_id: 1, table_id: 23), 4, 0) ((db_id: 1, table_id: 23), 5, 0) ((db_id: 1, table_id: 23), 18, 0) ((db_id: 1, table_id: 23), 19, 0) ((db_id: 1, table_id: 23), 20, 0) ((db_id: 1, table_id: 23), 22, 0) ((db_id: 1, table_id: 22), 3, 1) ((db_id: 1, table_id: 22), 14, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) 
	Join Quals: 		0 LEFT(= (ColumnVar (db_id: 1, table_id: 22, column_id: 14), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 23, column_id: 18), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 23, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 22, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 23, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (IS NULL (ColumnVar (db_id: 1, table_id: 22, column_id: 14), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:07.343594 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:07.343604 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:07.344411 I 39904 3 11 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:19:07.344428 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:07.344474 1 39904 3 11 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 286616, chunk key:  key: 1,22,14,0,
2025-04-19T00:19:07.344484 1 39904 3 11 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 286616, chunk key:  key: 1,22,14,0,
2025-04-19T00:19:07.344895 1 39904 3 13591 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 59999, # entries stored in the payload buffer: 71654, hash table size : 239996 Bytes
2025-04-19T00:19:07.345157 1 39904 3 11 PerfectJoinHashTable.cpp:666 RHS/Inner hash join values detected to not be unique, falling back to One-to-Many hash layout.
2025-04-19T00:19:07.345205 1 39904 3 13592 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToMany, # hash entries: 59999, # entries stored in the payload buffer: 71654, hash table size : 766608 Bytes
2025-04-19T00:19:07.345655 1 39904 3 11 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 14260864502105881295)
2025-04-19T00:19:07.345668 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToMany in 1 ms
2025-04-19T00:19:07.345680 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:07.345704 1 39904 3 11 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 7985831563889231492)
2025-04-19T00:19:07.345769 1 39904 3 13593 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 73049, # entries stored in the payload buffer: 73049, hash table size : 292196 Bytes
2025-04-19T00:19:07.345955 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:19:07.345968 I 39904 3 11 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 1 ms
2025-04-19T00:19:07.346090 1 39904 3 11 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:19:07.346102 1 39904 3 11 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:19:07.346432 3 39904 3 11 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %22 = sext i32 %pos_start to i64
  %23 = icmp slt i64 %22, %row_count
  br i1 %23, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %24 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %34, %.loop.preheader
  %pos = phi i64 [ %22, %.loop.preheader ], [ %35, %34 ]
  %25 = load i64*, i64** %out, align 8
  %26 = call i32 @row_func(i64* %25, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i64* %join_hash_tables, i8* %row_func_mgr)
  %27 = lshr i64 %pos, 15
  %28 = and i64 %27, 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %30 = call i1 @check_interrupt()
  %31 = select i1 %30, i32 10, i32 %26
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %32 = phi i32 [ %31, %.interrupt_check ], [ %26, %.for.body ]
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %.error_exit, label %34

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %32, i32* %error_code)
  ret void

34:                                               ; preds = %.error_check
  %35 = add nsw i64 %pos, %24
  %36 = icmp slt i64 %35, %row_count
  br i1 %36, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %34
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_advance_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  %found_an_outer_match = alloca i1, align 1
  store i1 false, i1* %found_an_outer_match, align 1
  %outer_condition_current_match = alloca i1, align 1
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = load i64, i64* %join_hash_tables, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %0, i64 %3, i64 1, i64 59999, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %6 = add i64 %0, 239996
  %7 = call i64 @hash_join_idx_nullable(i64 %6, i64 %3, i64 1, i64 59999, i64 -2147483648)
  %8 = select i1 %5, i64 %7, i64 0
  %9 = add i64 %0, 479992
  %10 = inttoptr i64 %9 to i32*
  %11 = getelementptr i32, i32* %10, i64 %4
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %ub_iter_counter_ = getelementptr i32, i32* %11, i64 %ub_iter_counter_val_
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %8
  store i1 false, i1* %outer_condition_current_match, align 1
  br i1 %have_more_inner_rows, label %eval_outer_cond_, label %after_eval_outer_cond_

ub_iter_advance_:                                 ; preds = %singleton_true_, %loop_done_false, %after_eval_outer_cond_
  %12 = add i64 %ub_iter_counter_val_, 1
  store i64 %12, i64* %ub_iter_counter_ptr_, align 8
  %no_more_inner_rows = icmp sgt i64 %12, %8
  br i1 %no_more_inner_rows, label %exit, label %ub_iter_head_

eval_outer_cond_:                                 ; preds = %ub_iter_head_
  %13 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %14 = trunc i64 %13 to i32
  %15 = load i32, i32* %ub_iter_counter_, align 4
  %16 = sext i32 %15 to i64
  %17 = call i64 @fixed_width_int_decode(i8* %col_buf7, i32 4, i64 %16)
  %18 = trunc i64 %17 to i32
  %19 = call i8 @eq_int32_t_nullable(i32 %14, i32 %18, i64 -2147483648, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 true, %20
  store i1 %21, i1* %outer_condition_current_match, align 1
  %22 = load i1, i1* %found_an_outer_match, align 1
  %23 = or i1 %21, %22
  store i1 %23, i1* %found_an_outer_match, align 1
  br label %after_eval_outer_cond_

after_eval_outer_cond_:                           ; preds = %eval_outer_cond_, %ub_iter_head_
  %24 = load i1, i1* %found_an_outer_match, align 1
  %25 = xor i1 %24, true
  %26 = icmp eq i64 %ub_iter_counter_val_, %8
  %27 = and i1 %25, %26
  %28 = load i1, i1* %outer_condition_current_match, align 1
  %29 = or i1 %28, %27
  %30 = load i1, i1* %outer_condition_current_match, align 1
  br i1 %29, label %singleton_true_, label %ub_iter_advance_

singleton_true_:                                  ; preds = %after_eval_outer_cond_
  %31 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %32 = trunc i64 %31 to i32
  %33 = getelementptr i64, i64* %join_hash_tables, i64 1
  %34 = load i64, i64* %33, align 8
  %35 = sext i32 %32 to i64
  %36 = call i64 @hash_join_idx_nullable(i64 %34, i64 %35, i64 2415022, i64 2488070, i64 -2147483648)
  %37 = icmp sge i64 %36, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %38 = load i1, i1* %remaining_outer_cond_match, align 1
  %39 = and i1 %37, %38
  br i1 %39, label %loop_body, label %ub_iter_advance_

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %40 = call i32 @filter_func(i1 %30, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %36, i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %out, i1* %loop_done)
  %41 = load i1, i1* %loop_done, align 1
  br i1 %41, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %40

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func(i1 %extra0, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %extra1, i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %out, i1* %loop_done) #33 {
entry:
  br i1 %extra0, label %outer_join_args, label %outer_join_nulls

outer_join_args:                                  ; preds = %entry
  %0 = load i32, i32* %ub_iter_counter_, align 4
  %1 = sext i32 %0 to i64
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %1)
  %3 = trunc i64 %2 to i32
  br label %outer_join_phi

outer_join_nulls:                                 ; preds = %entry
  br label %outer_join_phi

outer_join_phi:                                   ; preds = %outer_join_nulls, %outer_join_args
  %4 = phi i32 [ %3, %outer_join_args ], [ -2147483648, %outer_join_nulls ]
  br label %back_from_outer_join

back_from_outer_join:                             ; preds = %outer_join_phi
  %5 = icmp eq i32 %4, -2147483648
  %6 = and i1 true, %5
  br i1 %6, label %filter_true, label %filter_false

filter_true:                                      ; preds = %back_from_outer_join
  %7 = alloca i64, i32 3, align 8
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %9 to i64
  %11 = getelementptr i64, i64* %7, i32 0
  store i64 %10, i64* %11, align 8
  %12 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %13 = trunc i64 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = getelementptr i64, i64* %7, i32 1
  store i64 %14, i64* %15, align 8
  %16 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %17 = trunc i64 %16 to i32
  %18 = sext i32 %17 to i64
  %19 = getelementptr i64, i64* %7, i32 2
  store i64 %18, i64* %19, align 8
  %20 = bitcast i64* %out to i8*
  %21 = bitcast i64* %7 to i8*
  call void @linear_probabilistic_count(i8* %20, i32 268435456, i8* %21, i32 24)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %back_from_outer_join
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:19:07.346731 1 39904 3 11 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:19:07.360739 1 39904 3 11 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.086673
2025-04-19T00:19:07.421857 1 39904 3 11 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.9073
2025-04-19T00:19:07.422689 1 39904 3 11 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.1654
2025-04-19T00:19:07.439458 1 39904 3 11 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 30.3747
2025-04-19T00:19:07.455951 1 39904 3 11 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_template
ptxas         .     224 bytes stack frame, 200 bytes spill stores, 200 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 280 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:19:07.455983 1 39904 3 11 NvidiaKernel.cpp:188 Generated GPU binary code size: 460640 bytes
2025-04-19T00:19:07.456438 1 39904 3 11 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:19:07.456684 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 113 ms
2025-04-19T00:19:07.456748 1 39904 3 11 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:19:07.456753 1 39904 3 11 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Estimator
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	Empty	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: False
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:19:07.456903 1 39904 3 11 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:19:07.456928 1 39904 3 11 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:19:07.456948 I 39904 3 13594 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:19:07.456958 I 39904 3 13594 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:19:07.456972 1 39904 3 13594 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,1,0,
2025-04-19T00:19:07.456981 1 39904 3 13594 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,1,0,
2025-04-19T00:19:07.459268 1 39904 3 13594 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,4,0,
2025-04-19T00:19:07.459285 1 39904 3 13594 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,4,0,
2025-04-19T00:19:07.461138 1 39904 3 13594 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,5,0,
2025-04-19T00:19:07.461162 1 39904 3 13594 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,5,0,
2025-04-19T00:19:07.463272 1 39904 3 13594 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,18,0,
2025-04-19T00:19:07.463286 1 39904 3 13594 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,18,0,
2025-04-19T00:19:07.465399 1 39904 3 13594 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,19,0,
2025-04-19T00:19:07.467249 1 39904 3 13594 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,20,0,
2025-04-19T00:19:07.469067 1 39904 3 13594 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,22,0,
2025-04-19T00:19:07.470687 1 39904 3 13594 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 286616, chunk key:  key: 1,22,3,0,
2025-04-19T00:19:07.470699 1 39904 3 13594 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 286616, chunk key:  key: 1,22,3,0,
2025-04-19T00:19:07.470937 I 39904 3 13594 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 13 ms
2025-04-19T00:19:07.470969 I 39904 3 13594 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:19:07.470981 I 39904 3 13594 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:19:07.471113 1 39904 3 13594 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.096000 ms
2025-04-19T00:19:07.471125 1 39904 3 13594 GpuInterrupt.cpp:26 Registered module 0x756f40684210 on device 0
2025-04-19T00:19:07.472689 1 39904 3 13594 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 1 ms
2025-04-19T00:19:07.472711 1 39904 3 13594 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:19:07.472719 1 39904 3 13594 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:19:07.473737 1 39904 3 13594 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 1 ms
2025-04-19T00:19:07.600881 I 39904 3 13594 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 129 ms
2025-04-19T00:19:07.600925 I 39904 3 13594 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 129 ms
2025-04-19T00:19:07.600945 I 39904 3 13594 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 144 ms
2025-04-19T00:19:07.600981 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 257 ms
2025-04-19T00:19:07.674824 1 39904 3 11 RelAlgExecutor.cpp:3926 CardinalityEstimationRequired, Use ndv_estimation: 647528, cardinality for estimated_groups_buffer_entry_guess: 1295056
2025-04-19T00:19:07.674860 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 4921358422441578098
	Table/Col/Levels: ((db_id: 1, table_id: 23), 1, 0) ((db_id: 1, table_id: 23), 4, 0) ((db_id: 1, table_id: 23), 5, 0) ((db_id: 1, table_id: 23), 18, 0) ((db_id: 1, table_id: 23), 19, 0) ((db_id: 1, table_id: 23), 20, 0) ((db_id: 1, table_id: 23), 22, 0) ((db_id: 1, table_id: 22), 3, 1) ((db_id: 1, table_id: 22), 14, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) 
	Join Quals: 		0 LEFT(= (ColumnVar (db_id: 1, table_id: 22, column_id: 14), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 23, column_id: 18), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 23, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 22, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 23, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (IS NULL (ColumnVar (db_id: 1, table_id: 22, column_id: 14), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 23, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 23, column_id: 5), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 8, column_id: 7), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 23, column_id: 4), rte: 0, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 23, column_id: 5), rte: 0, which_row: 3, varno: 3) , (SUM (ColumnVar (db_id: 1, table_id: 23, column_id: 19), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 23, column_id: 20), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 23, column_id: 22), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:07.674923 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:07.674949 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:07.675754 I 39904 3 11 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:19:07.675766 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:07.675821 1 39904 3 11 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToMany(key: 14260864502105881295)
2025-04-19T00:19:07.675957 1 39904 3 13595 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToMany, # hash entries: 59999, # entries stored in the payload buffer: 71654, hash table size : 766608 Bytes
2025-04-19T00:19:07.676455 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToMany in 0 ms
2025-04-19T00:19:07.676489 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:07.676514 1 39904 3 11 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 7985831563889231492)
2025-04-19T00:19:07.676593 1 39904 3 13596 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 73049, # entries stored in the payload buffer: 73049, hash table size : 292196 Bytes
2025-04-19T00:19:07.676784 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:19:07.676817 I 39904 3 11 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 1 ms
2025-04-19T00:19:07.677066 1 39904 3 11 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:19:07.677078 1 39904 3 11 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:19:07.677448 3 39904 3 11 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !27

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !27
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %22 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %23 = call i32 @pos_start_impl(i32* %row_index_resume)
  %24 = call i32 @pos_step_impl()
  %25 = call i32 @group_buff_idx_impl()
  %26 = sext i32 %23 to i64
  %27 = getelementptr i64*, i64** %group_by_buffers, i32 %25
  %col_buffer = load i64*, i64** %27, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %28 = icmp slt i64 %26, %row_count
  br i1 %28, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %29 = sext i32 %24 to i64
  br label %.forbody

.forbody:                                         ; preds = %38, %.loop.preheader
  %pos = phi i64 [ %26, %.loop.preheader ], [ %39, %38 ]
  %30 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i64* %join_hash_tables, i8* %row_func_mgr)
  %31 = lshr i64 %pos, 15
  %32 = and i64 %31, 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %34 = call i1 @check_interrupt()
  %35 = select i1 %34, i32 10, i32 %30
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %36 = phi i32 [ %35, %.interrupt_check ], [ %30, %.forbody ]
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %.error_exit, label %38

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %36, i32* %error_code)
  ret void

38:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %39 = add i64 %pos, %29
  %40 = icmp slt i64 %39, %row_count
  br i1 %40, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %38
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_advance_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  %found_an_outer_match = alloca i1, align 1
  store i1 false, i1* %found_an_outer_match, align 1
  %outer_condition_current_match = alloca i1, align 1
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = load i64, i64* %join_hash_tables, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %0, i64 %3, i64 1, i64 59999, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %6 = add i64 %0, 239996
  %7 = call i64 @hash_join_idx_nullable(i64 %6, i64 %3, i64 1, i64 59999, i64 -2147483648)
  %8 = select i1 %5, i64 %7, i64 0
  %9 = add i64 %0, 479992
  %10 = inttoptr i64 %9 to i32*
  %11 = getelementptr i32, i32* %10, i64 %4
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %ub_iter_counter_ = getelementptr i32, i32* %11, i64 %ub_iter_counter_val_
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %8
  store i1 false, i1* %outer_condition_current_match, align 1
  br i1 %have_more_inner_rows, label %eval_outer_cond_, label %after_eval_outer_cond_

ub_iter_advance_:                                 ; preds = %singleton_true_, %loop_done_false, %after_eval_outer_cond_
  %12 = add i64 %ub_iter_counter_val_, 1
  store i64 %12, i64* %ub_iter_counter_ptr_, align 8
  %no_more_inner_rows = icmp sgt i64 %12, %8
  br i1 %no_more_inner_rows, label %exit, label %ub_iter_head_

eval_outer_cond_:                                 ; preds = %ub_iter_head_
  %13 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %14 = trunc i64 %13 to i32
  %15 = load i32, i32* %ub_iter_counter_, align 4
  %16 = sext i32 %15 to i64
  %17 = call i64 @fixed_width_int_decode(i8* %col_buf7, i32 4, i64 %16)
  %18 = trunc i64 %17 to i32
  %19 = call i8 @eq_int32_t_nullable(i32 %14, i32 %18, i64 -2147483648, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 true, %20
  store i1 %21, i1* %outer_condition_current_match, align 1
  %22 = load i1, i1* %found_an_outer_match, align 1
  %23 = or i1 %21, %22
  store i1 %23, i1* %found_an_outer_match, align 1
  br label %after_eval_outer_cond_

after_eval_outer_cond_:                           ; preds = %eval_outer_cond_, %ub_iter_head_
  %24 = load i1, i1* %found_an_outer_match, align 1
  %25 = xor i1 %24, true
  %26 = icmp eq i64 %ub_iter_counter_val_, %8
  %27 = and i1 %25, %26
  %28 = load i1, i1* %outer_condition_current_match, align 1
  %29 = or i1 %28, %27
  %30 = load i1, i1* %outer_condition_current_match, align 1
  br i1 %29, label %singleton_true_, label %ub_iter_advance_

singleton_true_:                                  ; preds = %after_eval_outer_cond_
  %31 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %32 = trunc i64 %31 to i32
  %33 = getelementptr i64, i64* %join_hash_tables, i64 1
  %34 = load i64, i64* %33, align 8
  %35 = sext i32 %32 to i64
  %36 = call i64 @hash_join_idx_nullable(i64 %34, i64 %35, i64 2415022, i64 2488070, i64 -2147483648)
  %37 = icmp sge i64 %36, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %38 = load i1, i1* %remaining_outer_cond_match, align 1
  %39 = and i1 %37, %38
  br i1 %39, label %loop_body, label %ub_iter_advance_

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %40 = call i32 @filter_func(i1 %30, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %36, i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6)
  %41 = load i1, i1* %loop_done, align 1
  br i1 %41, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %40

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func(i1 %extra0, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %extra1, i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6) #34 {
entry:
  br i1 %extra0, label %outer_join_args, label %outer_join_nulls

outer_join_args:                                  ; preds = %entry
  %0 = load i32, i32* %ub_iter_counter_, align 4
  %1 = sext i32 %0 to i64
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %1)
  %3 = trunc i64 %2 to i32
  br label %outer_join_phi

outer_join_nulls:                                 ; preds = %entry
  br label %outer_join_phi

outer_join_phi:                                   ; preds = %outer_join_nulls, %outer_join_args
  %4 = phi i32 [ %3, %outer_join_args ], [ -2147483648, %outer_join_nulls ]
  br label %back_from_outer_join

back_from_outer_join:                             ; preds = %outer_join_phi
  %5 = icmp eq i32 %4, -2147483648
  %6 = and i1 true, %5
  br i1 %6, label %filter_true, label %filter_false

filter_true:                                      ; preds = %back_from_outer_join
  %7 = alloca i32, i32 3, align 4
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %9 = trunc i64 %8 to i32
  %10 = getelementptr i32, i32* %7, i32 0
  store i32 %9, i32* %10, align 4
  %11 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %12 = trunc i64 %11 to i32
  %13 = getelementptr i32, i32* %7, i32 1
  store i32 %12, i32* %13, align 4
  %14 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i32, i32* %7, i32 2
  store i32 %15, i32* %16, align 4
  %17 = bitcast i32* %7 to i64*
  %18 = call i64* @get_group_value(i64* %group_by_buff, i32 1295056, i64* %17, i32 3, i32 4, i32 5)
  %19 = icmp ne i64* %18, null
  br i1 %19, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %back_from_outer_join
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %20 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %pos)
  %21 = trunc i64 %20 to i32
  %agg_col_ptr = getelementptr i64, i64* %18, i64 0
  %22 = icmp eq i32 %21, -2147483648
  %23 = sext i32 %21 to i64
  %24 = select i1 %22, i64 -9223372036854775808, i64 %23
  %25 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr, i64 %24, i64 -9223372036854775808)
  %26 = call i64 @fixed_width_int_decode(i8* %col_buf5, i32 4, i64 %pos)
  %27 = trunc i64 %26 to i32
  %28 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %27, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr1 = getelementptr i64, i64* %18, i64 1
  %29 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr1, i64 %28, i64 -9223372036854775808)
  %30 = call i64 @fixed_width_int_decode(i8* %col_buf6, i32 4, i64 %pos)
  %31 = trunc i64 %30 to i32
  %32 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %31, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr2 = getelementptr i64, i64* %18, i64 2
  %33 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr2, i64 %32, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %34 = trunc i64 %pos to i32
  %35 = sub i32 0, %34
  ret i32 %35
}

End of IR
2025-04-19T00:19:07.677813 1 39904 3 11 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:19:07.693803 1 39904 3 11 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.088768
2025-04-19T00:19:07.756524 1 39904 3 11 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.5928
2025-04-19T00:19:07.757296 1 39904 3 11 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.8392
2025-04-19T00:19:07.777816 1 39904 3 11 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 34.6836
2025-04-19T00:19:07.794908 1 39904 3 11 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     264 bytes stack frame, 248 bytes spill stores, 288 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 344 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:19:07.794939 1 39904 3 11 NvidiaKernel.cpp:188 Generated GPU binary code size: 476256 bytes
2025-04-19T00:19:07.795439 1 39904 3 11 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:19:07.795757 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 120 ms
2025-04-19T00:19:07.795837 1 39904 3 11 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:19:07.795845 1 39904 3 11 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 3
	Target group by indices: 0,1,2,-1,-1,-1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 0 , 0
	3 | 8 , 8
	4 | 8 , 8
	5 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3], [4], [5]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1295056
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: False
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:19:07.796317 1 39904 3 11 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:19:07.796358 1 39904 3 11 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:19:07.796377 I 39904 3 13597 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:19:07.796386 I 39904 3 13597 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:19:07.796405 1 39904 3 13597 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,19,0,
2025-04-19T00:19:07.796754 1 39904 3 13597 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,20,0,
2025-04-19T00:19:07.797275 1 39904 3 13597 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,22,0,
2025-04-19T00:19:07.797819 I 39904 3 13597 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 1 ms
2025-04-19T00:19:07.797856 I 39904 3 13597 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:19:07.797871 2 39904 3 13597 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(23),nest_level(0)) InputDescriptor(db_id(1), table_id(22),nest_level(1)) InputDescriptor(db_id(1), table_id(8),nest_level(2))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(20),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(22),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(22),nest_level(1))) InputColDescriptor(col_id(14),InputDescriptor(db_id(1), table_id(22),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(2)))) ra_exe_unit.scan_limit=0 num_rows=((719384 71654 73049)) frag_offsets=((0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=1295056 device_id=0 outer_table_key=(db_id: 1, table_id: 23) scan_limit=0 start_rowid=0 num_tables=3
2025-04-19T00:19:07.797890 I 39904 3 13597 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:19:07.798019 1 39904 3 13597 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.008672 ms
2025-04-19T00:19:07.798029 1 39904 3 13597 GpuInterrupt.cpp:26 Registered module 0x756f43167ed0 on device 0
2025-04-19T00:19:07.799105 1 39904 3 13597 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 1 ms
2025-04-19T00:19:07.799116 1 39904 3 13597 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:19:07.799120 1 39904 3 13597 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:19:07.802936 1 39904 3 13597 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 3 ms
2025-04-19T00:19:07.826678 1 39904 3 13597 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:19:07.826697 1 39904 3 13597 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 23 ms
2025-04-19T00:19:07.826702 I 39904 3 13597 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 28 ms
2025-04-19T00:19:07.826760 1 39904 3 13597 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:19:07.826785 2 39904 3 13597 Execute.cpp:4139 results->rowCount()=647541
2025-04-19T00:19:07.829288 I 39904 3 13597 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 31 ms
2025-04-19T00:19:07.829330 I 39904 3 13597 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 32 ms
2025-04-19T00:19:07.829430 1 39904 3 11 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:19:07.829466 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 154 ms
2025-04-19T00:19:07.829504 1 39904 3 11 Execute.cpp:5202 Put estimated cardinality to the cache
2025-04-19T00:19:07.829537 I 39904 3 11 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 486 ms
2025-04-19T00:19:07.829549 3 39904 3 11 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-31, ...) exec_desc.getResult().getDataPtr()->rowCount()=647541
2025-04-19T00:19:07.831665 I 39904 3 11 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 488 ms
2025-04-19T00:19:07.831678 1 39904 3 11 RelAlgExecutor.cpp:945 Executing query step 2 / 3
2025-04-19T00:19:07.831687 I 39904 3 11 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:19:07.831719 3 39904 3 11 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:19:07.831726 3 39904 3 11 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:19:07.831832 3 39904 3 11 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1 input_col_descs_unique.size()=6 source_used_inputs.size()=7
2025-04-19T00:19:07.831862 3 39904 3 11 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(8),nest_level(2)))
2025-04-19T00:19:07.831869 3 39904 3 11 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(12),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(14),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(2))))
2025-04-19T00:19:07.831924 3 39904 3 11 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1) = 9
2025-04-19T00:19:07.832030 2 39904 3 11 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 12|), outer join col info: 1093183255841122032 (access path: 11|)
2025-04-19T00:19:07.832052 2 39904 3 11 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 17117943113708969057 (access path: 4|), outer join col info: 1761204074510969970 (access path: 11|)
2025-04-19T00:19:07.832070 I 39904 3 11 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:19:07.832085 3 39904 3 11 RelAlgExecutor.cpp:3692 body->getId()=30 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:19:07.832142 1 39904 3 11 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:19:07.832147 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 8453142344620239706
	Table/Col/Levels: ((db_id: 1, table_id: 18), 1, 0) ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 11, 0) ((db_id: 1, table_id: 18), 12, 0) ((db_id: 1, table_id: 18), 14, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) 
	Join Quals: 		0 LEFT(= (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (IS NULL (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 8, column_id: 7), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 18, column_id: 3), rte: 0, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 18, column_id: 4), rte: 0, which_row: 3, varno: 3) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 11), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 12), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 14), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:07.832185 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:07.832200 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:07.832285 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:19:07.832295 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:19:07.832321 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 8453142344620239706
	Table/Col/Levels: ((db_id: 1, table_id: 18), 1, 0) ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 11, 0) ((db_id: 1, table_id: 18), 12, 0) ((db_id: 1, table_id: 18), 14, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) 
	Join Quals: 		0 LEFT(= (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (IS NULL (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:07.832342 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:07.832353 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:07.833157 I 39904 3 11 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:19:07.833172 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:07.833219 1 39904 3 11 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,10,0,
2025-04-19T00:19:07.833229 1 39904 3 11 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,10,0,
2025-04-19T00:19:07.834099 1 39904 3 25246 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 240000, # entries stored in the payload buffer: 287867, hash table size : 960000 Bytes
2025-04-19T00:19:07.834399 1 39904 3 11 PerfectJoinHashTable.cpp:666 RHS/Inner hash join values detected to not be unique, falling back to One-to-Many hash layout.
2025-04-19T00:19:07.834882 1 39904 3 25247 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToMany, # hash entries: 240000, # entries stored in the payload buffer: 287867, hash table size : 3071468 Bytes
2025-04-19T00:19:07.835466 1 39904 3 11 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 2338189585997378760)
2025-04-19T00:19:07.835498 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToMany in 2 ms
2025-04-19T00:19:07.835510 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:07.835534 1 39904 3 11 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 7985831563889231492)
2025-04-19T00:19:07.835615 1 39904 3 25248 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 73049, # entries stored in the payload buffer: 73049, hash table size : 292196 Bytes
2025-04-19T00:19:07.835856 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:19:07.835879 I 39904 3 11 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 2 ms
2025-04-19T00:19:07.835998 1 39904 3 11 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:19:07.836010 1 39904 3 11 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:19:07.836341 3 39904 3 11 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %22 = sext i32 %pos_start to i64
  %23 = icmp slt i64 %22, %row_count
  br i1 %23, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %24 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %34, %.loop.preheader
  %pos = phi i64 [ %22, %.loop.preheader ], [ %35, %34 ]
  %25 = load i64*, i64** %out, align 8
  %26 = call i32 @row_func(i64* %25, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i64* %join_hash_tables, i8* %row_func_mgr)
  %27 = lshr i64 %pos, 15
  %28 = and i64 %27, 32
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %30 = call i1 @check_interrupt()
  %31 = select i1 %30, i32 10, i32 %26
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %32 = phi i32 [ %31, %.interrupt_check ], [ %26, %.for.body ]
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %.error_exit, label %34

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %32, i32* %error_code)
  ret void

34:                                               ; preds = %.error_check
  %35 = add nsw i64 %pos, %24
  %36 = icmp slt i64 %35, %row_count
  br i1 %36, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %34
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_advance_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  %found_an_outer_match = alloca i1, align 1
  store i1 false, i1* %found_an_outer_match, align 1
  %outer_condition_current_match = alloca i1, align 1
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = load i64, i64* %join_hash_tables, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %0, i64 %3, i64 1, i64 240000, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %6 = add i64 %0, 960000
  %7 = call i64 @hash_join_idx_nullable(i64 %6, i64 %3, i64 1, i64 240000, i64 -2147483648)
  %8 = select i1 %5, i64 %7, i64 0
  %9 = add i64 %0, 1920000
  %10 = inttoptr i64 %9 to i32*
  %11 = getelementptr i32, i32* %10, i64 %4
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %ub_iter_counter_ = getelementptr i32, i32* %11, i64 %ub_iter_counter_val_
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %8
  store i1 false, i1* %outer_condition_current_match, align 1
  br i1 %have_more_inner_rows, label %eval_outer_cond_, label %after_eval_outer_cond_

ub_iter_advance_:                                 ; preds = %singleton_true_, %loop_done_false, %after_eval_outer_cond_
  %12 = add i64 %ub_iter_counter_val_, 1
  store i64 %12, i64* %ub_iter_counter_ptr_, align 8
  %no_more_inner_rows = icmp sgt i64 %12, %8
  br i1 %no_more_inner_rows, label %exit, label %ub_iter_head_

eval_outer_cond_:                                 ; preds = %ub_iter_head_
  %13 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %14 = trunc i64 %13 to i32
  %15 = load i32, i32* %ub_iter_counter_, align 4
  %16 = sext i32 %15 to i64
  %17 = call i64 @fixed_width_int_decode(i8* %col_buf7, i32 4, i64 %16)
  %18 = trunc i64 %17 to i32
  %19 = call i8 @eq_int32_t_nullable(i32 %14, i32 %18, i64 -2147483648, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 true, %20
  store i1 %21, i1* %outer_condition_current_match, align 1
  %22 = load i1, i1* %found_an_outer_match, align 1
  %23 = or i1 %21, %22
  store i1 %23, i1* %found_an_outer_match, align 1
  br label %after_eval_outer_cond_

after_eval_outer_cond_:                           ; preds = %eval_outer_cond_, %ub_iter_head_
  %24 = load i1, i1* %found_an_outer_match, align 1
  %25 = xor i1 %24, true
  %26 = icmp eq i64 %ub_iter_counter_val_, %8
  %27 = and i1 %25, %26
  %28 = load i1, i1* %outer_condition_current_match, align 1
  %29 = or i1 %28, %27
  %30 = load i1, i1* %outer_condition_current_match, align 1
  br i1 %29, label %singleton_true_, label %ub_iter_advance_

singleton_true_:                                  ; preds = %after_eval_outer_cond_
  %31 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %32 = trunc i64 %31 to i32
  %33 = getelementptr i64, i64* %join_hash_tables, i64 1
  %34 = load i64, i64* %33, align 8
  %35 = sext i32 %32 to i64
  %36 = call i64 @hash_join_idx_nullable(i64 %34, i64 %35, i64 2415022, i64 2488070, i64 -2147483648)
  %37 = icmp sge i64 %36, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %38 = load i1, i1* %remaining_outer_cond_match, align 1
  %39 = and i1 %37, %38
  br i1 %39, label %loop_body, label %ub_iter_advance_

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %40 = call i32 @filter_func(i1 %30, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %36, i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %out, i1* %loop_done)
  %41 = load i1, i1* %loop_done, align 1
  br i1 %41, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %40

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func(i1 %extra0, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %extra1, i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %out, i1* %loop_done) #33 {
entry:
  br i1 %extra0, label %outer_join_args, label %outer_join_nulls

outer_join_args:                                  ; preds = %entry
  %0 = load i32, i32* %ub_iter_counter_, align 4
  %1 = sext i32 %0 to i64
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %1)
  %3 = trunc i64 %2 to i32
  br label %outer_join_phi

outer_join_nulls:                                 ; preds = %entry
  br label %outer_join_phi

outer_join_phi:                                   ; preds = %outer_join_nulls, %outer_join_args
  %4 = phi i32 [ %3, %outer_join_args ], [ -2147483648, %outer_join_nulls ]
  br label %back_from_outer_join

back_from_outer_join:                             ; preds = %outer_join_phi
  %5 = icmp eq i32 %4, -2147483648
  %6 = and i1 true, %5
  br i1 %6, label %filter_true, label %filter_false

filter_true:                                      ; preds = %back_from_outer_join
  %7 = alloca i64, i32 3, align 8
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %9 to i64
  %11 = getelementptr i64, i64* %7, i32 0
  store i64 %10, i64* %11, align 8
  %12 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %13 = trunc i64 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = getelementptr i64, i64* %7, i32 1
  store i64 %14, i64* %15, align 8
  %16 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %17 = trunc i64 %16 to i32
  %18 = sext i32 %17 to i64
  %19 = getelementptr i64, i64* %7, i32 2
  store i64 %18, i64* %19, align 8
  %20 = bitcast i64* %out to i8*
  %21 = bitcast i64* %7 to i8*
  call void @linear_probabilistic_count(i8* %20, i32 268435456, i8* %21, i32 24)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %back_from_outer_join
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:19:07.836643 1 39904 3 11 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:19:07.850799 1 39904 3 11 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.089606
2025-04-19T00:19:07.912872 1 39904 3 11 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.6451
2025-04-19T00:19:07.913666 1 39904 3 11 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.8878
2025-04-19T00:19:07.931180 1 39904 3 11 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 31.8142
2025-04-19T00:19:07.948501 1 39904 3 11 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_template
ptxas         .     224 bytes stack frame, 200 bytes spill stores, 200 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 280 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:19:07.948547 1 39904 3 11 NvidiaKernel.cpp:188 Generated GPU binary code size: 460640 bytes
2025-04-19T00:19:07.949071 1 39904 3 11 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:19:07.949320 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 116 ms
2025-04-19T00:19:07.949386 1 39904 3 11 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:19:07.949392 1 39904 3 11 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Estimator
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	Empty	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: False
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:19:07.949819 1 39904 3 11 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:19:07.949852 1 39904 3 11 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:19:07.949872 I 39904 3 25249 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:19:07.949882 I 39904 3 25249 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:19:07.949898 1 39904 3 25249 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,1,0,
2025-04-19T00:19:07.949909 1 39904 3 25249 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,1,0,
2025-04-19T00:19:07.958786 1 39904 3 25249 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,3,0,
2025-04-19T00:19:07.958827 1 39904 3 25249 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,3,0,
2025-04-19T00:19:07.967564 1 39904 3 25249 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,4,0,
2025-04-19T00:19:07.967598 1 39904 3 25249 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,4,0,
2025-04-19T00:19:07.976298 1 39904 3 25249 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,10,0,
2025-04-19T00:19:07.976328 1 39904 3 25249 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,10,0,
2025-04-19T00:19:07.984888 1 39904 3 25249 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,11,0,
2025-04-19T00:19:07.991818 1 39904 3 25249 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,12,0,
2025-04-19T00:19:07.998851 1 39904 3 25249 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,14,0,
2025-04-19T00:19:08.005796 1 39904 3 25249 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,3,0,
2025-04-19T00:19:08.005821 1 39904 3 25249 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,3,0,
2025-04-19T00:19:08.006545 I 39904 3 25249 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 56 ms
2025-04-19T00:19:08.006577 I 39904 3 25249 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:19:08.006590 I 39904 3 25249 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:19:08.006802 1 39904 3 25249 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.093600 ms
2025-04-19T00:19:08.006815 1 39904 3 25249 GpuInterrupt.cpp:26 Registered module 0x756f40513650 on device 0
2025-04-19T00:19:08.008489 1 39904 3 25249 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 1 ms
2025-04-19T00:19:08.008499 1 39904 3 25249 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:19:08.008504 1 39904 3 25249 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:19:08.012195 1 39904 3 25249 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 3 ms
2025-04-19T00:19:08.138128 I 39904 3 25249 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 131 ms
2025-04-19T00:19:08.138165 I 39904 3 25249 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 131 ms
2025-04-19T00:19:08.138187 I 39904 3 25249 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 188 ms
2025-04-19T00:19:08.138225 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 305 ms
2025-04-19T00:19:08.209330 1 39904 3 11 RelAlgExecutor.cpp:3926 CardinalityEstimationRequired, Use ndv_estimation: 2449359, cardinality for estimated_groups_buffer_entry_guess: 4898718
2025-04-19T00:19:08.209362 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 8453142344620239706
	Table/Col/Levels: ((db_id: 1, table_id: 18), 1, 0) ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 11, 0) ((db_id: 1, table_id: 18), 12, 0) ((db_id: 1, table_id: 18), 14, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) 
	Join Quals: 		0 LEFT(= (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (IS NULL (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 8, column_id: 7), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 18, column_id: 3), rte: 0, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 18, column_id: 4), rte: 0, which_row: 3, varno: 3) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 11), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 12), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 14), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:08.209424 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:08.209450 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:08.210219 I 39904 3 11 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:19:08.210234 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:08.210275 1 39904 3 11 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToMany(key: 2338189585997378760)
2025-04-19T00:19:08.210414 1 39904 3 25250 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToMany, # hash entries: 240000, # entries stored in the payload buffer: 287867, hash table size : 3071468 Bytes
2025-04-19T00:19:08.211010 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToMany in 0 ms
2025-04-19T00:19:08.211045 1 39904 3 11 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:19:08.211071 1 39904 3 11 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 7985831563889231492)
2025-04-19T00:19:08.211160 1 39904 3 25251 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 73049, # entries stored in the payload buffer: 73049, hash table size : 292196 Bytes
2025-04-19T00:19:08.211346 1 39904 3 11 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:19:08.211383 I 39904 3 11 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 1 ms
2025-04-19T00:19:08.211622 1 39904 3 11 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:19:08.211635 1 39904 3 11 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:19:08.212035 3 39904 3 11 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !27

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !27
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %22 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %23 = call i32 @pos_start_impl(i32* %row_index_resume)
  %24 = call i32 @pos_step_impl()
  %25 = call i32 @group_buff_idx_impl()
  %26 = sext i32 %23 to i64
  %27 = getelementptr i64*, i64** %group_by_buffers, i32 %25
  %col_buffer = load i64*, i64** %27, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %28 = icmp slt i64 %26, %row_count
  br i1 %28, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %29 = sext i32 %24 to i64
  br label %.forbody

.forbody:                                         ; preds = %38, %.loop.preheader
  %pos = phi i64 [ %26, %.loop.preheader ], [ %39, %38 ]
  %30 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i64* %join_hash_tables, i8* %row_func_mgr)
  %31 = lshr i64 %pos, 15
  %32 = and i64 %31, 32
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %34 = call i1 @check_interrupt()
  %35 = select i1 %34, i32 10, i32 %30
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %36 = phi i32 [ %35, %.interrupt_check ], [ %30, %.forbody ]
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %.error_exit, label %38

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %36, i32* %error_code)
  ret void

38:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %39 = add i64 %pos, %29
  %40 = icmp slt i64 %39, %row_count
  br i1 %40, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %38
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_advance_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  %found_an_outer_match = alloca i1, align 1
  store i1 false, i1* %found_an_outer_match, align 1
  %outer_condition_current_match = alloca i1, align 1
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = load i64, i64* %join_hash_tables, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %0, i64 %3, i64 1, i64 240000, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %6 = add i64 %0, 960000
  %7 = call i64 @hash_join_idx_nullable(i64 %6, i64 %3, i64 1, i64 240000, i64 -2147483648)
  %8 = select i1 %5, i64 %7, i64 0
  %9 = add i64 %0, 1920000
  %10 = inttoptr i64 %9 to i32*
  %11 = getelementptr i32, i32* %10, i64 %4
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %ub_iter_counter_ = getelementptr i32, i32* %11, i64 %ub_iter_counter_val_
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %8
  store i1 false, i1* %outer_condition_current_match, align 1
  br i1 %have_more_inner_rows, label %eval_outer_cond_, label %after_eval_outer_cond_

ub_iter_advance_:                                 ; preds = %singleton_true_, %loop_done_false, %after_eval_outer_cond_
  %12 = add i64 %ub_iter_counter_val_, 1
  store i64 %12, i64* %ub_iter_counter_ptr_, align 8
  %no_more_inner_rows = icmp sgt i64 %12, %8
  br i1 %no_more_inner_rows, label %exit, label %ub_iter_head_

eval_outer_cond_:                                 ; preds = %ub_iter_head_
  %13 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %14 = trunc i64 %13 to i32
  %15 = load i32, i32* %ub_iter_counter_, align 4
  %16 = sext i32 %15 to i64
  %17 = call i64 @fixed_width_int_decode(i8* %col_buf7, i32 4, i64 %16)
  %18 = trunc i64 %17 to i32
  %19 = call i8 @eq_int32_t_nullable(i32 %14, i32 %18, i64 -2147483648, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 true, %20
  store i1 %21, i1* %outer_condition_current_match, align 1
  %22 = load i1, i1* %found_an_outer_match, align 1
  %23 = or i1 %21, %22
  store i1 %23, i1* %found_an_outer_match, align 1
  br label %after_eval_outer_cond_

after_eval_outer_cond_:                           ; preds = %eval_outer_cond_, %ub_iter_head_
  %24 = load i1, i1* %found_an_outer_match, align 1
  %25 = xor i1 %24, true
  %26 = icmp eq i64 %ub_iter_counter_val_, %8
  %27 = and i1 %25, %26
  %28 = load i1, i1* %outer_condition_current_match, align 1
  %29 = or i1 %28, %27
  %30 = load i1, i1* %outer_condition_current_match, align 1
  br i1 %29, label %singleton_true_, label %ub_iter_advance_

singleton_true_:                                  ; preds = %after_eval_outer_cond_
  %31 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %32 = trunc i64 %31 to i32
  %33 = getelementptr i64, i64* %join_hash_tables, i64 1
  %34 = load i64, i64* %33, align 8
  %35 = sext i32 %32 to i64
  %36 = call i64 @hash_join_idx_nullable(i64 %34, i64 %35, i64 2415022, i64 2488070, i64 -2147483648)
  %37 = icmp sge i64 %36, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %38 = load i1, i1* %remaining_outer_cond_match, align 1
  %39 = and i1 %37, %38
  br i1 %39, label %loop_body, label %ub_iter_advance_

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %40 = call i32 @filter_func(i1 %30, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %36, i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6)
  %41 = load i1, i1* %loop_done, align 1
  br i1 %41, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %40

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func(i1 %extra0, i32* %ub_iter_counter_, i8* %col_buf8, i8* %col_buf10, i64 %extra1, i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6) #34 {
entry:
  br i1 %extra0, label %outer_join_args, label %outer_join_nulls

outer_join_args:                                  ; preds = %entry
  %0 = load i32, i32* %ub_iter_counter_, align 4
  %1 = sext i32 %0 to i64
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %1)
  %3 = trunc i64 %2 to i32
  br label %outer_join_phi

outer_join_nulls:                                 ; preds = %entry
  br label %outer_join_phi

outer_join_phi:                                   ; preds = %outer_join_nulls, %outer_join_args
  %4 = phi i32 [ %3, %outer_join_args ], [ -2147483648, %outer_join_nulls ]
  br label %back_from_outer_join

back_from_outer_join:                             ; preds = %outer_join_phi
  %5 = icmp eq i32 %4, -2147483648
  %6 = and i1 true, %5
  br i1 %6, label %filter_true, label %filter_false

filter_true:                                      ; preds = %back_from_outer_join
  %7 = alloca i32, i32 3, align 4
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %9 = trunc i64 %8 to i32
  %10 = getelementptr i32, i32* %7, i32 0
  store i32 %9, i32* %10, align 4
  %11 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %12 = trunc i64 %11 to i32
  %13 = getelementptr i32, i32* %7, i32 1
  store i32 %12, i32* %13, align 4
  %14 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i32, i32* %7, i32 2
  store i32 %15, i32* %16, align 4
  %17 = bitcast i32* %7 to i64*
  %18 = call i64* @get_group_value(i64* %group_by_buff, i32 4898718, i64* %17, i32 3, i32 4, i32 5)
  %19 = icmp ne i64* %18, null
  br i1 %19, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %back_from_outer_join
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %20 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %pos)
  %21 = trunc i64 %20 to i32
  %agg_col_ptr = getelementptr i64, i64* %18, i64 0
  %22 = icmp eq i32 %21, -2147483648
  %23 = sext i32 %21 to i64
  %24 = select i1 %22, i64 -9223372036854775808, i64 %23
  %25 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr, i64 %24, i64 -9223372036854775808)
  %26 = call i64 @fixed_width_int_decode(i8* %col_buf5, i32 4, i64 %pos)
  %27 = trunc i64 %26 to i32
  %28 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %27, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr1 = getelementptr i64, i64* %18, i64 1
  %29 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr1, i64 %28, i64 -9223372036854775808)
  %30 = call i64 @fixed_width_int_decode(i8* %col_buf6, i32 4, i64 %pos)
  %31 = trunc i64 %30 to i32
  %32 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %31, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr2 = getelementptr i64, i64* %18, i64 2
  %33 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr2, i64 %32, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %34 = trunc i64 %pos to i32
  %35 = sub i32 0, %34
  ret i32 %35
}

End of IR
2025-04-19T00:19:08.212382 1 39904 3 11 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:19:08.227981 1 39904 3 11 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.081015
2025-04-19T00:19:08.287997 1 39904 3 11 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.8836
2025-04-19T00:19:08.288753 1 39904 3 11 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.1125
2025-04-19T00:19:08.308647 1 39904 3 11 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 33.3887
2025-04-19T00:19:08.325174 1 39904 3 11 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     264 bytes stack frame, 248 bytes spill stores, 288 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 344 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:19:08.325210 1 39904 3 11 NvidiaKernel.cpp:188 Generated GPU binary code size: 476256 bytes
2025-04-19T00:19:08.325759 1 39904 3 11 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:19:08.326097 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 116 ms
2025-04-19T00:19:08.326173 1 39904 3 11 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:19:08.326179 1 39904 3 11 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 3
	Target group by indices: 0,1,2,-1,-1,-1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 0 , 0
	3 | 8 , 8
	4 | 8 , 8
	5 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3], [4], [5]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 4898718
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: False
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:19:08.326267 1 39904 3 11 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:19:08.326296 1 39904 3 11 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:19:08.326315 I 39904 3 25252 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:19:08.326325 I 39904 3 25252 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:19:08.326345 1 39904 3 25252 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,11,0,
2025-04-19T00:19:08.327977 1 39904 3 25252 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,12,0,
2025-04-19T00:19:08.329803 1 39904 3 25252 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,14,0,
2025-04-19T00:19:08.331623 I 39904 3 25252 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 5 ms
2025-04-19T00:19:08.331660 I 39904 3 25252 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:19:08.331678 2 39904 3 25252 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(8),nest_level(2))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(12),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(14),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(2)))) ra_exe_unit.scan_limit=0 num_rows=((2880404 287867 73049)) frag_offsets=((0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=4898718 device_id=0 outer_table_key=(db_id: 1, table_id: 18) scan_limit=0 start_rowid=0 num_tables=3
2025-04-19T00:19:08.331698 I 39904 3 25252 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:19:08.331863 1 39904 3 25252 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.010848 ms
2025-04-19T00:19:08.331875 1 39904 3 25252 GpuInterrupt.cpp:26 Registered module 0x756f406fbed0 on device 0
2025-04-19T00:19:08.335375 1 39904 3 25252 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 3 ms
2025-04-19T00:19:08.335387 1 39904 3 25252 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:19:08.335392 1 39904 3 25252 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:19:08.349362 1 39904 3 25252 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 13 ms
2025-04-19T00:19:08.437745 1 39904 3 25252 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:19:08.437791 1 39904 3 25252 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 88 ms
2025-04-19T00:19:08.437800 I 39904 3 25252 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 106 ms
2025-04-19T00:19:08.437861 1 39904 3 25252 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:19:08.437875 2 39904 3 25252 Execute.cpp:4139 results->rowCount()=2449339
2025-04-19T00:19:08.445932 I 39904 3 25252 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 114 ms
2025-04-19T00:19:08.445993 I 39904 3 25252 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 119 ms
2025-04-19T00:19:08.446095 1 39904 3 11 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:19:08.446120 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 236 ms
2025-04-19T00:19:08.446156 1 39904 3 11 Execute.cpp:5202 Put estimated cardinality to the cache
2025-04-19T00:19:08.446188 I 39904 3 11 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 614 ms
2025-04-19T00:19:08.446201 3 39904 3 11 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-30, ...) exec_desc.getResult().getDataPtr()->rowCount()=2449339
2025-04-19T00:19:08.454211 I 39904 3 11 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 622 ms
2025-04-19T00:19:08.454238 1 39904 3 11 RelAlgExecutor.cpp:945 Executing query step 3 / 3
2025-04-19T00:19:08.454246 I 39904 3 11 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:19:08.454314 3 39904 3 11 RelAlgExecutor.cpp:1684 used_inputs.size() = 26
2025-04-19T00:19:08.454321 3 39904 3 11 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(7, operands=RexOperator(8, operands=RexOperator(4, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(4, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=0) RexLiteral(1998 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=2) RexFunctionOperator(ROUND, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexLiteral(2 type=DECIMAL(1,0) target_type=INT(10,0)) ) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=4) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=5) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=2) RexFunctionOperator(ROUND, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexLiteral(2 type=DECIMAL(1,0) target_type=INT(10,0)) ) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=4) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=5) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , 0, , fields=["ss_customer_sk", "ratio", "store_qty", "store_wholesale_cost", "store_sales_price", "other_chan_qty", "other_chan_wholesale_cost", "other_chan_sales_price"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=26
2025-04-19T00:19:08.455266 3 39904 3 11 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(7, operands=RexOperator(8, operands=RexOperator(4, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(4, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=0) RexLiteral(1998 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=2) RexFunctionOperator(ROUND, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexLiteral(2 type=DECIMAL(1,0) target_type=INT(10,0)) ) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=4) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=5) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=2) RexFunctionOperator(ROUND, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexLiteral(2 type=DECIMAL(1,0) target_type=INT(10,0)) ) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=4) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=5) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , 0, , fields=["ss_customer_sk", "ratio", "store_qty", "store_wholesale_cost", "store_sales_price", "other_chan_qty", "other_chan_wholesale_cost", "other_chan_sales_price"], is_agg=0 input_col_descs_unique.size()=11 source_used_inputs.size()=12
2025-04-19T00:19:08.456107 3 39904 3 11 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(0), table_id(-30),nest_level(0)) InputDescriptor(db_id(0), table_id(-31),nest_level(1)) InputDescriptor(db_id(0), table_id(-32),nest_level(2)))
2025-04-19T00:19:08.456113 3 39904 3 11 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(4),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(4),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-32),nest_level(2))))
2025-04-19T00:19:08.456199 3 39904 3 11 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(7, operands=RexOperator(8, operands=RexOperator(4, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(4, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=0) RexLiteral(1998 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=2) RexFunctionOperator(ROUND, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexLiteral(2 type=DECIMAL(1,0) target_type=INT(10,0)) ) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=4) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=5) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=2) RexFunctionOperator(ROUND, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexLiteral(2 type=DECIMAL(1,0) target_type=INT(10,0)) ) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=4) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=5) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , 0, , fields=["ss_customer_sk", "ratio", "store_qty", "store_wholesale_cost", "store_sales_price", "other_chan_qty", "other_chan_wholesale_cost", "other_chan_sales_price"], is_agg=0) = 8
2025-04-19T00:19:08.457230 2 39904 3 11 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 10024907996165286908 (access path: 5|6|7|8|4|), outer join col info: 10197073793201947403 (access path: 9|10|11|12|4|)
2025-04-19T00:19:08.457280 2 39904 3 11 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 6371247743279858003 (access path: 0|1|2|3|4|), outer join col info: 10197073793201947403 (access path: 9|10|11|12|4|)
2025-04-19T00:19:08.457307 I 39904 3 11 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:19:08.457332 3 39904 3 11 RelAlgExecutor.cpp:3692 body->getId()=33 body->toString()=RelCompound, filter_expr=RexOperator(7, operands=RexOperator(8, operands=RexOperator(4, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(4, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=0) RexLiteral(1998 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=2) RexFunctionOperator(ROUND, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexLiteral(2 type=DECIMAL(1,0) target_type=INT(10,0)) ) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=4) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=5) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=2) RexFunctionOperator(ROUND, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexLiteral(2 type=DECIMAL(1,0) target_type=INT(10,0)) ) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=3) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=4) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(store_sales.ss_item_sk) RexInput(store_sales.ss_customer_sk) RexInput(store_sales.ss_quantity) RexInput(store_sales.ss_wholesale_cost) RexInput(store_sales.ss_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ss_sold_year", "ss_item_sk", "ss_customer_sk", "ss_qty", "ss_wc", "ss_sp"], is_agg=1, in_index=5) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=3) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=INT(10,0))) , type=(type=INTEGER, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=4) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(11, operands=RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(web_sales.ws_item_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_quantity) RexInput(web_sales.ws_wholesale_cost) RexInput(web_sales.ws_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["ws_sold_year", "ws_item_sk", "ws_customer_sk", "ws_qty", "ws_wc", "ws_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) RexCase(expr_pair_list=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(19, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , agg_exps=RexAgg(agg=3, distinct=0, type=INTEGER, operands=[3]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[4]) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[5]) , scalar_sources=RexInput(date_dim.d_year) RexInput(catalog_sales.cs_item_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_quantity) RexInput(catalog_sales.cs_wholesale_cost) RexInput(catalog_sales.cs_sales_price) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["cs_sold_year", "cs_item_sk", "cs_customer_sk", "cs_qty", "cs_wc", "cs_sp"], is_agg=1, in_index=5) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , else_expr=RexLiteral(0 type=DECIMAL(1,0) target_type=DECIMAL(19,2))) , type=(type=DECIMAL, dimension=19, scale=2, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , 0, , fields=["ss_customer_sk", "ratio", "store_qty", "store_wholesale_cost", "store_sales_price", "other_chan_qty", "other_chan_wholesale_cost", "other_chan_sales_price"], is_agg=0 it==leaf_results_.end()=true
2025-04-19T00:19:08.458190 1 39904 3 11 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:19:08.458198 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 7989880700073253758
	Table/Col/Levels: ((db_id: 0, table_id: -30), 0, 0) ((db_id: 0, table_id: -30), 1, 0) ((db_id: 0, table_id: -30), 2, 0) ((db_id: 0, table_id: -30), 3, 0) ((db_id: 0, table_id: -30), 4, 0) ((db_id: 0, table_id: -30), 5, 0) ((db_id: 0, table_id: -31), 0, 1) ((db_id: 0, table_id: -31), 1, 1) ((db_id: 0, table_id: -31), 2, 1) ((db_id: 0, table_id: -31), 3, 1) ((db_id: 0, table_id: -31), 4, 1) ((db_id: 0, table_id: -31), 5, 1) ((db_id: 0, table_id: -32), 0, 2) ((db_id: 0, table_id: -32), 1, 2) ((db_id: 0, table_id: -32), 2, 2) ((db_id: 0, table_id: -32), 3, 2) ((db_id: 0, table_id: -32), 4, 2) ((db_id: 0, table_id: -32), 5, 2) 
	Simple Quals: (= (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1998) ) 
	Quals: (OR (> CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -31, column_id: 3), rte: 1 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST INTEGER(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -31, column_id: 3), rte: 1 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ELSE (Const 0)  END (Const 0) ) (> CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -32, column_id: 3), rte: 2 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST INTEGER(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -32, column_id: 3), rte: 2 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ELSE (Const 0)  END (Const 0) ) ) 
	Join Quals: 		0 LEFT(= < (ColumnVar (db_id: 0, table_id: -31, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 2), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 LEFT(= < (ColumnVar (db_id: 0, table_id: -32, column_id: 0), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -32, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -32, column_id: 2), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:19:08.458245 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:08.458257 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:08.458322 1 39904 3 11 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:19:08.459100 I 39904 3 11 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:19:08.459116 1 39904 3 11 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:19:08.459121 1 39904 3 11 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 0, table_id: -31, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 2), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:19:08.459182 I 39904 3 11 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:19:08.475216 I 39904 3 11 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 16 ms
2025-04-19T00:19:08.478454 1 39904 3 41817 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToOne, hash table size: 41441792 Bytes, # hash entries: 2590112, # entries stored in the payload buffer: 647541, rowid size: 4 Bytes
2025-04-19T00:19:08.482683 1 39904 3 41817 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 17246233797351651911)
2025-04-19T00:19:08.482738 1 39904 3 11 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 23 ms
2025-04-19T00:19:08.482761 1 39904 3 11 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:19:08.482767 1 39904 3 11 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 0, table_id: -32, column_id: 0), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -32, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -32, column_id: 2), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:19:08.482853 I 39904 3 11 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:19:08.514573 I 39904 3 11 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 31 ms
2025-04-19T00:19:08.521116 1 39904 3 41818 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToOne, hash table size: 82612416 Bytes, # hash entries: 5163276, # entries stored in the payload buffer: 1290840, rowid size: 4 Bytes
2025-04-19T00:19:08.526788 1 39904 3 41818 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 3139741984485212825)
2025-04-19T00:19:08.526840 1 39904 3 11 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 44 ms
2025-04-19T00:19:08.526862 I 39904 3 11 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 67 ms
2025-04-19T00:19:08.527235 1 39904 3 11 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 64
2025-04-19T00:19:08.527252 1 39904 3 11 NativeCodegen.cpp:3087 number of hoisted literals: 2 / literal buffer usage: 8 bytes
2025-04-19T00:19:08.527765 3 39904 3 11 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8*, i8** %byte_stream, i32 11
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8*, i8** %byte_stream, i32 12
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr i8*, i8** %byte_stream, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr i8*, i8** %byte_stream, i32 14
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr i8*, i8** %byte_stream, i32 15
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8*, i8** %byte_stream, i32 16
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr i8*, i8** %byte_stream, i32 17
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr i8, i8* %literals, i16 0
  %37 = bitcast i8* %36 to i32*
  %literal_0 = load i32, i32* %37, align 4
  %38 = getelementptr i8, i8* %literals, i16 4
  %39 = bitcast i8* %38 to i32*
  %literal_4 = load i32, i32* %39, align 4
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %40 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %42 = sext i32 %pos_start to i64
  %43 = icmp slt i64 %42, %row_count
  br i1 %43, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %44 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %53, %.loop.preheader
  %pos = phi i64 [ %42, %.loop.preheader ], [ %54, %53 ]
  %45 = call i32 @row_func_hoisted_literals(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i8* %23, i8* %25, i8* %27, i8* %29, i8* %31, i8* %33, i8* %35, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_4, i32 %literal_0)
  %46 = lshr i64 %pos, 15
  %47 = and i64 %46, 64
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %49 = call i1 @check_interrupt()
  %50 = select i1 %49, i32 10, i32 %45
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %51 = phi i32 [ %50, %.interrupt_check ], [ %45, %.for.body ]
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %.error_exit, label %53

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %51, i32* %error_code)
  ret void

53:                                               ; preds = %.error_check
  %54 = add nsw i64 %pos, %44
  %55 = icmp slt i64 %54, %row_count
  br i1 %55, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %53
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %56 = phi i64 [ %.pre.result, %._crit_edge ], [ %41, %.entry ]
  %57 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %58 = call i64 @agg_sum_shared(i64* %57, i64 %56)
  call void @sync_threadblock()
  %59 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %59, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i8* %col_buf11, i8* %col_buf12, i8* %col_buf13, i8* %col_buf14, i8* %col_buf15, i8* %col_buf16, i8* %col_buf17, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_4, i32 %arg_literal_0) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_1, %loop_done_false, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = alloca i32, i64 12, align 4
  %1 = getelementptr i32, i32* %0, i64 0
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %3 = trunc i64 %2 to i32
  store i32 %3, i32* %1, align 4
  %4 = getelementptr i32, i32* %0, i64 1
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %4, align 4
  %7 = getelementptr i32, i32* %0, i64 2
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %7, align 4
  %10 = load i64, i64* %join_hash_tables, align 8
  %11 = inttoptr i64 %10 to i8*
  %12 = bitcast i32* %0 to i8*
  %13 = call i64 @baseline_hash_join_idx_32(i8* %11, i8* %12, i64 12, i64 2590112)
  %14 = icmp sge i64 %13, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %15 = load i1, i1* %remaining_outer_cond_match, align 1
  %16 = and i1 %14, %15
  br i1 true, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %17 = alloca i32, i64 12, align 4
  %18 = getelementptr i32, i32* %17, i64 0
  store i32 %3, i32* %18, align 4
  %19 = getelementptr i32, i32* %17, i64 1
  store i32 %6, i32* %19, align 4
  %20 = getelementptr i32, i32* %17, i64 2
  store i32 %9, i32* %20, align 4
  %21 = getelementptr i64, i64* %join_hash_tables, i64 1
  %22 = load i64, i64* %21, align 8
  %23 = inttoptr i64 %22 to i8*
  %24 = bitcast i32* %17 to i8*
  %25 = call i64 @baseline_hash_join_idx_32(i8* %23, i8* %24, i64 12, i64 5163276)
  %26 = icmp sge i64 %25, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %27 = load i1, i1* %remaining_outer_cond_match2, align 1
  %28 = and i1 %26, %27
  br i1 true, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_1
  store i1 true, i1* %loop_done, align 1
  %29 = call i32 @filter_func_hoisted_literals(i32 %3, i1 %16, i1 %28, i8* %col_buf9, i64 %13, i8* %col_buf15, i64 %25, i64* %out, i1* %loop_done, i32 %arg_literal_4, i32 %arg_literal_0)
  %30 = load i1, i1* %loop_done, align 1
  br i1 %30, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %29

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i32 %extra0, i1 %extra1, i1 %extra2, i8* %col_buf9, i64 %extra3, i8* %col_buf15, i64 %extra4, i64* %out, i1* %loop_done, i32 %arg_literal_4, i32 %arg_literal_0) #33 {
entry:
  %0 = call i8 @eq_int32_t_nullable_lhs(i32 %extra0, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %1 = icmp sgt i8 %0, 0
  %2 = and i1 true, %1
  br i1 %extra1, label %outer_join_args, label %outer_join_nulls

then_case:                                        ; preds = %back_from_outer_join
  br i1 %extra1, label %outer_join_args1, label %outer_join_nulls2

end_case:                                         ; preds = %when_case, %cast_ok
  %3 = phi i32 [ %15, %cast_ok ], [ %arg_literal_4, %when_case ]
  %4 = call i8 @gt_int32_t_nullable_lhs(i32 %3, i32 %arg_literal_4, i64 -2147483648, i8 -128)
  br i1 %extra2, label %outer_join_args7, label %outer_join_nulls8

outer_join_args:                                  ; preds = %entry
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 8, i64 %extra3)
  br label %outer_join_phi

outer_join_nulls:                                 ; preds = %entry
  br label %outer_join_phi

outer_join_phi:                                   ; preds = %outer_join_nulls, %outer_join_args
  %6 = phi i64 [ %5, %outer_join_args ], [ -9223372036854775808, %outer_join_nulls ]
  br label %back_from_outer_join

back_from_outer_join:                             ; preds = %outer_join_phi
  %7 = icmp eq i64 %6, -9223372036854775808
  %8 = xor i1 %7, true
  br i1 %8, label %then_case, label %when_case

outer_join_args1:                                 ; preds = %then_case
  %9 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 8, i64 %extra3)
  br label %outer_join_phi3

outer_join_nulls2:                                ; preds = %then_case
  br label %outer_join_phi3

outer_join_phi3:                                  ; preds = %outer_join_nulls2, %outer_join_args1
  %10 = phi i64 [ %9, %outer_join_args1 ], [ -9223372036854775808, %outer_join_nulls2 ]
  br label %back_from_outer_join4

back_from_outer_join4:                            ; preds = %outer_join_phi3
  %11 = call i8 @gt_int64_t_nullable_lhs(i64 %10, i64 2147483647, i64 -9223372036854775808, i8 -128)
  %12 = icmp sgt i8 %11, 0
  %13 = call i8 @le_int64_t_nullable_lhs(i64 %10, i64 -2147483648, i64 -9223372036854775808, i8 -128)
  %14 = icmp sgt i8 %13, 0
  %overflow = or i1 %12, %14
  br i1 %overflow, label %cast_fail, label %cast_ok

cast_ok:                                          ; preds = %back_from_outer_join4
  %15 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %10, i64 -9223372036854775808, i32 -2147483648)
  br label %end_case

cast_fail:                                        ; preds = %back_from_outer_join4
  ret i32 7

when_case:                                        ; preds = %back_from_outer_join
  br label %end_case

then_case11:                                      ; preds = %back_from_outer_join10
  br i1 %extra2, label %outer_join_args12, label %outer_join_nulls13

end_case6:                                        ; preds = %when_case19, %cast_ok16
  %16 = phi i32 [ %31, %cast_ok16 ], [ %arg_literal_4, %when_case19 ]
  %17 = call i8 @gt_int32_t_nullable_lhs(i32 %16, i32 %arg_literal_4, i64 -2147483648, i8 -128)
  %18 = call i8 @logical_or(i8 %4, i8 %17, i8 -128)
  %19 = icmp sgt i8 %18, 0
  %20 = and i1 %2, %19
  br i1 %20, label %filter_true, label %filter_false

outer_join_args7:                                 ; preds = %end_case
  %21 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 8, i64 %extra4)
  br label %outer_join_phi9

outer_join_nulls8:                                ; preds = %end_case
  br label %outer_join_phi9

outer_join_phi9:                                  ; preds = %outer_join_nulls8, %outer_join_args7
  %22 = phi i64 [ %21, %outer_join_args7 ], [ -9223372036854775808, %outer_join_nulls8 ]
  br label %back_from_outer_join10

back_from_outer_join10:                           ; preds = %outer_join_phi9
  %23 = icmp eq i64 %22, -9223372036854775808
  %24 = xor i1 %23, true
  br i1 %24, label %then_case11, label %when_case19

outer_join_args12:                                ; preds = %then_case11
  %25 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 8, i64 %extra4)
  br label %outer_join_phi14

outer_join_nulls13:                               ; preds = %then_case11
  br label %outer_join_phi14

outer_join_phi14:                                 ; preds = %outer_join_nulls13, %outer_join_args12
  %26 = phi i64 [ %25, %outer_join_args12 ], [ -9223372036854775808, %outer_join_nulls13 ]
  br label %back_from_outer_join15

back_from_outer_join15:                           ; preds = %outer_join_phi14
  %27 = call i8 @gt_int64_t_nullable_lhs(i64 %26, i64 2147483647, i64 -9223372036854775808, i8 -128)
  %28 = icmp sgt i8 %27, 0
  %29 = call i8 @le_int64_t_nullable_lhs(i64 %26, i64 -2147483648, i64 -9223372036854775808, i8 -128)
  %30 = icmp sgt i8 %29, 0
  %overflow18 = or i1 %28, %30
  br i1 %overflow18, label %cast_fail17, label %cast_ok16

cast_ok16:                                        ; preds = %back_from_outer_join15
  %31 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %26, i64 -9223372036854775808, i32 -2147483648)
  br label %end_case6

cast_fail17:                                      ; preds = %back_from_outer_join15
  ret i32 7

when_case19:                                      ; preds = %back_from_outer_join10
  br label %end_case6

filter_true:                                      ; preds = %end_case6
  %32 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %end_case6
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:19:08.528188 1 39904 3 11 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:19:08.542922 1 39904 3 11 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.121594
2025-04-19T00:19:08.604708 1 39904 3 11 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.2127
2025-04-19T00:19:08.605492 1 39904 3 11 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.4454
2025-04-19T00:19:08.623564 1 39904 3 11 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 31.9239
2025-04-19T00:19:08.640276 1 39904 3 11 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_template
ptxas         .     272 bytes stack frame, 176 bytes spill stores, 176 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 336 stack, 0 bytes smem, 464 bytes cmem[0], 12 bytes cmem[2], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:19:08.640312 1 39904 3 11 NvidiaKernel.cpp:188 Generated GPU binary code size: 468192 bytes
2025-04-19T00:19:08.640819 1 39904 3 11 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:19:08.641124 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 182 ms
2025-04-19T00:19:08.796078 1 39904 3 11 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:19:08.796121 1 39904 3 11 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: False
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:19:08.796231 1 39904 3 11 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:19:08.796287 1 39904 3 11 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:19:08.796319 I 39904 3 41819 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:19:08.796333 I 39904 3 41819 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:19:08.796350 I 39904 3 41819 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:19:08.865525 I 39904 3 41819 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 69 ms
2025-04-19T00:19:08.882585 I 39904 3 41819 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 86 ms
2025-04-19T00:19:08.882641 I 39904 3 41819 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:19:08.882655 I 39904 3 41819 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:19:08.882805 1 39904 3 41819 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.095712 ms
2025-04-19T00:19:08.882820 1 39904 3 41819 GpuInterrupt.cpp:26 Registered module 0x756f4314f260 on device 0
2025-04-19T00:19:08.882931 1 39904 3 41819 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:19:08.882938 1 39904 3 41819 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:19:08.882943 1 39904 3 41819 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:19:08.887415 1 39904 3 41819 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 4 ms
2025-04-19T00:19:08.887501 1 39904 3 41819 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:19:08.887514 1 39904 3 41819 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:19:08.887520 I 39904 3 41819 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 4 ms
2025-04-19T00:19:08.887529 I 39904 3 41819 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 4 ms
2025-04-19T00:19:08.887544 I 39904 3 41819 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 91 ms
2025-04-19T00:19:08.887568 1 39904 3 11 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 188
2025-04-19T00:19:08.888187 3 39904 3 11 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:19:08.888277 3 39904 3 11 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i64*
  %row_ptr_loaded = load i64, i64* %0, align 8
  %is_key_empty = icmp eq i64 %row_ptr_loaded, 9223372036854775807
  ret i1 %is_key_empty
}
2025-04-19T00:19:08.888310 3 39904 3 11 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_start = getelementptr i8, i8* %this_row_ptr, i32 0
  %that_targets_start = getelementptr i8, i8* %that_row_ptr, i32 0
  %count_dest = bitcast i8* %this_targets_start to i64*
  %0 = bitcast i8* %that_targets_start to i64*
  %that_targets_start_loaded = load i64, i64* %0, align 8
  %1 = call i64 @agg_sum(i64* %count_dest, i64 %that_targets_start_loaded)
  ret i32 0
}
2025-04-19T00:19:08.888341 3 39904 3 11 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %entry_idx_64 = sext i32 %that_entry_idx to i64
  %row_off_in_bytes = mul i64 %entry_idx_64, 8
  %this_row_ptr = getelementptr i8, i8* %this_buff, i64 %row_off_in_bytes
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %row_off_in_bytes
  %0 = call i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:19:08.891052 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 432 ms
2025-04-19T00:19:08.891085 1 39904 3 11 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 188
2025-04-19T00:19:08.891207 1 39904 3 11 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:19:08.891213 1 39904 3 11 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 7989880700073253758
	Table/Col/Levels: ((db_id: 0, table_id: -30), 0, 0) ((db_id: 0, table_id: -30), 1, 0) ((db_id: 0, table_id: -30), 2, 0) ((db_id: 0, table_id: -30), 3, 0) ((db_id: 0, table_id: -30), 4, 0) ((db_id: 0, table_id: -30), 5, 0) ((db_id: 0, table_id: -31), 0, 1) ((db_id: 0, table_id: -31), 1, 1) ((db_id: 0, table_id: -31), 2, 1) ((db_id: 0, table_id: -31), 3, 1) ((db_id: 0, table_id: -31), 4, 1) ((db_id: 0, table_id: -31), 5, 1) ((db_id: 0, table_id: -32), 0, 2) ((db_id: 0, table_id: -32), 1, 2) ((db_id: 0, table_id: -32), 2, 2) ((db_id: 0, table_id: -32), 3, 2) ((db_id: 0, table_id: -32), 4, 2) ((db_id: 0, table_id: -32), 5, 2) 
	Simple Quals: (= (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1998) ) 
	Quals: (OR (> CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -31, column_id: 3), rte: 1 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST INTEGER(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -31, column_id: 3), rte: 1 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ELSE (Const 0)  END (Const 0) ) (> CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -32, column_id: 3), rte: 2 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST INTEGER(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -32, column_id: 3), rte: 2 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ELSE (Const 0)  END (Const 0) ) ) 
	Join Quals: 		0 LEFT(= < (ColumnVar (db_id: 0, table_id: -31, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 2), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 LEFT(= < (ColumnVar (db_id: 0, table_id: -32, column_id: 0), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -32, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -32, column_id: 2), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 0, table_id: -30, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ROUND (/ (ColumnVar (db_id: 0, table_id: -30, column_id: 3), rte: 0 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (CAST BIGINT(0,0) NONE(0) (+ CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -31, column_id: 3), rte: 1 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST BIGINT(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -31, column_id: 3), rte: 1 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ) ELSE (Const 0)  END CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -32, column_id: 3), rte: 2 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST BIGINT(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -32, column_id: 3), rte: 2 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ) ELSE (Const 0)  END ) ) ) (Const 2) ), (ColumnVar (db_id: 0, table_id: -30, column_id: 3), rte: 0 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -30, column_id: 4), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -30, column_id: 5), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (+ CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -31, column_id: 3), rte: 1 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST INTEGER(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -31, column_id: 3), rte: 1 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ELSE (Const 0)  END CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -32, column_id: 3), rte: 2 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST INTEGER(0,0) NONE(0) (CAST INTEGER(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -32, column_id: 3), rte: 2 BIGINT, type: (type=BIGINT, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ELSE (Const 0)  END ) , (+ CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -31, column_id: 4), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST DECIMAL(20,2)(20,2) NONE(0) (CAST DECIMAL(19,2)(19,2) NONE(0) (CAST DECIMAL(19,2)(19,2) NONE(0) (ColumnVar (db_id: 0, table_id: -31, column_id: 4), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ) ELSE (Const                 0.00)  END CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -32, column_id: 4), rte: 2 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST DECIMAL(20,2)(20,2) NONE(0) (CAST DECIMAL(19,2)(19,2) NONE(0) (CAST DECIMAL(19,2)(19,2) NONE(0) (ColumnVar (db_id: 0, table_id: -32, column_id: 4), rte: 2 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ) ELSE (Const                 0.00)  END ) , (+ CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -31, column_id: 5), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST DECIMAL(20,2)(20,2) NONE(0) (CAST DECIMAL(19,2)(19,2) NONE(0) (CAST DECIMAL(19,2)(19,2) NONE(0) (ColumnVar (db_id: 0, table_id: -31, column_id: 5), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ) ELSE (Const                 0.00)  END CASE ((NOT (IS NULL (ColumnVar (db_id: 0, table_id: -32, column_id: 5), rte: 2 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) , (CAST DECIMAL(20,2)(20,2) NONE(0) (CAST DECIMAL(19,2)(19,2) NONE(0) (CAST DECIMAL(19,2)(19,2) NONE(0) (ColumnVar (db_id: 0, table_id: -32, column_id: 5), rte: 2 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) ) ) ELSE (Const                 0.00)  END ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 1 , 3 desc nulls first , 4 desc nulls first , 5 desc nulls first , 6 , 7 , 8 , 2 
	  Algorithm: Streaming Top N
	  Limit: 100
	  Offset: 0
	Scan Limit: 188
	Bump Allocator: False
2025-04-19T00:19:08.891300 I 39904 3 11 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:19:08.891314 I 39904 3 11 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:19:08.892041 I 39904 3 11 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:19:08.892060 1 39904 3 11 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:19:08.892066 1 39904 3 11 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 0, table_id: -31, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 2), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:19:08.892116 I 39904 3 11 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:19:08.907195 I 39904 3 11 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 15 ms
2025-04-19T00:19:08.910600 1 39904 3 41820 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToOne, hash table size: 41441792 Bytes, # hash entries: 2590112, # entries stored in the payload buffer: 647541, rowid size: 4 Bytes
2025-04-19T00:19:08.913503 1 39904 3 11 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 21 ms
2025-04-19T00:19:08.913533 1 39904 3 11 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:19:08.913541 1 39904 3 11 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 0, table_id: -32, column_id: 0), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -32, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -32, column_id: 2), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -30, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:19:08.913634 I 39904 3 11 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:19:08.949769 I 39904 3 11 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 36 ms
2025-04-19T00:19:08.956460 1 39904 3 41821 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToOne, hash table size: 82612416 Bytes, # hash entries: 5163276, # entries stored in the payload buffer: 1290840, rowid size: 4 Bytes
2025-04-19T00:19:08.962412 1 39904 3 11 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 48 ms
2025-04-19T00:19:08.962433 I 39904 3 11 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 70 ms
2025-04-19T00:19:09.097087 1 39904 3 11 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 64
2025-04-19T00:19:09.097130 1 39904 3 11 NativeCodegen.cpp:3087 number of hoisted literals: 4 / literal buffer usage: 20 bytes
2025-04-19T00:19:09.098321 3 39904 3 11 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8*, i8** %byte_stream, i32 11
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8*, i8** %byte_stream, i32 12
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr i8*, i8** %byte_stream, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr i8*, i8** %byte_stream, i32 14
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr i8*, i8** %byte_stream, i32 15
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8*, i8** %byte_stream, i32 16
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr i8*, i8** %byte_stream, i32 17
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr i8, i8* %literals, i16 0
  %37 = bitcast i8* %36 to i32*
  %literal_0 = load i32, i32* %37, align 4
  %38 = getelementptr i8, i8* %literals, i16 4
  %39 = bitcast i8* %38 to i32*
  %literal_4 = load i32, i32* %39, align 4
  %40 = getelementptr i8, i8* %literals, i16 8
  %41 = bitcast i8* %40 to i64*
  %literal_8 = load i64, i64* %41, align 8
  %42 = getelementptr i8, i8* %literals, i16 16
  %43 = bitcast i8* %42 to i32*
  %literal_16 = load i32, i32* %43, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %44 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %45 = call i32 @pos_start_impl(i32* %row_index_resume)
  %46 = call i32 @pos_step_impl()
  %47 = call i32 @group_buff_idx_impl()
  %48 = sext i32 %45 to i64
  %49 = getelementptr i64*, i64** %group_by_buffers, i32 %47
  %col_buffer = load i64*, i64** %49, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %50 = icmp slt i64 %48, %row_count
  br i1 %50, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %51 = sext i32 %46 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %48, %.loop.preheader ], [ %61, %filter_match ], [ %61, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %52 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i8* %23, i8* %25, i8* %27, i8* %29, i8* %31, i8* %33, i8* %35, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_16, i64 %literal_8, i32 %literal_4, i32 %literal_0)
  %53 = lshr i64 %pos, 15
  %54 = and i64 %53, 64
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %56 = call i1 @check_interrupt()
  %57 = select i1 %56, i32 10, i32 %52
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %58 = phi i32 [ %57, %.interrupt_check ], [ %52, %.forbody ]
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %.error_exit, label %60

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %58, i32* %error_code)
  ret void

60:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %61 = add i64 %pos, %51
  %62 = icmp slt i64 %61, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %63 = icmp ne i32 %crt_matched1, 0
  br i1 %63, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %60
  %64 = load i32, i32* %old_total_matched, align 4
  %65 = add i32 %64, %crt_matched1
  %limit_not_reached = icmp slt i32 %65, %44
  %66 = and i1 %62, %limit_not_reached
  br i1 %66, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %60
  br i1 %62, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i8* %col_buf11, i8* %col_buf12, i8* %col_buf13, i8* %col_buf14, i8* %col_buf15, i8* %col_buf16, i8* %col_buf17, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_16, i64 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_1, %loop_done_false, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = alloca i32, i64 12, align 4
  %1 = getelementptr i32, i32* %0, i64 0
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %3 = trunc i64 %2 to i32
  store i32 %3, i32* %1, align 4
  %4 = getelementptr i32, i32* %0, i64 1
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %4, align 4
  %7 = getelementptr i32, i32* %0, i64 2
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %7, align 4
  %10 = load i64, i64* %join_hash_tables, align 8
  %11 = inttoptr i64 %10 to i8*
  %12 = bitcast i32* %0 to i8*
  %13 = call i64 @baseline_hash_join_idx_32(i8* %11, i8* %12, i64 12, i64 2590112)
  %14 = icmp sge i64 %13, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %15 = load i1, i1* %remaining_outer_cond_match, align 1
  %16 = and i1 %14, %15
  br i1 true, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %17 = alloca i32, i64 12, align 4
  %18 = getelementptr i32, i32* %17, i64 0
  store i32 %3, i32* %18, align 4
  %19 = getelementptr i32, i32* %17, i64 1
  store i32 %6, i32* %19, align 4
  %20 = getelementptr i32, i32* %17, i64 2
  store i32 %9, i32* %20, align 4
  %21 = getelementptr i64, i64* %join_hash_tables, i64 1
  %22 = load i64, i64* %21, align 8
  %23 = inttoptr i64 %22 to i8*
  %24 = bitcast i32* %17 to i8*
  %25 = call i64 @baseline_hash_join_idx_32(i8* %23, i8* %24, i64 12, i64 5163276)
  %26 = icmp sge i64 %25, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %27 = load i1, i1* %remaining_outer_cond_match2, align 1
  %28 = and i1 %26, %27
  br i1 true, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_1
  store i1 true, i1* %loop_done, align 1
  %29 = call i32 @filter_func_hoisted_literals(i32 %3, i1 %16, i1 %28, i8* %col_buf9, i64 %13, i8* %col_buf15, i64 %25, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i1* %loop_done, i32 %9, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf10, i8* %col_buf16, i8* %col_buf11, i8* %col_buf17, i32 %arg_literal_16, i64 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0)
  %30 = load i1, i1* %loop_done, align 1
  br i1 %30, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %29

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i32 %extra0, i1 %extra1, i1 %extra2, i8* %col_buf9, i64 %extra3, i8* %col_buf15, i64 %extra4, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i1* %loop_done, i32 %extra5, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf10, i8* %col_buf16, i8* %col_buf11, i8* %col_buf17, i32 %arg_literal_16, i64 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %0 = call i8 @eq_int32_t_nullable_lhs(i32 %extra0, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %1 = icmp sgt i8 %0, 0
  %2 = and i1 true, %1
  br i1 %extra1, label %outer_join_args, label %outer_join_nulls

then_case:                                        ; preds = %back_from_outer_join
  br i1 %extra1, label %outer_join_args1, label %outer_join_nulls2

end_case:                                         ; preds = %when_case, %cast_ok
  %3 = phi i32 [ %15, %cast_ok ], [ %arg_literal_4, %when_case ]
  %4 = call i8 @gt_int32_t_nullable_lhs(i32 %3, i32 %arg_literal_4, i64 -2147483648, i8 -128)
  br i1 %extra2, label %outer_join_args7, label %outer_join_nulls8

outer_join_args:                                  ; preds = %entry
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 8, i64 %extra3)
  br label %outer_join_phi

outer_join_nulls:                                 ; preds = %entry
  br label %outer_join_phi

outer_join_phi:                                   ; preds = %outer_join_nulls, %outer_join_args
  %6 = phi i64 [ %5, %outer_join_args ], [ -9223372036854775808, %outer_join_nulls ]
  br label %back_from_outer_join

back_from_outer_join:                             ; preds = %outer_join_phi
  %7 = icmp eq i64 %6, -9223372036854775808
  %8 = xor i1 %7, true
  br i1 %8, label %then_case, label %when_case

outer_join_args1:                                 ; preds = %then_case
  %9 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 8, i64 %extra3)
  br label %outer_join_phi3

outer_join_nulls2:                                ; preds = %then_case
  br label %outer_join_phi3

outer_join_phi3:                                  ; preds = %outer_join_nulls2, %outer_join_args1
  %10 = phi i64 [ %9, %outer_join_args1 ], [ -9223372036854775808, %outer_join_nulls2 ]
  br label %back_from_outer_join4

back_from_outer_join4:                            ; preds = %outer_join_phi3
  %11 = call i8 @gt_int64_t_nullable_lhs(i64 %10, i64 2147483647, i64 -9223372036854775808, i8 -128)
  %12 = icmp sgt i8 %11, 0
  %13 = call i8 @le_int64_t_nullable_lhs(i64 %10, i64 -2147483648, i64 -9223372036854775808, i8 -128)
  %14 = icmp sgt i8 %13, 0
  %overflow = or i1 %12, %14
  br i1 %overflow, label %cast_fail, label %cast_ok

cast_ok:                                          ; preds = %back_from_outer_join4
  %15 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %10, i64 -9223372036854775808, i32 -2147483648)
  br label %end_case

cast_fail:                                        ; preds = %back_from_outer_join4
  ret i32 7

when_case:                                        ; preds = %back_from_outer_join
  br label %end_case

then_case11:                                      ; preds = %back_from_outer_join10
  br i1 %extra2, label %outer_join_args12, label %outer_join_nulls13

end_case6:                                        ; preds = %when_case19, %cast_ok16
  %16 = phi i32 [ %31, %cast_ok16 ], [ %arg_literal_4, %when_case19 ]
  %17 = call i8 @gt_int32_t_nullable_lhs(i32 %16, i32 %arg_literal_4, i64 -2147483648, i8 -128)
  %18 = call i8 @logical_or(i8 %4, i8 %17, i8 -128)
  %19 = icmp sgt i8 %18, 0
  %20 = and i1 %2, %19
  br i1 %20, label %filter_true, label %filter_false

outer_join_args7:                                 ; preds = %end_case
  %21 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 8, i64 %extra4)
  br label %outer_join_phi9

outer_join_nulls8:                                ; preds = %end_case
  br label %outer_join_phi9

outer_join_phi9:                                  ; preds = %outer_join_nulls8, %outer_join_args7
  %22 = phi i64 [ %21, %outer_join_args7 ], [ -9223372036854775808, %outer_join_nulls8 ]
  br label %back_from_outer_join10

back_from_outer_join10:                           ; preds = %outer_join_phi9
  %23 = icmp eq i64 %22, -9223372036854775808
  %24 = xor i1 %23, true
  br i1 %24, label %then_case11, label %when_case19

outer_join_args12:                                ; preds = %then_case11
  %25 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 8, i64 %extra4)
  br label %outer_join_phi14

outer_join_nulls13:                               ; preds = %then_case11
  br label %outer_join_phi14

outer_join_phi14:                                 ; preds = %outer_join_nulls13, %outer_join_args12
  %26 = phi i64 [ %25, %outer_join_args12 ], [ -9223372036854775808, %outer_join_nulls13 ]
  br label %back_from_outer_join15

back_from_outer_join15:                           ; preds = %outer_join_phi14
  %27 = call i8 @gt_int64_t_nullable_lhs(i64 %26, i64 2147483647, i64 -9223372036854775808, i8 -128)
  %28 = icmp sgt i8 %27, 0
  %29 = call i8 @le_int64_t_nullable_lhs(i64 %26, i64 -2147483648, i64 -9223372036854775808, i8 -128)
  %30 = icmp sgt i8 %29, 0
  %overflow18 = or i1 %28, %30
  br i1 %overflow18, label %cast_fail17, label %cast_ok16

cast_ok16:                                        ; preds = %back_from_outer_join15
  %31 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %26, i64 -9223372036854775808, i32 -2147483648)
  br label %end_case6

cast_fail17:                                      ; preds = %back_from_outer_join15
  ret i32 7

when_case19:                                      ; preds = %back_from_outer_join10
  br label %end_case6

filter_true:                                      ; preds = %end_case6
  store i32 1, i32* %crt_matched, align 4
  %32 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %32, i32* %old_total_matched, align 4
  %33 = load i32, i32* %max_matched, align 4
  %34 = load i32, i32* %old_total_matched, align 4
  %35 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %33, i32 %34, i64 %pos, i32 9)
  %36 = icmp ne i64* %35, null
  br i1 %36, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %add_ok138, %end_case6
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %agg_col_ptr = getelementptr i64, i64* %35, i64 0
  %37 = sext i32 %extra5 to i64
  call void @agg_id_shared(i64* %agg_col_ptr, i64 %37)
  %38 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 8, i64 %pos)
  br i1 %extra1, label %outer_join_args23, label %outer_join_nulls24

groupby_nullcheck_false:                          ; preds = %filter_true
  %39 = trunc i64 %pos to i32
  %40 = sub i32 0, %39
  ret i32 %40

then_case27:                                      ; preds = %back_from_outer_join26
  br i1 %extra1, label %outer_join_args28, label %outer_join_nulls29

end_case22:                                       ; preds = %when_case35, %cast_ok32
  %41 = phi i64 [ %53, %cast_ok32 ], [ %arg_literal_8, %when_case35 ]
  br i1 %extra2, label %outer_join_args37, label %outer_join_nulls38

outer_join_args23:                                ; preds = %groupby_nullcheck_true
  %42 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 8, i64 %extra3)
  br label %outer_join_phi25

outer_join_nulls24:                               ; preds = %groupby_nullcheck_true
  br label %outer_join_phi25

outer_join_phi25:                                 ; preds = %outer_join_nulls24, %outer_join_args23
  %43 = phi i64 [ %42, %outer_join_args23 ], [ -9223372036854775808, %outer_join_nulls24 ]
  br label %back_from_outer_join26

back_from_outer_join26:                           ; preds = %outer_join_phi25
  %44 = icmp eq i64 %43, -9223372036854775808
  %45 = xor i1 %44, true
  br i1 %45, label %then_case27, label %when_case35

outer_join_args28:                                ; preds = %then_case27
  %46 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 8, i64 %extra3)
  br label %outer_join_phi30

outer_join_nulls29:                               ; preds = %then_case27
  br label %outer_join_phi30

outer_join_phi30:                                 ; preds = %outer_join_nulls29, %outer_join_args28
  %47 = phi i64 [ %46, %outer_join_args28 ], [ -9223372036854775808, %outer_join_nulls29 ]
  br label %back_from_outer_join31

back_from_outer_join31:                           ; preds = %outer_join_phi30
  %48 = call i8 @gt_int64_t_nullable_lhs(i64 %47, i64 2147483647, i64 -9223372036854775808, i8 -128)
  %49 = icmp sgt i8 %48, 0
  %50 = call i8 @le_int64_t_nullable_lhs(i64 %47, i64 -2147483648, i64 -9223372036854775808, i8 -128)
  %51 = icmp sgt i8 %50, 0
  %overflow34 = or i1 %49, %51
  br i1 %overflow34, label %cast_fail33, label %cast_ok32

cast_ok32:                                        ; preds = %back_from_outer_join31
  %52 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %47, i64 -9223372036854775808, i32 -2147483648)
  %53 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %52, i32 -2147483648, i64 -9223372036854775808)
  br label %end_case22

cast_fail33:                                      ; preds = %back_from_outer_join31
  ret i32 7

when_case35:                                      ; preds = %back_from_outer_join26
  br label %end_case22

then_case41:                                      ; preds = %back_from_outer_join40
  br i1 %extra2, label %outer_join_args42, label %outer_join_nulls43

end_case36:                                       ; preds = %when_case49, %cast_ok46
  %54 = phi i64 [ %71, %cast_ok46 ], [ %arg_literal_8, %when_case49 ]
  %55 = call i64 @add_int64_t_nullable(i64 %41, i64 %54, i64 -9223372036854775808)
  %56 = call i64 @safe_div_int64_t(i64 %38, i64 %55, i64 -9223372036854775808)
  %57 = icmp eq i64 %56, -9223372036854775808
  %58 = or i1 false, %57
  %59 = xor i1 %58, true
  br i1 %59, label %args_notnull, label %args_null

outer_join_args37:                                ; preds = %end_case22
  %60 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 8, i64 %extra4)
  br label %outer_join_phi39

outer_join_nulls38:                               ; preds = %end_case22
  br label %outer_join_phi39

outer_join_phi39:                                 ; preds = %outer_join_nulls38, %outer_join_args37
  %61 = phi i64 [ %60, %outer_join_args37 ], [ -9223372036854775808, %outer_join_nulls38 ]
  br label %back_from_outer_join40

back_from_outer_join40:                           ; preds = %outer_join_phi39
  %62 = icmp eq i64 %61, -9223372036854775808
  %63 = xor i1 %62, true
  br i1 %63, label %then_case41, label %when_case49

outer_join_args42:                                ; preds = %then_case41
  %64 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 8, i64 %extra4)
  br label %outer_join_phi44

outer_join_nulls43:                               ; preds = %then_case41
  br label %outer_join_phi44

outer_join_phi44:                                 ; preds = %outer_join_nulls43, %outer_join_args42
  %65 = phi i64 [ %64, %outer_join_args42 ], [ -9223372036854775808, %outer_join_nulls43 ]
  br label %back_from_outer_join45

back_from_outer_join45:                           ; preds = %outer_join_phi44
  %66 = call i8 @gt_int64_t_nullable_lhs(i64 %65, i64 2147483647, i64 -9223372036854775808, i8 -128)
  %67 = icmp sgt i8 %66, 0
  %68 = call i8 @le_int64_t_nullable_lhs(i64 %65, i64 -2147483648, i64 -9223372036854775808, i8 -128)
  %69 = icmp sgt i8 %68, 0
  %overflow48 = or i1 %67, %69
  br i1 %overflow48, label %cast_fail47, label %cast_ok46

cast_ok46:                                        ; preds = %back_from_outer_join45
  %70 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %65, i64 -9223372036854775808, i32 -2147483648)
  %71 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %70, i32 -2147483648, i64 -9223372036854775808)
  br label %end_case36

cast_fail47:                                      ; preds = %back_from_outer_join45
  ret i32 7

when_case49:                                      ; preds = %back_from_outer_join40
  br label %end_case36

args_notnull:                                     ; preds = %end_case36
  %72 = call i64 @Round__3(i64 %56, i32 %arg_literal_16)
  br label %args_null

args_null:                                        ; preds = %args_notnull, %end_case36
  %73 = phi i64 [ %72, %args_notnull ], [ -9223372036854775808, %end_case36 ]
  %74 = call i8 @gt_int64_t_nullable_lhs(i64 %73, i64 2147483647, i64 -9223372036854775808, i8 -128)
  %75 = icmp sgt i8 %74, 0
  %76 = call i8 @le_int64_t_nullable_lhs(i64 %73, i64 -2147483648, i64 -9223372036854775808, i8 -128)
  %77 = icmp sgt i8 %76, 0
  %overflow53 = or i1 %75, %77
  br i1 %overflow53, label %cast_fail52, label %cast_ok51

cast_ok51:                                        ; preds = %args_null
  %78 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %73, i64 -9223372036854775808, i32 -2147483648)
  %agg_col_ptr54 = getelementptr i64, i64* %35, i64 1
  %79 = sext i32 %78 to i64
  call void @agg_id_shared(i64* %agg_col_ptr54, i64 %79)
  %agg_col_ptr55 = getelementptr i64, i64* %35, i64 2
  call void @agg_id_shared(i64* %agg_col_ptr55, i64 %38)
  %80 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 8, i64 %pos)
  %agg_col_ptr56 = getelementptr i64, i64* %35, i64 3
  call void @agg_id_shared(i64* %agg_col_ptr56, i64 %80)
  %81 = call i64 @fixed_width_int_decode(i8* %col_buf5, i32 8, i64 %pos)
  %agg_col_ptr57 = getelementptr i64, i64* %35, i64 4
  call void @agg_id_shared(i64* %agg_col_ptr57, i64 %81)
  br i1 %extra1, label %outer_join_args59, label %outer_join_nulls60

cast_fail52:                                      ; preds = %args_null
  ret i32 7

then_case63:                                      ; preds = %back_from_outer_join62
  br i1 %extra1, label %outer_join_args64, label %outer_join_nulls65

end_case58:                                       ; preds = %when_case71, %cast_ok68
  %82 = phi i32 [ %93, %cast_ok68 ], [ %arg_literal_4, %when_case71 ]
  br i1 %extra2, label %outer_join_args74, label %outer_join_nulls75

outer_join_args59:                                ; preds = %cast_ok51
  %83 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 8, i64 %extra3)
  br label %outer_join_phi61

outer_join_nulls60:                               ; preds = %cast_ok51
  br label %outer_join_phi61

outer_join_phi61:                                 ; preds = %outer_join_nulls60, %outer_join_args59
  %84 = phi i64 [ %83, %outer_join_args59 ], [ -9223372036854775808, %outer_join_nulls60 ]
  br label %back_from_outer_join62

back_from_outer_join62:                           ; preds = %outer_join_phi61
  %85 = icmp eq i64 %84, -9223372036854775808
  %86 = xor i1 %85, true
  br i1 %86, label %then_case63, label %when_case71

outer_join_args64:                                ; preds = %then_case63
  %87 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 8, i64 %extra3)
  br label %outer_join_phi66

outer_join_nulls65:                               ; preds = %then_case63
  br label %outer_join_phi66

outer_join_phi66:                                 ; preds = %outer_join_nulls65, %outer_join_args64
  %88 = phi i64 [ %87, %outer_join_args64 ], [ -9223372036854775808, %outer_join_nulls65 ]
  br label %back_from_outer_join67

back_from_outer_join67:                           ; preds = %outer_join_phi66
  %89 = call i8 @gt_int64_t_nullable_lhs(i64 %88, i64 2147483647, i64 -9223372036854775808, i8 -128)
  %90 = icmp sgt i8 %89, 0
  %91 = call i8 @le_int64_t_nullable_lhs(i64 %88, i64 -2147483648, i64 -9223372036854775808, i8 -128)
  %92 = icmp sgt i8 %91, 0
  %overflow70 = or i1 %90, %92
  br i1 %overflow70, label %cast_fail69, label %cast_ok68

cast_ok68:                                        ; preds = %back_from_outer_join67
  %93 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %88, i64 -9223372036854775808, i32 -2147483648)
  br label %end_case58

cast_fail69:                                      ; preds = %back_from_outer_join67
  ret i32 7

when_case71:                                      ; preds = %back_from_outer_join62
  br label %end_case58

then_case78:                                      ; preds = %back_from_outer_join77
  br i1 %extra2, label %outer_join_args79, label %outer_join_nulls80

end_case73:                                       ; preds = %when_case86, %cast_ok83
  %94 = phi i32 [ %107, %cast_ok83 ], [ %arg_literal_4, %when_case86 ]
  %95 = call i32 @add_int32_t_nullable(i32 %82, i32 %94, i64 -2147483648)
  %agg_col_ptr88 = getelementptr i64, i64* %35, i64 5
  %96 = sext i32 %95 to i64
  call void @agg_id_shared(i64* %agg_col_ptr88, i64 %96)
  br i1 %extra1, label %outer_join_args90, label %outer_join_nulls91

outer_join_args74:                                ; preds = %end_case58
  %97 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 8, i64 %extra4)
  br label %outer_join_phi76

outer_join_nulls75:                               ; preds = %end_case58
  br label %outer_join_phi76

outer_join_phi76:                                 ; preds = %outer_join_nulls75, %outer_join_args74
  %98 = phi i64 [ %97, %outer_join_args74 ], [ -9223372036854775808, %outer_join_nulls75 ]
  br label %back_from_outer_join77

back_from_outer_join77:                           ; preds = %outer_join_phi76
  %99 = icmp eq i64 %98, -9223372036854775808
  %100 = xor i1 %99, true
  br i1 %100, label %then_case78, label %when_case86

outer_join_args79:                                ; preds = %then_case78
  %101 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 8, i64 %extra4)
  br label %outer_join_phi81

outer_join_nulls80:                               ; preds = %then_case78
  br label %outer_join_phi81

outer_join_phi81:                                 ; preds = %outer_join_nulls80, %outer_join_args79
  %102 = phi i64 [ %101, %outer_join_args79 ], [ -9223372036854775808, %outer_join_nulls80 ]
  br label %back_from_outer_join82

back_from_outer_join82:                           ; preds = %outer_join_phi81
  %103 = call i8 @gt_int64_t_nullable_lhs(i64 %102, i64 2147483647, i64 -9223372036854775808, i8 -128)
  %104 = icmp sgt i8 %103, 0
  %105 = call i8 @le_int64_t_nullable_lhs(i64 %102, i64 -2147483648, i64 -9223372036854775808, i8 -128)
  %106 = icmp sgt i8 %105, 0
  %overflow85 = or i1 %104, %106
  br i1 %overflow85, label %cast_fail84, label %cast_ok83

cast_ok83:                                        ; preds = %back_from_outer_join82
  %107 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %102, i64 -9223372036854775808, i32 -2147483648)
  br label %end_case73

cast_fail84:                                      ; preds = %back_from_outer_join82
  ret i32 7

when_case86:                                      ; preds = %back_from_outer_join77
  br label %end_case73

then_case94:                                      ; preds = %back_from_outer_join93
  br i1 %extra1, label %outer_join_args95, label %outer_join_nulls96

end_case89:                                       ; preds = %when_case99, %back_from_outer_join98
  %108 = phi i64 [ %114, %back_from_outer_join98 ], [ %arg_literal_8, %when_case99 ]
  br i1 %extra2, label %outer_join_args102, label %outer_join_nulls103

outer_join_args90:                                ; preds = %end_case73
  %109 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 8, i64 %extra3)
  br label %outer_join_phi92

outer_join_nulls91:                               ; preds = %end_case73
  br label %outer_join_phi92

outer_join_phi92:                                 ; preds = %outer_join_nulls91, %outer_join_args90
  %110 = phi i64 [ %109, %outer_join_args90 ], [ -9223372036854775808, %outer_join_nulls91 ]
  br label %back_from_outer_join93

back_from_outer_join93:                           ; preds = %outer_join_phi92
  %111 = icmp eq i64 %110, -9223372036854775808
  %112 = xor i1 %111, true
  br i1 %112, label %then_case94, label %when_case99

outer_join_args95:                                ; preds = %then_case94
  %113 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 8, i64 %extra3)
  br label %outer_join_phi97

outer_join_nulls96:                               ; preds = %then_case94
  br label %outer_join_phi97

outer_join_phi97:                                 ; preds = %outer_join_nulls96, %outer_join_args95
  %114 = phi i64 [ %113, %outer_join_args95 ], [ -9223372036854775808, %outer_join_nulls96 ]
  br label %back_from_outer_join98

back_from_outer_join98:                           ; preds = %outer_join_phi97
  br label %end_case89

when_case99:                                      ; preds = %back_from_outer_join93
  br label %end_case89

then_case106:                                     ; preds = %back_from_outer_join105
  br i1 %extra2, label %outer_join_args107, label %outer_join_nulls108

end_case101:                                      ; preds = %when_case111, %back_from_outer_join110
  %115 = phi i64 [ %124, %back_from_outer_join110 ], [ %arg_literal_8, %when_case111 ]
  %116 = icmp eq i64 %108, -9223372036854775808
  %117 = icmp eq i64 %115, -9223372036854775808
  %118 = or i1 %116, %117
  br i1 %118, label %add_ok, label %operands_not_null

outer_join_args102:                               ; preds = %end_case89
  %119 = call i64 @fixed_width_int_decode(i8* %col_buf16, i32 8, i64 %extra4)
  br label %outer_join_phi104

outer_join_nulls103:                              ; preds = %end_case89
  br label %outer_join_phi104

outer_join_phi104:                                ; preds = %outer_join_nulls103, %outer_join_args102
  %120 = phi i64 [ %119, %outer_join_args102 ], [ -9223372036854775808, %outer_join_nulls103 ]
  br label %back_from_outer_join105

back_from_outer_join105:                          ; preds = %outer_join_phi104
  %121 = icmp eq i64 %120, -9223372036854775808
  %122 = xor i1 %121, true
  br i1 %122, label %then_case106, label %when_case111

outer_join_args107:                               ; preds = %then_case106
  %123 = call i64 @fixed_width_int_decode(i8* %col_buf16, i32 8, i64 %extra4)
  br label %outer_join_phi109

outer_join_nulls108:                              ; preds = %then_case106
  br label %outer_join_phi109

outer_join_phi109:                                ; preds = %outer_join_nulls108, %outer_join_args107
  %124 = phi i64 [ %123, %outer_join_args107 ], [ -9223372036854775808, %outer_join_nulls108 ]
  br label %back_from_outer_join110

back_from_outer_join110:                          ; preds = %outer_join_phi109
  br label %end_case101

when_case111:                                     ; preds = %back_from_outer_join105
  br label %end_case101

add_ok:                                           ; preds = %operands_not_null, %end_case101
  %125 = call i64 @add_int64_t_nullable(i64 %108, i64 %115, i64 -9223372036854775808)
  %agg_col_ptr113 = getelementptr i64, i64* %35, i64 6
  call void @agg_id_shared(i64* %agg_col_ptr113, i64 %125)
  br i1 %extra1, label %outer_join_args115, label %outer_join_nulls116

operands_not_null:                                ; preds = %end_case101
  %126 = sub i64 9223372036854775807, %108
  %127 = icmp sgt i64 %115, %126
  %128 = icmp sgt i64 %108, 0
  %129 = and i1 %128, %127
  %130 = sub i64 -9223372036854775808, %108
  %131 = icmp slt i64 %115, %130
  %132 = icmp slt i64 %108, 0
  %133 = and i1 %132, %131
  %134 = or i1 %129, %133
  br i1 %134, label %add_fail, label %add_ok

add_fail:                                         ; preds = %operands_not_null
  ret i32 7

then_case119:                                     ; preds = %back_from_outer_join118
  br i1 %extra1, label %outer_join_args120, label %outer_join_nulls121

end_case114:                                      ; preds = %when_case124, %back_from_outer_join123
  %135 = phi i64 [ %141, %back_from_outer_join123 ], [ %arg_literal_8, %when_case124 ]
  br i1 %extra2, label %outer_join_args127, label %outer_join_nulls128

outer_join_args115:                               ; preds = %add_ok
  %136 = call i64 @fixed_width_int_decode(i8* %col_buf11, i32 8, i64 %extra3)
  br label %outer_join_phi117

outer_join_nulls116:                              ; preds = %add_ok
  br label %outer_join_phi117

outer_join_phi117:                                ; preds = %outer_join_nulls116, %outer_join_args115
  %137 = phi i64 [ %136, %outer_join_args115 ], [ -9223372036854775808, %outer_join_nulls116 ]
  br label %back_from_outer_join118

back_from_outer_join118:                          ; preds = %outer_join_phi117
  %138 = icmp eq i64 %137, -9223372036854775808
  %139 = xor i1 %138, true
  br i1 %139, label %then_case119, label %when_case124

outer_join_args120:                               ; preds = %then_case119
  %140 = call i64 @fixed_width_int_decode(i8* %col_buf11, i32 8, i64 %extra3)
  br label %outer_join_phi122

outer_join_nulls121:                              ; preds = %then_case119
  br label %outer_join_phi122

outer_join_phi122:                                ; preds = %outer_join_nulls121, %outer_join_args120
  %141 = phi i64 [ %140, %outer_join_args120 ], [ -9223372036854775808, %outer_join_nulls121 ]
  br label %back_from_outer_join123

back_from_outer_join123:                          ; preds = %outer_join_phi122
  br label %end_case114

when_case124:                                     ; preds = %back_from_outer_join118
  br label %end_case114

then_case131:                                     ; preds = %back_from_outer_join130
  br i1 %extra2, label %outer_join_args132, label %outer_join_nulls133

end_case126:                                      ; preds = %when_case136, %back_from_outer_join135
  %142 = phi i64 [ %151, %back_from_outer_join135 ], [ %arg_literal_8, %when_case136 ]
  %143 = icmp eq i64 %135, -9223372036854775808
  %144 = icmp eq i64 %142, -9223372036854775808
  %145 = or i1 %143, %144
  br i1 %145, label %add_ok138, label %operands_not_null139

outer_join_args127:                               ; preds = %end_case114
  %146 = call i64 @fixed_width_int_decode(i8* %col_buf17, i32 8, i64 %extra4)
  br label %outer_join_phi129

outer_join_nulls128:                              ; preds = %end_case114
  br label %outer_join_phi129

outer_join_phi129:                                ; preds = %outer_join_nulls128, %outer_join_args127
  %147 = phi i64 [ %146, %outer_join_args127 ], [ -9223372036854775808, %outer_join_nulls128 ]
  br label %back_from_outer_join130

back_from_outer_join130:                          ; preds = %outer_join_phi129
  %148 = icmp eq i64 %147, -9223372036854775808
  %149 = xor i1 %148, true
  br i1 %149, label %then_case131, label %when_case136

outer_join_args132:                               ; preds = %then_case131
  %150 = call i64 @fixed_width_int_decode(i8* %col_buf17, i32 8, i64 %extra4)
  br label %outer_join_phi134

outer_join_nulls133:                              ; preds = %then_case131
  br label %outer_join_phi134

outer_join_phi134:                                ; preds = %outer_join_nulls133, %outer_join_args132
  %151 = phi i64 [ %150, %outer_join_args132 ], [ -9223372036854775808, %outer_join_nulls133 ]
  br label %back_from_outer_join135

back_from_outer_join135:                          ; preds = %outer_join_phi134
  br label %end_case126

when_case136:                                     ; preds = %back_from_outer_join130
  br label %end_case126

add_ok138:                                        ; preds = %operands_not_null139, %end_case126
  %152 = call i64 @add_int64_t_nullable(i64 %135, i64 %142, i64 -9223372036854775808)
  %agg_col_ptr141 = getelementptr i64, i64* %35, i64 7
  call void @agg_id_shared(i64* %agg_col_ptr141, i64 %152)
  br label %filter_false

operands_not_null139:                             ; preds = %end_case126
  %153 = sub i64 9223372036854775807, %135
  %154 = icmp sgt i64 %142, %153
  %155 = icmp sgt i64 %135, 0
  %156 = and i1 %155, %154
  %157 = sub i64 -9223372036854775808, %135
  %158 = icmp slt i64 %142, %157
  %159 = icmp slt i64 %135, 0
  %160 = and i1 %159, %158
  %161 = or i1 %156, %160
  br i1 %161, label %add_fail140, label %add_ok138

add_fail140:                                      ; preds = %operands_not_null139
  ret i32 7
}

End of IR
2025-04-19T00:19:09.099418 1 39904 3 11 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:19:09.125083 1 39904 3 11 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.089606
2025-04-19T00:19:09.187570 1 39904 3 11 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.4814
2025-04-19T00:19:09.188363 1 39904 3 11 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.7211
2025-04-19T00:19:09.223725 1 39904 3 11 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 49.4981
2025-04-19T00:19:09.240686 1 39904 3 11 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     416 bytes stack frame, 344 bytes spill stores, 344 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 528 stack, 0 bytes smem, 464 bytes cmem[0], 192 bytes cmem[2], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:19:09.240715 1 39904 3 11 NvidiaKernel.cpp:188 Generated GPU binary code size: 485408 bytes
2025-04-19T00:19:09.241300 1 39904 3 11 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:19:09.241781 I 39904 3 11 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 350 ms
2025-04-19T00:19:09.398451 1 39904 3 11 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:19:09.398495 1 39904 3 11 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	1 | 8 , 4
	2 | 8 , 8
	3 | 8 , 8
	4 | 8 , 8
	5 | 8 , 4
	6 | 8 , 8
	7 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3], [4], [5], [6], [7]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 188
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: False
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:19:09.398610 1 39904 3 11 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:19:09.398655 1 39904 3 11 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:19:09.398675 I 39904 3 41822 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:19:09.398689 I 39904 3 41822 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:19:09.398705 I 39904 3 41822 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:19:09.469408 I 39904 3 41822 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 70 ms
2025-04-19T00:19:09.517023 I 39904 3 41822 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 118 ms
2025-04-19T00:19:09.517093 I 39904 3 41822 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:19:09.517103 2 39904 3 41822 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-30),nest_level(0)) InputDescriptor(db_id(0), table_id(-31),nest_level(1)) InputDescriptor(db_id(0), table_id(-32),nest_level(2))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-30),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(4),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-31),nest_level(1))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(4),InputDescriptor(db_id(0), table_id(-32),nest_level(2))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-32),nest_level(2)))) ra_exe_unit.scan_limit=188 num_rows=((2449339 647541 1290840)) frag_offsets=((0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=188 device_id=0 outer_table_key=(db_id: 0, table_id: -30) scan_limit=188 start_rowid=0 num_tables=3
2025-04-19T00:19:09.517130 I 39904 3 41822 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:19:09.517257 1 39904 3 41822 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.098336 ms
2025-04-19T00:19:09.517276 1 39904 3 41822 GpuInterrupt.cpp:26 Registered module 0x756f428e2950 on device 0
2025-04-19T00:19:09.517478 1 39904 3 41822 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:19:09.517486 1 39904 3 41822 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:19:09.517491 1 39904 3 41822 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:19:09.522749 1 39904 3 41822 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 5 ms
2025-04-19T00:19:09.522850 1 39904 3 41822 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:19:09.522865 1 39904 3 41822 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:19:09.522870 I 39904 3 41822 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 5 ms
2025-04-19T00:19:09.522890 2 39904 3 41822 Execute.cpp:4139 results->rowCount()=188
2025-04-19T00:19:09.522898 I 39904 3 41822 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 5 ms
2025-04-19T00:19:09.522917 I 39904 3 41822 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 124 ms
2025-04-19T00:19:09.522950 I 39904 3 11 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 631 ms
2025-04-19T00:19:09.522988 I 39904 3 11 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 1065 ms
2025-04-19T00:19:09.523099 I 39904 3 11 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 1068 ms
2025-04-19T00:19:09.523106 I 39904 3 11 measure.h:84 Timer end                      executeRelAlgSeq                    executeRelAlgSeq:  895 elapsed 2866 ms
2025-04-19T00:19:09.523147 1 39904 3 11 GpuInterrupt.cpp:227 Reset interrupt flag for CPU execution kernel on Executor 1
2025-04-19T00:19:09.523153 I 39904 3 11 measure.h:84 Timer end             executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612 elapsed 2867 ms
2025-04-19T00:19:09.523159 I 39904 3 11 measure.h:84 Timer end                    executeRelAlgQuery                  executeRelAlgQuery:  573 elapsed 2867 ms
2025-04-19T00:19:09.523165 I 39904 3 11 RelAlgExecutor.cpp:572 DEBUG_TIMER thread_id(11)
2867ms total duration for executeRelAlgQuery
  2867ms start(0ms) executeRelAlgQueryNoRetry RelAlgExecutor.cpp:613
    0ms start(0ms) Query pre-execution steps RelAlgExecutor.cpp:614
    2866ms start(0ms) executeRelAlgSeq RelAlgExecutor.cpp:896
      686ms start(0ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        682ms start(0ms) executeCompound RelAlgExecutor.cpp:2282
          682ms start(0ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(0ms) compileWorkUnit NativeCodegen.cpp:2852
            248ms start(1ms) compileWorkUnit NativeCodegen.cpp:2852
              99ms start(2ms) getInstance HashJoin.cpp:297
                99ms start(2ms) reify PerfectJoinHashTable.cpp:400
                  94ms start(2ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(12)
                      4ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        3ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          3ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(3ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(12)
                    New thread(13)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(13)
              0ms start(101ms) getInstance HashJoin.cpp:297
                0ms start(101ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(101ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(14)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(14)
              0ms start(102ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              146ms start(102ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                0ms start(103ms) initializeNVPTXBackend NativeCodegen.cpp:1546
                145ms start(103ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(103ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  5ms start(103ms) optimize_ir NativeCodegen.cpp:312
                  9ms start(110ms) generatePTX NativeCodegen.cpp:1507
                  129ms start(119ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(15)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                37ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(37ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                130ms start(37ms) executePlanWithoutGroupBy Execute.cpp:3764
                  130ms start(37ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(15)
            0ms start(417ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(417ms) reduceMultiDeviceResults Execute.cpp:1528
            121ms start(491ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(491ms) getInstance HashJoin.cpp:297
                0ms start(491ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(491ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(16)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(16)
              0ms start(492ms) getInstance HashJoin.cpp:297
                0ms start(492ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(492ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(17)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(17)
              0ms start(493ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              118ms start(493ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                118ms start(493ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(493ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  6ms start(493ms) optimize_ir NativeCodegen.cpp:312
                  9ms start(500ms) generatePTX NativeCodegen.cpp:1507
                  102ms start(509ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(18)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                2ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(2ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                67ms start(2ms) executePlanWithGroupBy Execute.cpp:3991
                  57ms start(2ms) launchGpuCode QueryExecutionContext.cpp:227
                  4ms start(60ms) getRowSet QueryExecutionContext.cpp:161
                    4ms start(60ms) reduceMultiDeviceResults Execute.cpp:1528
                      4ms start(60ms) reduceMultiDeviceResultSets Execute.cpp:1602
                        3ms start(61ms) generateNativeCPUCode NativeCodegen.cpp:441
                          2ms start(61ms) optimize_ir NativeCodegen.cpp:312
                          1ms start(63ms) create_execution_engine NativeCodegen.cpp:421
              End thread(18)
            0ms start(682ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(682ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(682ms) reduceMultiDeviceResultSets Execute.cpp:1602
      488ms start(687ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        486ms start(687ms) executeCompound RelAlgExecutor.cpp:2282
          486ms start(687ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(687ms) compileWorkUnit NativeCodegen.cpp:2852
            113ms start(687ms) compileWorkUnit NativeCodegen.cpp:2852
              1ms start(688ms) getInstance HashJoin.cpp:297
                1ms start(688ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(688ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(13591)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(13591)
                    New thread(13592)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(13592)
              0ms start(689ms) getInstance HashJoin.cpp:297
                0ms start(689ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(689ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(13593)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(13593)
              0ms start(690ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              109ms start(690ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                109ms start(690ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(690ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  4ms start(690ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(696ms) generatePTX NativeCodegen.cpp:1507
                  95ms start(704ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(13594)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                13ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(14ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                129ms start(14ms) executePlanWithoutGroupBy Execute.cpp:3764
                  129ms start(14ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(13594)
            0ms start(945ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(945ms) reduceMultiDeviceResults Execute.cpp:1528
            120ms start(1019ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1019ms) getInstance HashJoin.cpp:297
                0ms start(1019ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1019ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(13595)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(13595)
              0ms start(1020ms) getInstance HashJoin.cpp:297
                0ms start(1020ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1020ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(13596)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(13596)
              0ms start(1021ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              117ms start(1021ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                117ms start(1021ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1021ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  6ms start(1021ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1029ms) generatePTX NativeCodegen.cpp:1507
                  101ms start(1037ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(13597)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                1ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(1ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                31ms start(1ms) executePlanWithGroupBy Execute.cpp:3991
                  28ms start(1ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(30ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(30ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(30ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(13597)
            0ms start(1173ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1173ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(1173ms) reduceMultiDeviceResultSets Execute.cpp:1602
      622ms start(1175ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        614ms start(1175ms) executeCompound RelAlgExecutor.cpp:2282
          614ms start(1176ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(1176ms) compileWorkUnit NativeCodegen.cpp:2852
            116ms start(1176ms) compileWorkUnit NativeCodegen.cpp:2852
              2ms start(1177ms) getInstance HashJoin.cpp:297
                2ms start(1177ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1177ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(25246)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(25246)
                    New thread(25247)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(25247)
              0ms start(1179ms) getInstance HashJoin.cpp:297
                0ms start(1179ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1179ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(25248)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(25248)
              0ms start(1180ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              112ms start(1180ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                112ms start(1180ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1180ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  5ms start(1180ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1186ms) generatePTX NativeCodegen.cpp:1507
                  97ms start(1194ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(25249)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                56ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(56ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                131ms start(56ms) executePlanWithoutGroupBy Execute.cpp:3764
                  131ms start(56ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(25249)
            0ms start(1482ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1482ms) reduceMultiDeviceResults Execute.cpp:1528
            116ms start(1553ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1554ms) getInstance HashJoin.cpp:297
                0ms start(1554ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1554ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(25250)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(25250)
              0ms start(1555ms) getInstance HashJoin.cpp:297
                0ms start(1555ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1555ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(25251)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(25251)
              0ms start(1555ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              113ms start(1556ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                113ms start(1556ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1556ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  6ms start(1556ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1563ms) generatePTX NativeCodegen.cpp:1507
                  97ms start(1572ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(25252)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                5ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(5ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                114ms start(5ms) executePlanWithGroupBy Execute.cpp:3991
                  106ms start(5ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(111ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(111ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(111ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(25252)
            0ms start(1790ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1790ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(1790ms) reduceMultiDeviceResultSets Execute.cpp:1602
      1068ms start(1798ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        1068ms start(1798ms) executeSort RelAlgExecutor.cpp:3227
          1065ms start(1801ms) executeWorkUnit RelAlgExecutor.cpp:3652
            182ms start(1802ms) compileWorkUnit NativeCodegen.cpp:2852
              23ms start(1803ms) getInstance HashJoin.cpp:297
                23ms start(1803ms) reify BaselineJoinHashTable.cpp:260
                  16ms start(1803ms) getOneColumnFragment ColumnFetcher.cpp:82
                    16ms start(1803ms) ColumnarResults ColumnarResults.cpp:275
                  0ms start(1820ms) getOneColumnFragment ColumnFetcher.cpp:82
                  0ms start(1821ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(41817)
                      4ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        4ms start(0ms) initHashTableOnGpu BaselineHashTableBuilder.h:513
                          0ms start(0ms) Initialize GPU Baseline Join Hash Table BaselineHashTableBuilder.h:535
                          3ms start(0ms) Fill GPU Baseline Join Hash Table BaselineHashTableBuilder.h:557
                    End thread(41817)
              44ms start(1826ms) getInstance HashJoin.cpp:297
                44ms start(1826ms) reify BaselineJoinHashTable.cpp:260
                  33ms start(1826ms) getOneColumnFragment ColumnFetcher.cpp:82
                    31ms start(1827ms) ColumnarResults ColumnarResults.cpp:275
                  1ms start(1860ms) getOneColumnFragment ColumnFetcher.cpp:82
                  1ms start(1863ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(41818)
                      5ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        5ms start(0ms) initHashTableOnGpu BaselineHashTableBuilder.h:513
                          1ms start(0ms) Initialize GPU Baseline Join Hash Table BaselineHashTableBuilder.h:535
                          4ms start(1ms) Fill GPU Baseline Join Hash Table BaselineHashTableBuilder.h:557
                    End thread(41818)
              0ms start(1871ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              113ms start(1872ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                112ms start(1872ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1872ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  5ms start(1872ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1878ms) generatePTX NativeCodegen.cpp:1507
                  97ms start(1886ms) ptx_to_cubin NvidiaKernel.cpp:129
            154ms start(1985ms) synthesize_metadata InputMetadata.cpp:362
              New thread(41819)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                86ms start(0ms) fetchChunks Execute.cpp:3380
                  69ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(86ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                4ms start(86ms) executePlanWithoutGroupBy Execute.cpp:3764
                  4ms start(86ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(41819)
            3ms start(2231ms) collectAllDeviceResults Execute.cpp:2630
              3ms start(2231ms) reduceMultiDeviceResults Execute.cpp:1528
                3ms start(2231ms) reduceMultiDeviceResultSets Execute.cpp:1602
                  2ms start(2232ms) generateNativeCPUCode NativeCodegen.cpp:441
                    1ms start(2232ms) optimize_ir NativeCodegen.cpp:312
                    0ms start(2234ms) create_execution_engine NativeCodegen.cpp:421
            350ms start(2235ms) compileWorkUnit NativeCodegen.cpp:2852
              21ms start(2236ms) getInstance HashJoin.cpp:297
                21ms start(2236ms) reify BaselineJoinHashTable.cpp:260
                  16ms start(2236ms) getOneColumnFragment ColumnFetcher.cpp:82
                    15ms start(2236ms) ColumnarResults ColumnarResults.cpp:275
                  0ms start(2252ms) getOneColumnFragment ColumnFetcher.cpp:82
                  0ms start(2253ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(41820)
                      2ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        2ms start(0ms) initHashTableOnGpu BaselineHashTableBuilder.h:513
                          0ms start(0ms) Initialize GPU Baseline Join Hash Table BaselineHashTableBuilder.h:535
                          2ms start(0ms) Fill GPU Baseline Join Hash Table BaselineHashTableBuilder.h:557
                    End thread(41820)
              48ms start(2257ms) getInstance HashJoin.cpp:297
                48ms start(2257ms) reify BaselineJoinHashTable.cpp:260
                  38ms start(2257ms) getOneColumnFragment ColumnFetcher.cpp:82
                    36ms start(2257ms) ColumnarResults ColumnarResults.cpp:275
                  1ms start(2296ms) getOneColumnFragment ColumnFetcher.cpp:82
                  1ms start(2298ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(41821)
                      5ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        5ms start(0ms) initHashTableOnGpu BaselineHashTableBuilder.h:513
                          1ms start(0ms) Initialize GPU Baseline Join Hash Table BaselineHashTableBuilder.h:535
                          4ms start(1ms) Fill GPU Baseline Join Hash Table BaselineHashTableBuilder.h:557
                    End thread(41821)
              42ms start(2307ms) synthesize_metadata InputMetadata.cpp:362
              91ms start(2349ms) synthesize_metadata InputMetadata.cpp:362
              0ms start(2441ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              142ms start(2442ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                141ms start(2443ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(2443ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  12ms start(2443ms) optimize_ir NativeCodegen.cpp:312
                  12ms start(2456ms) generatePTX NativeCodegen.cpp:1507
                  115ms start(2469ms) ptx_to_cubin NvidiaKernel.cpp:129
            156ms start(2585ms) synthesize_metadata InputMetadata.cpp:362
              New thread(41822)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                118ms start(0ms) fetchChunks Execute.cpp:3380
                  70ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(118ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                5ms start(118ms) executePlanWithGroupBy Execute.cpp:3991
                  5ms start(118ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(124ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(124ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(124ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(41822)
            0ms start(2867ms) resultsUnion Execute.cpp:1499
          0ms start(2867ms) sort ResultSet.cpp:782
            0ms start(2867ms) initPermutationBuffer ResultSet.cpp:861
            0ms start(2867ms) createComparator ResultSet.h:881
            0ms start(2867ms) topPermutation ResultSet.cpp:1318
2025-04-19T00:19:09.523375 I 39904 3 11 DBHandler.cpp:6148 Cache size information {"query_resultset": 0 bytes, "hash_tables": 0 bytes, "chunk_metadata": 0 bytes, "query_plan_dag": 432 bytes, "compiled_GPU code": 3764288 bytes, "string_dictionary": 0 bytes}
2025-04-19T00:19:09.523381 1 39904 3 11 DBHandler.cpp:6221 jsonlog { "name": "CPU Memory Info", "TotalMB": 15841.9, "FreeMB": 8846.21, "ProcessMB": 1125.18, "VirtualMB": 21784.1, "ProcessPlusSwapMB": 937.941, "ProcessSharedMB": 187.238, "FragmentationPercent": 28 }
2025-04-19T00:19:09.566157 I 39904 3 1 DBHandler.cpp:1303 DEBUG_TIMER thread_id(1)
3889ms total duration for sql_execute
2025-04-19T00:19:09.566218 1 39904 3 1 DBHandler.cpp:1349 Table Schema Locks:
2025-04-19T00:19:09.566225 1 39904 3 1 DBHandler.cpp:1350 Table Data Locks:
2025-04-19T00:19:09.566588 I 39904 3 1 DBHandler.cpp:1300 stdlog sql_execute 2 3890 heavyai admin 904-AIYL {"query_str","client","nonce","execution_time_ms","total_time_ms"} {"with ws as (select d_year AS ws_sold_year, ws_item_sk, ws_bill_customer_sk ws_customer_sk, sum(ws_quantity) ws_qty, sum(ws_wholesale_cost) ws_wc, sum(ws_sales_price) ws_sp from web_sales left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk join date_dim on ws_sold_date_sk = d_date_sk where wr_order_number is null group by d_year, ws_item_sk, ws_bill_customer_sk ), cs as (select d_year AS cs_sold_year, cs_item_sk, cs_bill_customer_sk cs_customer_sk, sum(cs_quantity) cs_qty, sum(cs_wholesale_cost) cs_wc, sum(cs_sales_price) cs_sp from catalog_sales left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk join date_dim on cs_sold_date_sk = d_date_sk where cr_order_number is null group by d_year, cs_item_sk, cs_bill_customer_sk ), ss as (select d_year AS ss_sold_year, ss_item_sk, ss_customer_sk, sum(ss_quantity) ss_qty, sum(ss_wholesale_cost) ss_wc, sum(ss_sales_price) ss_sp from store_sales left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk join date_dim on ss_sold_date_sk = d_date_sk where sr_ticket_number is null group by d_year, ss_item_sk, ss_customer_sk ) select ss_customer_sk, round(ss_qty/(coalesce(ws_qty,0)+coalesce(cs_qty,0)),2) ratio, ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price, coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty, coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost, coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price from ss left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk) left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=ss_item_sk and cs_customer_sk=ss_customer_sk) where (coalesce(ws_qty,0)>0 or coalesce(cs_qty, 0)>0) and ss_sold_year=1998 order by ss_customer_sk, ss_qty desc, ss_wc desc, ss_sp desc, other_chan_qty, other_chan_wholesale_cost, other_chan_sales_price, ratio limit 100;","tcp:localhost:47826","","3823","3890"}
2025-04-19T00:19:09.566599 1 39904 3 1 DBHandler.cpp:1300 stacked_times sql_execute 2 total time 3890 ms
  parse_to_ra 129121692680192 - total time 956 ms
    processCalciteRequest 129121692680192 - total time 870 ms
      processImpl 129121692680192 - total time 868 ms
  execute_rel_alg 129122479112192 - total time 2879 ms
  convertRows 129121692680192 - total time 0 ms

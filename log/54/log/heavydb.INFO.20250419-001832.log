2025-04-19T00:18:32.214121 I 39334 0 0 CommandLineOptions.cpp:1887  Max import threads 32
2025-04-19T00:18:32.214205 I 39334 0 0 CommandLineOptions.cpp:1896  Min CPU buffer pool slab size (in bytes) 268435456
2025-04-19T00:18:32.214213 I 39334 0 0 CommandLineOptions.cpp:1898  Max CPU buffer pool slab size (in bytes) 4294967296
2025-04-19T00:18:32.214218 I 39334 0 0 CommandLineOptions.cpp:1900  Min GPU buffer pool slab size (in bytes) 268435456
2025-04-19T00:18:32.214223 I 39334 0 0 CommandLineOptions.cpp:1902  Max GPU buffer pool slab size (in bytes) 4294967296
2025-04-19T00:18:32.214227 I 39334 0 0 CommandLineOptions.cpp:1904  calcite JVM max memory (in MB) 1024
2025-04-19T00:18:32.214231 I 39334 0 0 CommandLineOptions.cpp:1905  HeavyDB Server Port 6274
2025-04-19T00:18:32.214235 I 39334 0 0 CommandLineOptions.cpp:1906  HeavyDB Calcite Port 6279
2025-04-19T00:18:32.214239 I 39334 0 0 CommandLineOptions.cpp:1907  Enable Calcite view optimize true
2025-04-19T00:18:32.214243 I 39334 0 0 CommandLineOptions.cpp:1909  Allow Local Auth Fallback: enabled
2025-04-19T00:18:32.214247 I 39334 0 0 CommandLineOptions.cpp:1911  ParallelTop min threshold: 100000
2025-04-19T00:18:32.214251 I 39334 0 0 CommandLineOptions.cpp:1912  ParallelTop watchdog max: 20000000
2025-04-19T00:18:32.214255 I 39334 0 0 CommandLineOptions.cpp:1914  Enable Data Recycler: enabled
2025-04-19T00:18:32.214259 I 39334 0 0 CommandLineOptions.cpp:1917  	 Use hashtable cache: enabled
2025-04-19T00:18:32.214263 I 39334 0 0 CommandLineOptions.cpp:1920  		 Total amount of bytes that hashtable cache keeps: 4096 MB.
2025-04-19T00:18:32.214267 I 39334 0 0 CommandLineOptions.cpp:1922  		 Per-hashtable size limit: 2048 MB.
2025-04-19T00:18:32.214271 I 39334 0 0 CommandLineOptions.cpp:1925  	 Use query resultset cache: enabled
2025-04-19T00:18:32.214275 I 39334 0 0 CommandLineOptions.cpp:1928  		 Total amount of bytes that query resultset cache keeps: 4096 MB.
2025-04-19T00:18:32.214280 I 39334 0 0 CommandLineOptions.cpp:1930  		 Per-query resultset size limit: 2048 MB.
2025-04-19T00:18:32.214285 I 39334 0 0 CommandLineOptions.cpp:1933  		 Use auto query resultset caching: disabled
2025-04-19T00:18:32.214291 I 39334 0 0 CommandLineOptions.cpp:1940  		 Use query step skipping: enabled
2025-04-19T00:18:32.214297 I 39334 0 0 CommandLineOptions.cpp:1942  	 Use chunk metadata cache: enabled
2025-04-19T00:18:32.214303 I 39334 0 0 CommandLineOptions.cpp:1945 Executor Resource Manager: enabled
2025-04-19T00:18:32.214308 I 39334 0 0 CommandLineOptions.cpp:1948 	CPU kernel concurrency: enabled
2025-04-19T00:18:32.214313 I 39334 0 0 CommandLineOptions.cpp:1951 	CPU-GPU kernel concurrency: enabled
2025-04-19T00:18:32.214319 I 39334 0 0 CommandLineOptions.cpp:1958 	CPU result set reserved ratio of CPU buffer pool size: 0.8
2025-04-19T00:18:32.214329 I 39334 0 0 CommandLineOptions.cpp:1961 	Per-query max CPU threads ratio: 0.9
2025-04-19T00:18:32.214336 I 39334 0 0 CommandLineOptions.cpp:1963 	Per-query max CPU result memory ratio of allocated total: 0.8
2025-04-19T00:18:32.214343 I 39334 0 0 CommandLineOptions.cpp:1965 	Allow concurrent CPU thread/slot oversubscription: disabled
2025-04-19T00:18:32.214348 I 39334 0 0 CommandLineOptions.cpp:1969 	Allow concurrent CPU result memory oversubscription: disabled
2025-04-19T00:18:32.214355 I 39334 0 0 CommandLineOptions.cpp:1974 	Per-query Max available resource utilization ratio: 0.8
2025-04-19T00:18:32.214361 I 39334 0 0 CommandLineOptions.cpp:1985 Runtime UDF/UDTF Registration Policy:  ALLOWED for superusers only
2025-04-19T00:18:32.214377 1 39334 0 0 CommandLineOptions.cpp:1237 taking [/var/lib/heavyai/storage/heavydb_pid.lck] read+write lock until process exit
2025-04-19T00:18:32.214454 I 39334 0 0 CommandLineOptions.cpp:1318 HeavyDB started with data directory at '/var/lib/heavyai/storage'
2025-04-19T00:18:32.214463 I 39334 0 0 CommandLineOptions.cpp:1323  Server read-only mode is false (--read-only)
2025-04-19T00:18:32.214469 I 39334 0 0 CommandLineOptions.cpp:1340  Threading layer: TBB
2025-04-19T00:18:32.214472 I 39334 0 0 CommandLineOptions.cpp:1344  Watchdog is set to true
2025-04-19T00:18:32.214482 I 39334 0 0 CommandLineOptions.cpp:1345  Dynamic Watchdog is set to false
2025-04-19T00:18:32.214486 I 39334 0 0 CommandLineOptions.cpp:1349  Runtime query interrupt is set to true
2025-04-19T00:18:32.214491 I 39334 0 0 CommandLineOptions.cpp:1351  A frequency of checking pending query interrupt request is set to 1000 (in ms.)
2025-04-19T00:18:32.214494 I 39334 0 0 CommandLineOptions.cpp:1353  A frequency of checking running query interrupt request is set to 0.1 (0.0 ~ 1.0)
2025-04-19T00:18:32.214500 I 39334 0 0 CommandLineOptions.cpp:1356  Non-kernel time query interrupt is set to true
2025-04-19T00:18:32.214504 I 39334 0 0 CommandLineOptions.cpp:1359  Debug Timer is set to true
2025-04-19T00:18:32.214508 I 39334 0 0 CommandLineOptions.cpp:1360  LogUserId is set to false
2025-04-19T00:18:32.214512 I 39334 0 0 CommandLineOptions.cpp:1361  Maximum idle session duration 60
2025-04-19T00:18:32.214516 I 39334 0 0 CommandLineOptions.cpp:1362  Maximum active session duration 43200
2025-04-19T00:18:32.214520 I 39334 0 0 CommandLineOptions.cpp:1363  Maximum number of sessions -1
2025-04-19T00:18:32.214523 I 39334 0 0 CommandLineOptions.cpp:1365 Legacy delimited import is set to true
2025-04-19T00:18:32.214527 I 39334 0 0 CommandLineOptions.cpp:1367 Legacy parquet import is set to false
2025-04-19T00:18:32.214531 I 39334 0 0 CommandLineOptions.cpp:1369 FSI regex parsed import is set to true
2025-04-19T00:18:32.214535 I 39334 0 0 CommandLineOptions.cpp:1371 Allowed import paths is set to ["/"]
2025-04-19T00:18:32.214539 I 39334 0 0 CommandLineOptions.cpp:1372 Allowed export paths is set to ["/"]
2025-04-19T00:18:32.214569 I 39334 0 0 DdlUtils.cpp:874 Parsed allowed-import-paths: (/var/lib/heavyai/storage/import /)
2025-04-19T00:18:32.214578 I 39334 0 0 DdlUtils.cpp:874 Parsed allowed-export-paths: (/var/lib/heavyai/storage/export /)
2025-04-19T00:18:32.214593 I 39334 0 0 CommandLineOptions.cpp:1394 FSI has been enabled as a side effect of enabling non-legacy import.
2025-04-19T00:18:32.214598 I 39334 0 0 CommandLineOptions.cpp:1517 Disk cache enabled for foreign tables only
2025-04-19T00:18:32.214603 I 39334 0 0 CommandLineOptions.cpp:1564 Vacuum Min Selectivity: 0.1
2025-04-19T00:18:32.214608 I 39334 0 0 CommandLineOptions.cpp:1566 Enable system tables is set to true
2025-04-19T00:18:32.214612 I 39334 0 0 CommandLineOptions.cpp:1575 Enable FSI is set to true
2025-04-19T00:18:32.214616 I 39334 0 0 CommandLineOptions.cpp:1576 Enable logs system tables set to false
2025-04-19T00:18:32.214620 I 39334 0 0 CommandLineOptions.cpp:1583 Maximum number of logs system table files set to 100
2025-04-19T00:18:32.214625 I 39334 0 0 HeavyDB.cpp:388 HeavyDB starting up
2025-04-19T00:18:32.214647 I 39334 0 0 HeavyDB.cpp:392 Initializing TBB with 32 threads.
2025-04-19T00:18:32.215161 I 39334 0 0 HeavyDB.cpp:397 TBB max concurrency: 32 threads.
2025-04-19T00:18:32.216276 1 39334 0 0 HeavyDB.cpp:327 heartbeat thread starting
2025-04-19T00:18:32.216362 I 39334 0 0 DBHandler.cpp:244 HeavyDB Server 7.1.0-20231018-69d8a78a07
2025-04-19T00:18:32.278606 I 39334 0 0 CudaMgr.cpp:515 Using 1 Gpus.
2025-04-19T00:18:32.278635 1 39334 0 0 CudaMgr.cpp:517 Device: 0
2025-04-19T00:18:32.278641 1 39334 0 0 CudaMgr.cpp:518 UUID: 8c8b4619-0dfc-3e11-b9db-9f2b8cd9a4b5
2025-04-19T00:18:32.278647 1 39334 0 0 CudaMgr.cpp:519 Clock (khz): 1500000
2025-04-19T00:18:32.278651 1 39334 0 0 CudaMgr.cpp:520 Compute Major: 8
2025-04-19T00:18:32.278655 1 39334 0 0 CudaMgr.cpp:521 Compute Minor: 6
2025-04-19T00:18:32.278658 1 39334 0 0 CudaMgr.cpp:522 PCI bus id: 1
2025-04-19T00:18:32.278663 1 39334 0 0 CudaMgr.cpp:523 PCI deviceId id: 0
2025-04-19T00:18:32.278667 1 39334 0 0 CudaMgr.cpp:524 Per device global memory: 3.79565 GB
2025-04-19T00:18:32.278675 1 39334 0 0 CudaMgr.cpp:526 Memory clock (khz): 6001000
2025-04-19T00:18:32.278679 1 39334 0 0 CudaMgr.cpp:527 Memory bandwidth: 96.016 GB/sec
2025-04-19T00:18:32.278684 1 39334 0 0 CudaMgr.cpp:530 Constant Memory: 65536
2025-04-19T00:18:32.278688 1 39334 0 0 CudaMgr.cpp:531 Shared memory per multiprocessor: 102400
2025-04-19T00:18:32.278699 1 39334 0 0 CudaMgr.cpp:533 Shared memory per block: 49152
2025-04-19T00:18:32.278703 1 39334 0 0 CudaMgr.cpp:534 Number of MPs: 16
2025-04-19T00:18:32.278707 1 39334 0 0 CudaMgr.cpp:535 Warp Size: 32
2025-04-19T00:18:32.278711 1 39334 0 0 CudaMgr.cpp:536 Max threads per block: 1024
2025-04-19T00:18:32.278715 1 39334 0 0 CudaMgr.cpp:537 Max registers per block: 65536
2025-04-19T00:18:32.278718 1 39334 0 0 CudaMgr.cpp:538 Max register per MP: 65536
2025-04-19T00:18:32.278723 1 39334 0 0 CudaMgr.cpp:539 Memory bus width in bits: 128
2025-04-19T00:18:32.278726 I 39334 0 0 CudaMgr.cpp:68 Warming up the GPU JIT Compiler... (this may take several seconds)
2025-04-19T00:18:32.279641 1 39334 0 0 NvidiaKernel.cpp:91 CUDA JIT time to create link: 0.899765
2025-04-19T00:18:32.376649 1 39334 0 0 NvidiaKernel.cpp:100 CUDA JIT time to add RT fatbinary: 16.661
2025-04-19T00:18:32.377450 1 39334 0 0 NvidiaKernel.cpp:109 CUDA JIT time to add GPU table functions library: 16.9086
2025-04-19T00:18:32.379951 I 39334 0 0 CudaMgr.cpp:71 GPU JIT Compiler initialized.
2025-04-19T00:18:32.379973 I 39334 0 0 ArrowForeignStorage.cpp:880 CSV backed temporary tables has been activated. Create table `with (storage_type='CSV:path/to/file.csv');`
2025-04-19T00:18:32.379979 I 39334 0 0 ArrowForeignStorage.cpp:1058 CSV backed temporary tables has been activated. Create table `with (storage_type='CSV:path/to/file.csv');`
2025-04-19T00:18:32.380091 I 39334 0 0 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 0ms Epoch: 0 files read: 0 table location: '/var/lib/heavyai/storage/disk_cache'
2025-04-19T00:18:32.380098 3 39334 0 0 CachingFileMgr.cpp:97 Number of Headers in Vector: 0
2025-04-19T00:18:32.380120 1 39334 0 0 DataMgr.cpp:260 Detected 15841.9M of total system memory.
2025-04-19T00:18:32.380127 I 39334 0 0 DataMgr.cpp:269 Min CPU Slab Size is 256MB
2025-04-19T00:18:32.380131 I 39334 0 0 DataMgr.cpp:270 Max CPU Slab Size is 4096MB
2025-04-19T00:18:32.380136 I 39334 0 0 DataMgr.cpp:271 Max memory pool size for CPU is 12673.5MB
2025-04-19T00:18:32.380140 I 39334 0 0 DataMgr.cpp:293 Reserved GPU memory is 384MB includes render buffer allocation
2025-04-19T00:18:32.380150 I 39334 0 0 DataMgr.cpp:312 Min GPU Slab size for GPU 0 is 256MB
2025-04-19T00:18:32.380154 I 39334 0 0 DataMgr.cpp:314 Max GPU Slab size for GPU 0 is 3502.75MB
2025-04-19T00:18:32.380159 I 39334 0 0 DataMgr.cpp:316 Max memory pool size for GPU 0 is 3502.75MB
2025-04-19T00:18:32.380220 I 39334 0 0 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 0ms Epoch: 0 files read: 0 table location: '/var/lib/heavyai/storage/data/table_0_0'
2025-04-19T00:18:32.380227 3 39334 0 0 FileMgr.cpp:280 Number of Headers in Vector: 0
2025-04-19T00:18:32.380248 I 39334 0 0 DBHandler.cpp:255 Initializing Executor Resource Manager
2025-04-19T00:18:32.380253 I 39334 0 0 DBHandler.cpp:263 	Setting Executor resource pool avaiable CPU threads/slots to default value of 32.
2025-04-19T00:18:32.380269 I 39334 0 0 DBHandler.cpp:274 	Setting max per-query CPU threads to ratio of 0.9 of 32 available threads, or 28 threads.
2025-04-19T00:18:32.380277 I 39334 0 0 DBHandler.cpp:325 	Setting Executor resource pool reserved space for CPU buffer pool memory to 11.75 GB.
2025-04-19T00:18:32.380293 I 39334 0 0 DBHandler.cpp:329 	Setting Executor resource pool reserved space for GPU buffer pool memory to 3.24 GB.
2025-04-19T00:18:32.380297 I 39334 0 0 DBHandler.cpp:333 	Setting Executor resource pool reserved space for CPU result memory to 4.0 GB.
2025-04-19T00:18:32.380374 I 39334 0 0 Calcite.cpp:373 Creating Calcite Handler,  Calcite Port is 6279 base data dir is /var/lib/heavyai/storage
2025-04-19T00:18:32.380379 I 39334 0 0 Calcite.cpp:281 Running Calcite server as a daemon
2025-04-19T00:18:32.992607 I 39334 0 0 Calcite.cpp:321 Calcite server start took 600 ms 
2025-04-19T00:18:32.992646 I 39334 0 0 Calcite.cpp:322 ping took 7 ms 
2025-04-19T00:18:32.996490 1 39334 0 0 Calcite.cpp:634 [{"name":"Truncate__","annotations":[{},{},{"uses_manager":"false"}],"ret":"float","args":["float","i32"]},{"name":"area_triangle","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"ST_AsBinary__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"box_contains_point","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double","double"]},{"name":"Round__","annotations":[{},{},{"uses_manager":"false"}],"ret":"float","args":["float","i32"]},{"name":"array_first_half__f64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>"]},{"name":"array_equal__textdict","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<TextEncodingDict>","Array<TextEncodingDict>"]},{"name":"ST_YMax","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_AsWkt__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"ST_Intersects_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_point_point_squared","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"centroid_add_polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32","i32","i32","double*","double*","double*","double*","i64*","double*"]},{"name":"h3ToGeoPacked","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_AsBinary__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"perimeter_multipolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32","i1"]},{"name":"ST_Distance_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_downAp7","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Centroid_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32*","i32","i32*","i32","i32","i32","i32","double*"]},{"name":"array_equal__f32","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<float>","Array<float>"]},{"name":"ST_AsWkt__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"convert_meters_to_pixel_height","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i8*","i64","i32","i32","i32","double","double","i32","double"]},{"name":"_hex2dToGeo","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32","i32","double*"]},{"name":"tol_eq","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"ST_YMin_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ST_Centroid_Polygon","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32*","i32","i32","i32","i32","double*"]},{"name":"_square","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Log10","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_YMax_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ct_device_selection_udf_gpu__gpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_DWithin_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"round_to_digit","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"_ijkScale","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32"]},{"name":"_rotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_append__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>","double"]},{"name":"array_append__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>","i8"]},{"name":"array_append__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>","i16"]},{"name":"_geoToFaceIjk","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32*"]},{"name":"array_append__4","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>","float"]},{"name":"x_and_y_are_dependent","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32","i32"]},{"name":"ST_XMin_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"raw_array_as_scalar_same_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64*","i64"]},{"name":"ST_X_Point","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_Distance_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_append","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>","i64"]},{"name":"ST_Length_LineString_Geodesic","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"point_in_polygon_winding_number","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","i64","i64","i32","i32","i32"]},{"name":"array_first_half__t32","annotations":[{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"ST_cContains_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_cIntersects_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"udf_identity","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone"]},{"name":"_v2dMag","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double*"]},{"name":"_neighbor","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32"]},{"name":"ST_cIntersects_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"strtok_to_array__1","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["TextEncodingDict","TextEncodingNone"]},{"name":"ST_Distance_MultiLineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsText__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"reg_hex_horiz_pixel_bin_y","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"reg_hex_horiz_pixel_bin_x","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"compressed_coord","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i8*","i32"]},{"name":"ST_Distance_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"area_polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ct_device_selection_udf_both__gpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Log__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"text_encoding_dict_concat","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingNone"]},{"name":"ST_XMax","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_DWithin_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_ijkToHex2d","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","double*"]},{"name":"ST_Perimeter_MultiPolygon_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiPoint_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Contains_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsWkb__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"centroid_add_triangle","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double","double*","double*"]},{"name":"distance_point_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","i1","double"]},{"name":"ST_Contains_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ct_sleep_us__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i64"]},{"name":"array_second_half__i64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>"]},{"name":"h3ToLat","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["i64"]},{"name":"ST_Distance_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_LineString_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_second_half_impl","annotations":[{},{"uses_manager":"false"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"ST_AsWkb__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"_h3ToGeo","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","double*"]},{"name":"array_second_half__i16","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>"]},{"name":"_upAp7r","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"Point_Overlaps_Box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double","double"]},{"name":"point_dwithin_box","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","double*","i64","i32","i32","double"]},{"name":"Floor__2","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_Distance_Point_ClosedLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Floor__3","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Intersects_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiPolygon_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Floor__1","annotations":[{},{"uses_manager":"false"}],"ret":"i16","args":["i16"]},{"name":"ST_Intersects_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsBinary__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"array_append__","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>","i32"]},{"name":"_upAp7","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_AsText__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"_faceIjkToH3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i32*","i32"]},{"name":"Sinh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"barray_append","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>","i1"]},{"name":"ST_XMin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_DWithin_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_MultiPolygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsBinary__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"ST_Intersects_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiLineString_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Perimeter_Polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_DWithin_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"geoToH3","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["double","double","i32"]},{"name":"ST_Distance_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"array_first_half__b8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>"]},{"name":"max_distance_point_line","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"HeavyDB_Geo_PolyBoundsPtr","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["double*","i64"]},{"name":"array_second_half__b8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>"]},{"name":"_pointSquareDist","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","double*"]},{"name":"ST_DWithin_LineString_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_unitIjkToDigit","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"array_equal__i8","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i8>","Array<i8>"]},{"name":"ST_Contains_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Sin","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Distance_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_Point_MultiPoint_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_second_half__i32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>"]},{"name":"ST_Distance_LineString_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_point_point","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"_downAp7r","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Contains_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"tol_ge","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"ST_Distance_MultiPoint_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Contains_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_XMax_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ST_Intersects_MultiPolygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ln__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_Contains_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"text_encoding_none_concat","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone","TextEncodingNone"]},{"name":"distance_point_multilinestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkt__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"convert_meters_to_merc_pixel_width","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","i32","double"]},{"name":"ST_AsWkt__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"ST_Intersects_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Length_LineString","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_AsText__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"ST_Perimeter_Polygon_Geodesic","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Contains_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"tarray_append","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>","TextEncodingDict"]},{"name":"ST_Area_Polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"is_inf","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["double"]},{"name":"ST_AsText__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"ct_device_selection_udf_both__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_first_half__f32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>"]},{"name":"box_dwithin_box","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","i32","double*","i64","i32","i32","double"]},{"name":"centroid_add_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","i32","i1","double*","double*","i64*","double*"]},{"name":"Log10__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_Intersects_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"Asin","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Distance_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"rect_pixel_bin_x","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","i32"]},{"name":"rect_pixel_bin_y","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","i32"]},{"name":"ST_Intersects_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"is_inf__","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["float"]},{"name":"is_point_in_view","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","double","double","double","double"]},{"name":"is_point_size_in_merc_view","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double"]},{"name":"array_equal__f64","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<double>","Array<double>"]},{"name":"ST_Centroid_MultiPoint","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"_ijkRotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Distance_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_LineString_Linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_Point_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Contains_MultiPolygon_Point_Impl","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsText__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"ST_Distance_MultiPoint_Point_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"raw_array_as_array_diff_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["i64*","i64"]},{"name":"_geoToHex2d","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32*","double*"]},{"name":"_adjustOverageClassII","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32*","i32","i32","i32"]},{"name":"degrees","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_second_half__t32","annotations":[{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"approx_distance_in_meters","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["float","float","float","float"]},{"name":"raw_array_as_scalar_diff_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i64*","i64"]},{"name":"constrainLng","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Length_MultiLineString","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32"]},{"name":"array_first_half__i32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>"]},{"name":"ST_Intersects_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_DWithin_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_posAngleRads","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Tanh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_equal__i16","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i16>","Array<i16>"]},{"name":"_isBaseCellPentagon","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_MaxDistance_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"_h3ToFaceIjk","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","i32*"]},{"name":"Log","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"is_nan","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["double"]},{"name":"ST_Perimeter_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"tol_zero_template","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","i64"]},{"name":"centroid_add_ring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","i32","double","double*","double*","double*","double*","i64*","double*"]},{"name":"_ijkSub","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32*","i32*"]},{"name":"ST_YMin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"array_second_half__f64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>"]},{"name":"_h3ToFaceIjkWithInitializedFijk","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i64","i32*"]},{"name":"Ceil","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"polygon_contains_point","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","double","double","i32","i32","i32"]},{"name":"ST_Distance_MultiLineString_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Centroid_LineString","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"ST_Distance_Point_LineString_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_in_meters__","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["float","float","float","float"]},{"name":"Floor__","annotations":[{},{"uses_manager":"false"}],"ret":"float","args":["float"]},{"name":"box_overlaps_box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double*","i64"]},{"name":"decompress_coord","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i32"]},{"name":"isResClassIII","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_first_half__i64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>"]},{"name":"array_append_impl","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>","float"]},{"name":"array_first_half_impl","annotations":[{},{"uses_manager":"false"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"max_distance_point_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","i1"]},{"name":"ST_AsBinary__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"ST_Distance_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"tol_zero","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double"]},{"name":"ST_AsWkb__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"rect_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"barray_append_impl","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>","i8"]},{"name":"ST_Distance_Polygon_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_rotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"tol","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["i32","i32"]},{"name":"_geoAzDistanceRads","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","double","double","double*"]},{"name":"_ijkAdd","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32*","i32*"]},{"name":"ST_DWithin_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"convert_meters_to_pixel_width","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i8*","i64","i32","i32","i32","double","double","i32","double"]},{"name":"reg_hex_vert_pixel_bin_y","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"reg_hex_vert_pixel_bin_x","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"ST_Contains_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"_faceIjkToBaseCellCCWrot60","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"ST_Distance_MultiPoint_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"power","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double"]},{"name":"ST_AsWkb__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"area_ring","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"reg_hex_vert_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"text_encoding_dict_concat3","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingDict"]},{"name":"Atanh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"length_linestring","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i32","i32","i32","i1","i1"]},{"name":"Cos","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Sqrt","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"tol_le","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"Cot","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_DWithin_Point_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_h3LeadingNonZeroDigit","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i64"]},{"name":"box_contains_box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double*","i64"]},{"name":"ST_DWithin_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"line_intersects_line","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double","double"]},{"name":"_faceIjkToBaseCell","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"compression_unit_size","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_Distance_MultiPoint_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Area_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Intersects_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"centroid_add_segment","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double*","double*"]},{"name":"radsToDegs","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"text_encoding_dict_concat2","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingNone","TextEncodingDict"]},{"name":"Tan","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"_h3RotatePent60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Distance_MultiPoint_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_faceIjkToGeo","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32","double*"]},{"name":"ln","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"_h3RotatePent60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"array_second_half__i8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>"]},{"name":"array_first_half__i8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>"]},{"name":"ST_Contains_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"rect_pixel_bin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","i32","i32"]},{"name":"ST_Distance_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkb__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"distance_point_multipolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ct_device_selection_udf_any","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_AsText__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"ST_AsWkt__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"_geoToVec3d","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","double*"]},{"name":"Ceil__2","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Ceil__1","annotations":[{},{"uses_manager":"false"}],"ret":"i16","args":["i16"]},{"name":"array_second_half__f32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>"]},{"name":"Ceil__3","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Distance_Point_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkb__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"distance_point_line","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"ST_Centroid_Point","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"_hex2dToCoordIJK","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32*"]},{"name":"ST_Distance_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Round2_to_digit","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"ST_DWithin_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"on_segment","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double"]},{"name":"h3ToLon","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["i64"]},{"name":"ST_AsWkt__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"distance_in_meters","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"_baseCellIsCwOffset","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32","i32"]},{"name":"ST_DWithin_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"text_encoding_none_length","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["TextEncodingNone"]},{"name":"_setIJK","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32","i32","i32"]},{"name":"Atan2","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double"]},{"name":"Acos","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_equal__i64","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i64>","Array<i64>"]},{"name":"ST_Y_Point","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"_ijkMatches","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32*","i32*"]},{"name":"Cosh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"distance_point_polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"is_nan__","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["float"]},{"name":"ST_Contains_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Intersects_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"text_encoding_none_copy","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone"]},{"name":"Truncate","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"text_encoding_dict_copy_from","annotations":[{},{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingDict","i32"]},{"name":"ST_cContains_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"radians","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_MaxDistance_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"h3ToParent","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"_h3Rotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"text_encoding_dict_copy","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict"]},{"name":"_ijkNormalize","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"Ceil__","annotations":[{},{"uses_manager":"false"}],"ret":"float","args":["float"]},{"name":"reg_hex_horiz_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"ST_Distance_Point_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_ijkRotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"array_equal__bool","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<bool>","Array<bool>"]},{"name":"ST_Distance_MultiPoint_MultiPoint_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"convert_meters_to_merc_pixel_height","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","i32","double"]},{"name":"Round","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"ST_Intersects_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"array_equal__i32","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i32>","Array<i32>"]},{"name":"is_point_size_in_view","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","double","double","double","double","double"]},{"name":"conv_4326_900913_x","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_first_half__i16","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>"]},{"name":"Contains_Polygon_Point_Impl","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"conv_4326_900913_y","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Atan","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ct_device_selection_udf_cpu__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Floor","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"orientation","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i16","args":["double","double","double","double","double","double"]},{"name":"Truncate__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"i16","args":["i16","i32"]},{"name":"ST_Distance_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Truncate__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32","i32"]},{"name":"is_left","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i64","i64","i64","i64","i64"]},{"name":"Truncate__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"is_point_in_merc_view","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double"]},{"name":"degsToRads","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Tan__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_AsBinary__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"polygon_contains_linestring","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_LineString_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"raw_array_as_array_same_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["i64*","i64"]},{"name":"ST_Distance_MultiPoint_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_geoAzimuthRads","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","double*"]},{"name":"strtok_to_array","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["TextEncodingNone","TextEncodingNone"]},{"name":"pi","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":[]},{"name":"Round__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"i16","args":["i16","i32"]},{"name":"ST_Distance_Point_Point_Squared","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Exp","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Round__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32","i32"]},{"name":"Round__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"Round__4","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32","i32"]},{"name":"_h3Rotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]}]
2025-04-19T00:18:33.049241 I 39334 0 0 DBHandler.cpp:527 Started in GPU mode.
2025-04-19T00:18:33.049836 2 39334 0 0 SysCatalog.cpp:251 reloading catalog caches for: system_catalog
2025-04-19T00:18:33.049929 I 39334 0 0 QueryEngine.h:47 Query Engine CUDA streams disabled
2025-04-19T00:18:33.049941 I 39334 0 0 DBHandler.cpp:567 Overriding default geos library with 'libgeos_c.so'
2025-04-19T00:18:33.050050 I 39334 0 0 HeavyDB.cpp:552  HeavyDB server using unencrypted connection
2025-04-19T00:18:37.850734 I 39334 1 1 DBHandler.cpp:659 stdlog_begin connect 0 0     
2025-04-19T00:18:38.023495 I 39334 1 1 DBHandler.cpp:701 User admin connected to database heavyai
2025-04-19T00:18:38.023523 I 39334 1 1 DBHandler.cpp:659 stdlog connect 0 172 heavyai admin 838-55GH {"client","roles"} {"tcp:localhost:32986","super"}
2025-04-19T00:18:38.023666 1 39334 2 1 DBHandler.cpp:960 stdlog_begin get_session_info 1 0 heavyai admin 838-55GH  
2025-04-19T00:18:38.023691 I 39334 2 1 DBHandler.cpp:960 stdlog get_session_info 1 0 heavyai admin 838-55GH {"client"} {"tcp:localhost:32986"}
2025-04-19T00:18:40.838282 I 39334 3 1 DBHandler.cpp:1300 stdlog_begin sql_execute 2 0 heavyai admin 838-55GH {"query_str"} {"with my_customers as ( select distinct c_customer_sk , c_current_addr_sk from ( select cs_sold_date_sk sold_date_sk, cs_bill_customer_sk customer_sk, cs_item_sk item_sk from   catalog_sales union all select ws_sold_date_sk sold_date_sk, ws_bill_customer_sk customer_sk, ws_item_sk item_sk from   web_sales ) cs_or_ws_sales, item, date_dim, customer where   sold_date_sk = d_date_sk and item_sk = i_item_sk and i_category = 'Music' and i_class = 'country' and c_customer_sk = cs_or_ws_sales.customer_sk and d_moy = 1 and d_year = 1999 ) , my_revenue as ( select c_customer_sk, sum(ss_ext_sales_price) as revenue from   my_customers, store_sales, customer_address, store, date_dim where  c_current_addr_sk = ca_address_sk and ca_county = s_county and ca_state = s_state and ss_sold_date_sk = d_date_sk and c_customer_sk = ss_customer_sk and d_month_seq between (select distinct d_month_seq+1 from   date_dim where d_year = 1999 and d_moy = 1) and  (select distinct d_month_seq+3 from   date_dim where d_year = 1999 and d_moy = 1) group by c_customer_sk ) , segments as (select cast((revenue/50) as int) as segment from   my_revenue ) select  segment, count(*) as num_customers, segment*50 as segment_base from segments group by segment order by segment, num_customers limit 100;"}
2025-04-19T00:18:40.838318 1 39334 3 1 DBHandler.cpp:1205 query type: READ
2025-04-19T00:18:40.839109 I 39334 3 1 Calcite.cpp:566 User calcite catalog heavyai sql 'with my_customers as ( select distinct c_customer_sk , c_current_addr_sk from ( select cs_sold_date_sk sold_date_sk, cs_bill_customer_sk customer_sk, cs_item_sk item_sk from   catalog_sales union all select ws_sold_date_sk sold_date_sk, ws_bill_customer_sk customer_sk, ws_item_sk item_sk from   web_sales ) cs_or_ws_sales, item, date_dim, customer where   sold_date_sk = d_date_sk and item_sk = i_item_sk and i_category = 'Music' and i_class = 'country' and c_customer_sk = cs_or_ws_sales.customer_sk and d_moy = 1 and d_year = 1999 ) , my_revenue as ( select c_customer_sk, sum(ss_ext_sales_price) as revenue from   my_customers, store_sales, customer_address, store, date_dim where  c_current_addr_sk = ca_address_sk and ca_county = s_county and ca_state = s_state and ss_sold_date_sk = d_date_sk and c_customer_sk = ss_customer_sk and d_month_seq between (select distinct d_month_seq+1 from   date_dim where d_year = 1999 and d_moy = 1) and  (select distinct d_month_seq+3 from   date_dim where d_year = 1999 and d_moy = 1) group by c_customer_sk ) , segments as (select cast((revenue/50) as int) as segment from   my_revenue ) select  segment, count(*) as num_customers, segment*50 as segment_base from segments group by segment order by segment, num_customers limit 100;'
2025-04-19T00:18:40.862892 1 39334 3 2 DBHandler.cpp:3056 stdlog_begin get_databases 3 0 heavyai calcite 840-autB  
2025-04-19T00:18:40.863061 I 39334 3 2 DBHandler.cpp:3056 stdlog get_databases 3 0 heavyai calcite 840-autB {"client"} {"tcp:localhost:33262"}
2025-04-19T00:18:41.367653 1 39334 3 3 DBHandler.cpp:2703 stdlog_begin get_tables_for_database 4 0 heavyai calcite 840-autB  
2025-04-19T00:18:41.367704 I 39334 3 3 DBHandler.cpp:2703 stdlog get_tables_for_database 4 0 heavyai calcite 840-autB {"client"} {"tcp:localhost:33264"}
2025-04-19T00:18:41.370367 1 39334 3 4 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 5 0 heavyai calcite 840-autB {"table_name"} {"catalog_sales"}
2025-04-19T00:18:41.370389 1 39334 3 4 LockMgr.h:128 Acquiring Table Schema Read Lock for table: catalog_sales
2025-04-19T00:18:41.370503 I 39334 3 4 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 5 0 heavyai calcite 840-autB {"table_name","client"} {"catalog_sales","tcp:localhost:33280"}
2025-04-19T00:18:41.392839 1 39334 3 5 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 6 0 heavyai calcite 840-autB {"table_name"} {"web_sales"}
2025-04-19T00:18:41.392872 1 39334 3 5 LockMgr.h:128 Acquiring Table Schema Read Lock for table: web_sales
2025-04-19T00:18:41.392971 I 39334 3 5 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 6 0 heavyai calcite 840-autB {"table_name","client"} {"web_sales","tcp:localhost:33292"}
2025-04-19T00:18:41.397907 1 39334 3 6 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 7 0 heavyai calcite 840-autB {"table_name"} {"item"}
2025-04-19T00:18:41.397936 1 39334 3 6 LockMgr.h:128 Acquiring Table Schema Read Lock for table: item
2025-04-19T00:18:41.398020 I 39334 3 6 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 7 0 heavyai calcite 840-autB {"table_name","client"} {"item","tcp:localhost:33296"}
2025-04-19T00:18:41.400959 1 39334 3 7 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 8 0 heavyai calcite 840-autB {"table_name"} {"date_dim"}
2025-04-19T00:18:41.400981 1 39334 3 7 LockMgr.h:128 Acquiring Table Schema Read Lock for table: date_dim
2025-04-19T00:18:41.401059 I 39334 3 7 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 8 0 heavyai calcite 840-autB {"table_name","client"} {"date_dim","tcp:localhost:33308"}
2025-04-19T00:18:41.402380 1 39334 3 8 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 9 0 heavyai calcite 840-autB {"table_name"} {"customer"}
2025-04-19T00:18:41.402395 1 39334 3 8 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer
2025-04-19T00:18:41.402451 I 39334 3 8 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 9 0 heavyai calcite 840-autB {"table_name","client"} {"customer","tcp:localhost:33316"}
2025-04-19T00:18:41.409512 1 39334 3 9 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 10 0 heavyai calcite 840-autB {"table_name"} {"store_sales"}
2025-04-19T00:18:41.409537 1 39334 3 9 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_sales
2025-04-19T00:18:41.409607 I 39334 3 9 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 10 0 heavyai calcite 840-autB {"table_name","client"} {"store_sales","tcp:localhost:33332"}
2025-04-19T00:18:41.410687 1 39334 3 10 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 11 0 heavyai calcite 840-autB {"table_name"} {"customer_address"}
2025-04-19T00:18:41.410705 1 39334 3 10 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer_address
2025-04-19T00:18:41.410758 I 39334 3 10 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 11 0 heavyai calcite 840-autB {"table_name","client"} {"customer_address","tcp:localhost:33338"}
2025-04-19T00:18:41.411767 1 39334 3 11 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 12 0 heavyai calcite 840-autB {"table_name"} {"store"}
2025-04-19T00:18:41.411790 1 39334 3 11 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store
2025-04-19T00:18:41.411862 I 39334 3 11 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 12 0 heavyai calcite 840-autB {"table_name","client"} {"store","tcp:localhost:33352"}
2025-04-19T00:18:41.702568 I 39334 3 1 Calcite.cpp:599 Time in Thrift 7 (ms), Time in Java Calcite server 856 (ms)
2025-04-19T00:18:41.702894 1 39334 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: catalog_sales
2025-04-19T00:18:41.703180 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703200 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703208 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703215 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703223 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703231 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703238 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703245 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703252 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703259 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703266 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703274 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703273 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703295 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703281 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703315 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703306 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703324 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703330 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703338 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703330 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703346 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703356 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703365 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703368 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703373 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703375 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703380 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,21,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703383 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703387 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703391 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703394 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,23,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703399 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703401 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,24,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703407 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703408 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,25,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703414 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703423 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703430 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703415 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,26,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703438 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703440 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,27,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703447 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703454 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703461 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703447 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,28,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703469 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703470 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,29,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703476 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703478 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,30,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703484 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,21,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703486 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,31,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703491 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703500 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,23,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703507 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,24,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703493 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,32,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703514 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,25,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703533 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,26,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703541 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,27,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703548 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,28,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703525 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,33,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703556 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,29,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703558 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,4,34,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.703563 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,30,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703571 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,31,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703578 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,32,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703589 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,33,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703597 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,34,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703604 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,36,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.703611 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,1,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703619 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,2,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703625 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,3,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703633 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,4,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703640 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,5,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703647 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,6,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703654 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,7,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703661 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,8,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703669 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,9,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703675 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,10,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703683 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,11,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703690 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,12,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703697 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,13,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703704 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,14,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703712 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,15,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703719 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,16,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703726 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,17,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703733 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,18,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703740 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,19,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703747 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,20,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703754 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,21,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703762 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,22,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703769 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,23,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703792 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,24,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703799 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,25,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703806 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,26,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703814 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,27,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703821 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,28,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703829 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,29,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703841 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,30,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703848 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,31,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703855 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,32,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703863 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,33,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703870 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,34,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.703877 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,1,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703884 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,2,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703892 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,3,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703899 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,4,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703907 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,5,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703914 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,6,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703921 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,7,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703928 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,8,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703936 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,9,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703942 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,10,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703949 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,11,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703956 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,12,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703964 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,13,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703971 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,14,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703978 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,15,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703986 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,16,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.703993 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,17,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704000 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,18,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704007 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,19,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704014 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,20,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704021 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,21,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704028 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,22,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704035 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,23,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704042 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,24,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704056 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,25,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704063 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,26,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704070 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,27,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704077 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,28,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704084 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,29,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704090 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,30,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704096 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,31,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704102 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,32,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704108 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,4,33,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.704332 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,4,34,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.708335 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,4,36,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708380 I 39334 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_4'
2025-04-19T00:18:41.708412 3 39334 3 1 FileMgr.cpp:280 Number of Headers in Vector: 138
2025-04-19T00:18:41.708666 I 39334 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table catalog_sales took 5ms
2025-04-19T00:18:41.708675 1 39334 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: catalog_sales
2025-04-19T00:18:41.708693 1 39334 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer
2025-04-19T00:18:41.708882 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708895 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708901 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708908 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708914 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708929 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708924 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.708935 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708942 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.708950 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708953 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.708956 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708961 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.708969 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.708962 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708978 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.708982 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708985 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.708988 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.708992 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709006 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.708993 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.709014 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709018 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.709022 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709024 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.709029 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709030 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.709037 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709040 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.709044 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709047 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.709051 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709058 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709066 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709073 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.709429 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,5,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.713945 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,5,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.713985 I 39334 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_5'
2025-04-19T00:18:41.714001 3 39334 3 1 FileMgr.cpp:280 Number of Headers in Vector: 38
2025-04-19T00:18:41.714301 I 39334 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table customer took 5ms
2025-04-19T00:18:41.714310 1 39334 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: customer
2025-04-19T00:18:41.714325 1 39334 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer_address
2025-04-19T00:18:41.714510 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714524 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714538 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714555 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714564 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714572 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714580 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714587 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714595 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714602 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714610 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714617 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714631 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714544 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714638 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714645 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.714645 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714659 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714667 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714674 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714681 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714695 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714702 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714709 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714716 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.714723 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.715017 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,6,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719481 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,6,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719519 I 39334 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_6'
2025-04-19T00:18:41.719533 3 39334 3 1 FileMgr.cpp:280 Number of Headers in Vector: 28
2025-04-19T00:18:41.719610 I 39334 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table customer_address took 5ms
2025-04-19T00:18:41.719621 1 39334 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: customer_address
2025-04-19T00:18:41.719633 1 39334 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: date_dim
2025-04-19T00:18:41.719838 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719859 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719868 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719875 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719883 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719890 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719897 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719904 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719902 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719911 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719916 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719918 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719925 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719927 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719933 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719941 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719947 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719958 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719967 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719975 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719949 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719984 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719988 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719991 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.719996 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.719998 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720003 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720006 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720013 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720016 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720020 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720024 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720027 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720031 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720034 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720038 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720045 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,21,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720053 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720045 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720060 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,23,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720062 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720067 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,24,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720069 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720074 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,25,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720077 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720081 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,26,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720084 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,21,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720088 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,27,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720091 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720095 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,28,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.720098 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,23,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720114 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,24,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720121 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,25,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720129 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,26,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720136 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,27,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720143 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,28,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.720482 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,8,30,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725022 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,8,30,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725082 I 39334 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_8'
2025-04-19T00:18:41.725102 3 39334 3 1 FileMgr.cpp:280 Number of Headers in Vector: 58
2025-04-19T00:18:41.725257 I 39334 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table date_dim took 5ms
2025-04-19T00:18:41.725266 1 39334 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: date_dim
2025-04-19T00:18:41.725280 1 39334 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: item
2025-04-19T00:18:41.725470 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725500 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725513 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725528 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725536 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725544 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725520 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725552 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725554 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725559 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725561 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725566 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725569 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725574 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725576 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725584 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725587 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725596 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725597 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725603 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725605 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725613 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725637 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725615 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725644 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725651 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725652 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725659 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725666 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725668 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725679 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725683 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725686 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725690 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725693 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725698 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725700 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725705 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725708 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,21,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725712 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725715 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.725720 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725727 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,21,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.725734 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.726086 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,12,24,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.730711 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,12,24,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.730779 I 39334 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_12'
2025-04-19T00:18:41.730803 3 39334 3 1 FileMgr.cpp:280 Number of Headers in Vector: 46
2025-04-19T00:18:41.730935 I 39334 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table item took 5ms
2025-04-19T00:18:41.730945 1 39334 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: item
2025-04-19T00:18:41.730959 1 39334 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store
2025-04-19T00:18:41.731126 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731137 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731143 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731150 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731157 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731165 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731171 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731178 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731194 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731182 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731201 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731203 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731207 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731210 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731213 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731215 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731221 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731226 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731221 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731233 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731235 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731239 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731241 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731245 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731247 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731252 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731260 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731252 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731266 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731272 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731275 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731278 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731282 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731284 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731288 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731294 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731302 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,21,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731294 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731307 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731311 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731313 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,23,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731317 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731328 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731319 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,24,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731335 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,21,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731337 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,25,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731341 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731344 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,26,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731347 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,23,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731350 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,27,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731354 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,24,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731356 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,28,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731360 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,25,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731362 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,29,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.731366 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,26,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731372 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,27,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731378 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,28,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731385 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,29,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.731671 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,16,31,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736388 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,16,31,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736444 I 39334 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_16'
2025-04-19T00:18:41.736458 3 39334 3 1 FileMgr.cpp:280 Number of Headers in Vector: 60
2025-04-19T00:18:41.736587 I 39334 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table store took 5ms
2025-04-19T00:18:41.736594 1 39334 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store
2025-04-19T00:18:41.736605 1 39334 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_sales
2025-04-19T00:18:41.736752 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736780 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736791 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736786 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736801 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736806 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736808 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736815 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736825 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736834 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736841 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736816 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736857 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736848 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736865 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736871 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736881 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736888 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736896 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736903 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736872 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736911 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736912 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736918 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736920 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736926 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736933 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736926 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736945 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736954 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736962 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736969 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736946 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736976 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736978 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736984 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.736985 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.736991 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.737000 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,25,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.737007 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737016 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737023 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737031 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737038 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737046 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737054 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737062 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.736992 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.737072 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737088 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.737089 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737096 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.737102 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737111 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737103 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.737119 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737124 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.737126 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737132 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,21,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.737134 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737140 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.737141 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737147 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,23,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.737149 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737156 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737163 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737171 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737178 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737185 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737192 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737199 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737207 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737215 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737222 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737229 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737236 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737243 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737250 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737257 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737264 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737272 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737279 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737286 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737298 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737306 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737313 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737320 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737330 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737338 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737345 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737352 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737359 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737366 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 2 Epoch: 1
2025-04-19T00:18:41.737373 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737380 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737387 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737394 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737402 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737409 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737416 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737423 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737430 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737437 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737444 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737452 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737459 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737466 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737473 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737480 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737488 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737495 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737502 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737509 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737516 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737523 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737530 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 3 Epoch: 1
2025-04-19T00:18:41.737537 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737544 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737556 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737563 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737570 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737577 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737584 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737592 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737599 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737606 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737613 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737621 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737627 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737635 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737642 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737649 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737656 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737663 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737670 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737677 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737684 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737692 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737699 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 4 Epoch: 1
2025-04-19T00:18:41.737706 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,25,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.737713 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737720 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737728 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737735 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737742 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737749 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737756 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737763 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737782 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737821 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737828 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737853 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737860 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737871 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737879 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737886 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737893 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737900 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737907 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737914 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737921 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.737928 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.738124 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 5 Epoch: 1
2025-04-19T00:18:41.742543 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,18,25,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.742615 I 39334 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_18'
2025-04-19T00:18:41.742647 3 39334 3 1 FileMgr.cpp:280 Number of Headers in Vector: 164
2025-04-19T00:18:41.742905 I 39334 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table store_sales took 6ms
2025-04-19T00:18:41.742918 1 39334 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store_sales
2025-04-19T00:18:41.742933 1 39334 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: web_sales
2025-04-19T00:18:41.743097 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743109 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743115 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743122 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743143 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743148 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743157 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743162 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743165 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743169 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743172 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743175 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743180 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743189 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743196 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743182 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743203 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743205 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743211 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743223 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743212 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743231 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743233 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743238 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743241 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743245 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743248 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743253 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743255 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743260 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743263 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743267 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743274 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743275 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743282 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743284 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743289 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743291 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743297 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743298 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743304 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,21,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743305 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,21,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743311 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743313 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743319 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,23,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743328 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,24,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743320 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,23,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743336 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,25,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743341 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,24,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743343 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,26,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743349 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,25,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743360 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,26,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743368 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,27,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743376 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,28,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743384 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,29,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743397 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,30,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743350 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,27,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743404 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,31,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743407 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,28,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743411 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,32,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743415 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,29,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743420 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,33,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743422 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,30,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743427 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,23,34,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.743430 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,31,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743437 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,32,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743444 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,33,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743452 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,34,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743459 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,36,0, Page id: 0 Epoch: 1
2025-04-19T00:18:41.743466 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,1,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743473 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,2,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743481 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,3,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743488 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,4,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743495 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,5,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743502 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,6,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743509 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,7,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743516 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,8,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743523 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,9,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743530 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,10,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743537 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,11,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743545 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,12,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743552 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,13,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743559 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,14,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743566 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,15,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743573 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,16,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743580 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,17,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743587 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,18,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743594 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,19,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743601 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,20,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743608 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,21,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743618 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,22,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743624 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,23,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743632 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,24,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743639 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,25,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743646 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,26,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743653 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,27,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743660 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,28,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743667 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,29,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743674 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,30,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743681 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,31,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743688 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,32,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.743695 4 39334 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,23,33,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.744013 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,23,34,0, Page id: 1 Epoch: 1
2025-04-19T00:18:41.748377 4 39334 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,23,36,0, Page id: -1 Epoch: 1
2025-04-19T00:18:41.748440 I 39334 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_23'
2025-04-19T00:18:41.748465 3 39334 3 1 FileMgr.cpp:280 Number of Headers in Vector: 104
2025-04-19T00:18:41.748680 I 39334 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table web_sales took 5ms
2025-04-19T00:18:41.748688 1 39334 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: web_sales
2025-04-19T00:18:41.748809 W 39334 3 1 CudaMgr.cpp:604 Could not find CUDA installation path: environment variables CUDA_HOME or CUDA_DIR are not defined
2025-04-19T00:18:41.748920 W 39334 3 1 Execute.cpp:313 File /libdevice.10.bc does not exist; support for some UDF functions might not be available.
2025-04-19T00:18:41.759638 W 39334 3 1 Execute.cpp:400 Source of rt_libdevice_module LLVM module is unavailable. The module will be unavailable.
2025-04-19T00:18:41.759667 I 39334 3 1 QueryDispatchQueue.h:63 Dispatching query with 0 queries in the queue.
2025-04-19T00:18:41.759701 I 39334 0 0 QueryDispatchQueue.h:100 Worker 1 running query and returning control. There are now 1 workers are running and 0 queries in the queue.
2025-04-19T00:18:41.759722 1 39334 3 12 DBHandler.cpp:6167 Table Schema Locks:
1 4 
1 5 
1 6 
1 8 
1 12 
1 16 
1 18 
1 23 
2025-04-19T00:18:41.759737 1 39334 3 12 DBHandler.cpp:6168 Table Data Locks:
1 4 
1 5 
1 6 
1 8 
1 12 
1 16 
1 18 
1 23 
2025-04-19T00:18:41.770531 W 39334 3 12 Execute.cpp:400 Source of rt_libdevice_module LLVM module is unavailable. The module will be unavailable.
2025-04-19T00:18:41.770617 2 39334 3 12 RelAlgDag.cpp:3339 Parsing query RA JSON: {
  "rels": [
    {
      "id": "0",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "cs_sold_date_sk",
        "cs_sold_time_sk",
        "cs_ship_date_sk",
        "cs_bill_customer_sk",
        "cs_bill_cdemo_sk",
        "cs_bill_hdemo_sk",
        "cs_bill_addr_sk",
        "cs_ship_customer_sk",
        "cs_ship_cdemo_sk",
        "cs_ship_hdemo_sk",
        "cs_ship_addr_sk",
        "cs_call_center_sk",
        "cs_catalog_page_sk",
        "cs_ship_mode_sk",
        "cs_warehouse_sk",
        "cs_item_sk",
        "cs_promo_sk",
        "cs_order_number",
        "cs_quantity",
        "cs_wholesale_cost",
        "cs_list_price",
        "cs_sales_price",
        "cs_ext_discount_amt",
        "cs_ext_sales_price",
        "cs_ext_wholesale_cost",
        "cs_ext_list_price",
        "cs_ext_tax",
        "cs_coupon_amt",
        "cs_ext_ship_cost",
        "cs_net_paid",
        "cs_net_paid_inc_tax",
        "cs_net_paid_inc_ship",
        "cs_net_paid_inc_ship_tax",
        "cs_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "catalog_sales"
      ],
      "inputs": []
    },
    {
      "id": "1",
      "relOp": "LogicalProject",
      "fields": [
        "sold_date_sk",
        "customer_sk",
        "item_sk"
      ],
      "exprs": [
        {
          "input": 0
        },
        {
          "input": 3
        },
        {
          "input": 15
        }
      ]
    },
    {
      "id": "2",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ws_sold_date_sk",
        "ws_sold_time_sk",
        "ws_ship_date_sk",
        "ws_item_sk",
        "ws_bill_customer_sk",
        "ws_bill_cdemo_sk",
        "ws_bill_hdemo_sk",
        "ws_bill_addr_sk",
        "ws_ship_customer_sk",
        "ws_ship_cdemo_sk",
        "ws_ship_hdemo_sk",
        "ws_ship_addr_sk",
        "ws_web_page_sk",
        "ws_web_site_sk",
        "ws_ship_mode_sk",
        "ws_warehouse_sk",
        "ws_promo_sk",
        "ws_order_number",
        "ws_quantity",
        "ws_wholesale_cost",
        "ws_list_price",
        "ws_sales_price",
        "ws_ext_discount_amt",
        "ws_ext_sales_price",
        "ws_ext_wholesale_cost",
        "ws_ext_list_price",
        "ws_ext_tax",
        "ws_coupon_amt",
        "ws_ext_ship_cost",
        "ws_net_paid",
        "ws_net_paid_inc_tax",
        "ws_net_paid_inc_ship",
        "ws_net_paid_inc_ship_tax",
        "ws_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "web_sales"
      ],
      "inputs": []
    },
    {
      "id": "3",
      "relOp": "LogicalProject",
      "fields": [
        "sold_date_sk",
        "customer_sk",
        "item_sk"
      ],
      "exprs": [
        {
          "input": 0
        },
        {
          "input": 4
        },
        {
          "input": 3
        }
      ]
    },
    {
      "id": "4",
      "relOp": "LogicalUnion",
      "all": true,
      "inputs": [
        "1",
        "3"
      ]
    },
    {
      "id": "5",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "i_item_sk",
        "i_item_id",
        "i_rec_start_date",
        "i_rec_end_date",
        "i_item_desc",
        "i_current_price",
        "i_wholesale_cost",
        "i_brand_id",
        "i_brand",
        "i_class_id",
        "i_class",
        "i_category_id",
        "i_category",
        "i_manufact_id",
        "i_manufact",
        "i_size",
        "i_formulation",
        "i_color",
        "i_units",
        "i_container",
        "i_manager_id",
        "i_product_name",
        "rowid"
      ],
      "table": [
        "heavyai",
        "item"
      ],
      "inputs": []
    },
    {
      "id": "6",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "4",
        "5"
      ]
    },
    {
      "id": "7",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "d_date_sk",
        "d_date_id",
        "d_date",
        "d_month_seq",
        "d_week_seq",
        "d_quarter_seq",
        "d_year",
        "d_dow",
        "d_moy",
        "d_dom",
        "d_qoy",
        "d_fy_year",
        "d_fy_quarter_seq",
        "d_fy_week_seq",
        "d_day_name",
        "d_quarter_name",
        "d_holiday",
        "d_weekend",
        "d_following_holiday",
        "d_first_dom",
        "d_last_dom",
        "d_same_day_ly",
        "d_same_day_lq",
        "d_current_day",
        "d_current_week",
        "d_current_month",
        "d_current_quarter",
        "d_current_year",
        "rowid"
      ],
      "table": [
        "heavyai",
        "date_dim"
      ],
      "inputs": []
    },
    {
      "id": "8",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "6",
        "7"
      ]
    },
    {
      "id": "9",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "c_customer_sk",
        "c_customer_id",
        "c_current_cdemo_sk",
        "c_current_hdemo_sk",
        "c_current_addr_sk",
        "c_first_shipto_date_sk",
        "c_first_sales_date_sk",
        "c_salutation",
        "c_first_name",
        "c_last_name",
        "c_preferred_cust_flag",
        "c_birth_day",
        "c_birth_month",
        "c_birth_year",
        "c_birth_country",
        "c_login",
        "c_email_address",
        "c_last_review_date_sk",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer"
      ],
      "inputs": []
    },
    {
      "id": "10",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "8",
        "9"
      ]
    },
    {
      "id": "11",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 0
              },
              {
                "input": 26
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 3
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 15
              },
              {
                "literal": "Music",
                "type": "CHAR",
                "target_type": "VARCHAR",
                "scale": -2147483648,
                "precision": 50,
                "type_scale": -2147483648,
                "type_precision": 50
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 13
              },
              {
                "literal": "country",
                "type": "CHAR",
                "target_type": "VARCHAR",
                "scale": -2147483648,
                "precision": 50,
                "type_scale": -2147483648,
                "type_precision": 50
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 55
              },
              {
                "input": 1
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 34
              },
              {
                "literal": 1,
                "type": "DECIMAL",
                "target_type": "INTEGER",
                "scale": 0,
                "precision": 1,
                "type_scale": 0,
                "type_precision": 10
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 32
              },
              {
                "literal": 1999,
                "type": "DECIMAL",
                "target_type": "INTEGER",
                "scale": 0,
                "precision": 4,
                "type_scale": 0,
                "type_precision": 10
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "12",
      "relOp": "LogicalProject",
      "fields": [
        "c_customer_sk",
        "c_current_addr_sk"
      ],
      "exprs": [
        {
          "input": 55
        },
        {
          "input": 59
        }
      ]
    },
    {
      "id": "13",
      "relOp": "LogicalAggregate",
      "fields": [
        "c_customer_sk",
        "c_current_addr_sk"
      ],
      "group": [
        0,
        1
      ],
      "aggs": []
    },
    {
      "id": "14",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ss_sold_date_sk",
        "ss_sold_time_sk",
        "ss_item_sk",
        "ss_customer_sk",
        "ss_cdemo_sk",
        "ss_hdemo_sk",
        "ss_addr_sk",
        "ss_store_sk",
        "ss_promo_sk",
        "ss_ticket_number",
        "ss_quantity",
        "ss_wholesale_cost",
        "ss_list_price",
        "ss_sales_price",
        "ss_ext_discount_amt",
        "ss_ext_sales_price",
        "ss_ext_wholesale_cost",
        "ss_ext_list_price",
        "ss_ext_tax",
        "ss_coupon_amt",
        "ss_net_paid",
        "ss_net_paid_inc_tax",
        "ss_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_sales"
      ],
      "inputs": []
    },
    {
      "id": "15",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "13",
        "14"
      ]
    },
    {
      "id": "16",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ca_address_sk",
        "ca_address_id",
        "ca_street_number",
        "ca_street_name",
        "ca_street_type",
        "ca_suite_number",
        "ca_city",
        "ca_county",
        "ca_state",
        "ca_zip",
        "ca_country",
        "ca_gmt_offset",
        "ca_location_type",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer_address"
      ],
      "inputs": []
    },
    {
      "id": "17",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "15",
        "16"
      ]
    },
    {
      "id": "18",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "s_store_sk",
        "s_store_id",
        "s_rec_start_date",
        "s_rec_end_date",
        "s_closed_date_sk",
        "s_store_name",
        "s_number_employees",
        "s_floor_space",
        "s_hours",
        "s_manager",
        "s_market_id",
        "s_geography_class",
        "s_market_desc",
        "s_market_manager",
        "s_division_id",
        "s_division_name",
        "s_company_id",
        "s_company_name",
        "s_street_number",
        "s_street_name",
        "s_street_type",
        "s_suite_number",
        "s_city",
        "s_county",
        "s_state",
        "s_zip",
        "s_country",
        "s_gmt_offset",
        "s_tax_percentage",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store"
      ],
      "inputs": []
    },
    {
      "id": "19",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "17",
        "18"
      ]
    },
    {
      "id": "20",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "d_date_sk",
        "d_date_id",
        "d_date",
        "d_month_seq",
        "d_week_seq",
        "d_quarter_seq",
        "d_year",
        "d_dow",
        "d_moy",
        "d_dom",
        "d_qoy",
        "d_fy_year",
        "d_fy_quarter_seq",
        "d_fy_week_seq",
        "d_day_name",
        "d_quarter_name",
        "d_holiday",
        "d_weekend",
        "d_following_holiday",
        "d_first_dom",
        "d_last_dom",
        "d_same_day_ly",
        "d_same_day_lq",
        "d_current_day",
        "d_current_week",
        "d_current_month",
        "d_current_quarter",
        "d_current_year",
        "rowid"
      ],
      "table": [
        "heavyai",
        "date_dim"
      ],
      "inputs": []
    },
    {
      "id": "21",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "19",
        "20"
      ]
    },
    {
      "id": "22",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 1
              },
              {
                "input": 26
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 33
              },
              {
                "input": 63
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 34
              },
              {
                "input": 64
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 70
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 0
              },
              {
                "input": 5
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": ">=",
            "operands": [
              {
                "input": 73
              },
              {
                "op": "$SCALAR_QUERY",
                "operands": [],
                "type": {
                  "type": "INTEGER",
                  "nullable": true
                },
                "subquery": {
                  "rels": [
                    {
                      "id": "0",
                      "relOp": "LogicalTableScan",
                      "fieldNames": [
                        "d_date_sk",
                        "d_date_id",
                        "d_date",
                        "d_month_seq",
                        "d_week_seq",
                        "d_quarter_seq",
                        "d_year",
                        "d_dow",
                        "d_moy",
                        "d_dom",
                        "d_qoy",
                        "d_fy_year",
                        "d_fy_quarter_seq",
                        "d_fy_week_seq",
                        "d_day_name",
                        "d_quarter_name",
                        "d_holiday",
                        "d_weekend",
                        "d_following_holiday",
                        "d_first_dom",
                        "d_last_dom",
                        "d_same_day_ly",
                        "d_same_day_lq",
                        "d_current_day",
                        "d_current_week",
                        "d_current_month",
                        "d_current_quarter",
                        "d_current_year",
                        "rowid"
                      ],
                      "table": [
                        "heavyai",
                        "date_dim"
                      ],
                      "inputs": []
                    },
                    {
                      "id": "1",
                      "relOp": "LogicalFilter",
                      "condition": {
                        "op": "AND",
                        "operands": [
                          {
                            "op": "=",
                            "operands": [
                              {
                                "input": 6
                              },
                              {
                                "literal": 1999,
                                "type": "DECIMAL",
                                "target_type": "INTEGER",
                                "scale": 0,
                                "precision": 4,
                                "type_scale": 0,
                                "type_precision": 10
                              }
                            ],
                            "type": {
                              "type": "BOOLEAN",
                              "nullable": true
                            }
                          },
                          {
                            "op": "=",
                            "operands": [
                              {
                                "input": 8
                              },
                              {
                                "literal": 1,
                                "type": "DECIMAL",
                                "target_type": "INTEGER",
                                "scale": 0,
                                "precision": 1,
                                "type_scale": 0,
                                "type_precision": 10
                              }
                            ],
                            "type": {
                              "type": "BOOLEAN",
                              "nullable": true
                            }
                          }
                        ],
                        "type": {
                          "type": "BOOLEAN",
                          "nullable": true
                        }
                      }
                    },
                    {
                      "id": "2",
                      "relOp": "LogicalProject",
                      "fields": [
                        "EXPR$0"
                      ],
                      "exprs": [
                        {
                          "op": "+",
                          "operands": [
                            {
                              "input": 3
                            },
                            {
                              "literal": 1,
                              "type": "DECIMAL",
                              "target_type": "INTEGER",
                              "scale": 0,
                              "precision": 1,
                              "type_scale": 0,
                              "type_precision": 10
                            }
                          ],
                          "type": {
                            "type": "INTEGER",
                            "nullable": true
                          }
                        }
                      ]
                    },
                    {
                      "id": "3",
                      "relOp": "LogicalAggregate",
                      "fields": [
                        "EXPR$0"
                      ],
                      "group": [
                        0
                      ],
                      "aggs": []
                    }
                  ]
                }
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "<=",
            "operands": [
              {
                "input": 73
              },
              {
                "op": "$SCALAR_QUERY",
                "operands": [],
                "type": {
                  "type": "INTEGER",
                  "nullable": true
                },
                "subquery": {
                  "rels": [
                    {
                      "id": "0",
                      "relOp": "LogicalTableScan",
                      "fieldNames": [
                        "d_date_sk",
                        "d_date_id",
                        "d_date",
                        "d_month_seq",
                        "d_week_seq",
                        "d_quarter_seq",
                        "d_year",
                        "d_dow",
                        "d_moy",
                        "d_dom",
                        "d_qoy",
                        "d_fy_year",
                        "d_fy_quarter_seq",
                        "d_fy_week_seq",
                        "d_day_name",
                        "d_quarter_name",
                        "d_holiday",
                        "d_weekend",
                        "d_following_holiday",
                        "d_first_dom",
                        "d_last_dom",
                        "d_same_day_ly",
                        "d_same_day_lq",
                        "d_current_day",
                        "d_current_week",
                        "d_current_month",
                        "d_current_quarter",
                        "d_current_year",
                        "rowid"
                      ],
                      "table": [
                        "heavyai",
                        "date_dim"
                      ],
                      "inputs": []
                    },
                    {
                      "id": "1",
                      "relOp": "LogicalFilter",
                      "condition": {
                        "op": "AND",
                        "operands": [
                          {
                            "op": "=",
                            "operands": [
                              {
                                "input": 6
                              },
                              {
                                "literal": 1999,
                                "type": "DECIMAL",
                                "target_type": "INTEGER",
                                "scale": 0,
                                "precision": 4,
                                "type_scale": 0,
                                "type_precision": 10
                              }
                            ],
                            "type": {
                              "type": "BOOLEAN",
                              "nullable": true
                            }
                          },
                          {
                            "op": "=",
                            "operands": [
                              {
                                "input": 8
                              },
                              {
                                "literal": 1,
                                "type": "DECIMAL",
                                "target_type": "INTEGER",
                                "scale": 0,
                                "precision": 1,
                                "type_scale": 0,
                                "type_precision": 10
                              }
                            ],
                            "type": {
                              "type": "BOOLEAN",
                              "nullable": true
                            }
                          }
                        ],
                        "type": {
                          "type": "BOOLEAN",
                          "nullable": true
                        }
                      }
                    },
                    {
                      "id": "2",
                      "relOp": "LogicalProject",
                      "fields": [
                        "EXPR$0"
                      ],
                      "exprs": [
                        {
                          "op": "+",
                          "operands": [
                            {
                              "input": 3
                            },
                            {
                              "literal": 3,
                              "type": "DECIMAL",
                              "target_type": "INTEGER",
                              "scale": 0,
                              "precision": 1,
                              "type_scale": 0,
                              "type_precision": 10
                            }
                          ],
                          "type": {
                            "type": "INTEGER",
                            "nullable": true
                          }
                        }
                      ]
                    },
                    {
                      "id": "3",
                      "relOp": "LogicalAggregate",
                      "fields": [
                        "EXPR$0"
                      ],
                      "group": [
                        0
                      ],
                      "aggs": []
                    }
                  ]
                }
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "23",
      "relOp": "LogicalProject",
      "fields": [
        "c_customer_sk",
        "ss_ext_sales_price"
      ],
      "exprs": [
        {
          "input": 0
        },
        {
          "input": 17
        }
      ]
    },
    {
      "id": "24",
      "relOp": "LogicalAggregate",
      "fields": [
        "c_customer_sk",
        "revenue"
      ],
      "group": [
        0
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            1
          ]
        }
      ]
    },
    {
      "id": "25",
      "relOp": "LogicalProject",
      "fields": [
        "segment"
      ],
      "exprs": [
        {
          "op": "CAST",
          "operands": [
            {
              "op": "\/",
              "operands": [
                {
                  "input": 1
                },
                {
                  "literal": 50,
                  "type": "DECIMAL",
                  "target_type": "INTEGER",
                  "scale": 0,
                  "precision": 2,
                  "type_scale": 0,
                  "type_precision": 10
                }
              ],
              "type": {
                "type": "DECIMAL",
                "nullable": true,
                "precision": 19,
                "scale": 2
              }
            }
          ],
          "type": {
            "type": "INTEGER",
            "nullable": true
          }
        }
      ]
    },
    {
      "id": "26",
      "relOp": "LogicalAggregate",
      "fields": [
        "segment",
        "num_customers"
      ],
      "group": [
        0
      ],
      "aggs": [
        {
          "agg": "COUNT",
          "type": {
            "type": "BIGINT",
            "nullable": false
          },
          "distinct": false,
          "operands": []
        }
      ]
    },
    {
      "id": "27",
      "relOp": "LogicalProject",
      "fields": [
        "segment",
        "num_customers",
        "segment_base"
      ],
      "exprs": [
        {
          "input": 0
        },
        {
          "input": 1
        },
        {
          "op": "*",
          "operands": [
            {
              "input": 0
            },
            {
              "literal": 50,
              "type": "DECIMAL",
              "target_type": "INTEGER",
              "scale": 0,
              "precision": 2,
              "type_scale": 0,
              "type_precision": 10
            }
          ],
          "type": {
            "type": "INTEGER",
            "nullable": true
          }
        }
      ]
    },
    {
      "id": "28",
      "relOp": "LogicalSort",
      "collation": [
        {
          "field": 0,
          "direction": "ASCENDING",
          "nulls": "LAST"
        },
        {
          "field": 1,
          "direction": "ASCENDING",
          "nulls": "LAST"
        }
      ],
      "fetch": {
        "literal": 100,
        "type": "DECIMAL",
        "target_type": "INTEGER",
        "scale": 0,
        "precision": 3,
        "type_scale": 0,
        "type_precision": 10
      }
    }
  ]
}
2025-04-19T00:18:41.771151 I 39334 3 12 measure.h:77 Timer start                  executeRelAlgQuery                  executeRelAlgQuery:  573
2025-04-19T00:18:41.771165 I 39334 3 12 measure.h:77 Timer start           executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612
2025-04-19T00:18:41.771573 1 39334 3 12 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_63 # Strings: 10 Hash table size: 256 Fill rate: 3.90625% Collisions: 0
2025-04-19T00:18:41.771588 I 39334 3 12 Catalog.cpp:2035 Time to load Dictionary 1_63 was 0ms
2025-04-19T00:18:41.771722 1 39334 3 12 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_106 # Strings: 1 Hash table size: 256 Fill rate: 0.390625% Collisions: 0
2025-04-19T00:18:41.771734 I 39334 3 12 Catalog.cpp:2035 Time to load Dictionary 1_106 was 0ms
2025-04-19T00:18:41.771870 1 39334 3 12 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_105 # Strings: 1 Hash table size: 256 Fill rate: 0.390625% Collisions: 0
2025-04-19T00:18:41.771884 I 39334 3 12 Catalog.cpp:2035 Time to load Dictionary 1_105 was 0ms
2025-04-19T00:18:41.772070 1 39334 3 12 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_38 # Strings: 1846 Hash table size: 4096 Fill rate: 45.0684% Collisions: 717
2025-04-19T00:18:41.772082 I 39334 3 12 Catalog.cpp:2035 Time to load Dictionary 1_38 was 0ms
2025-04-19T00:18:41.772211 1 39334 3 12 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_39 # Strings: 51 Hash table size: 256 Fill rate: 19.9219% Collisions: 8
2025-04-19T00:18:41.772228 I 39334 3 12 Catalog.cpp:2035 Time to load Dictionary 1_39 was 0ms
2025-04-19T00:18:41.772362 1 39334 3 12 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_62 # Strings: 99 Hash table size: 256 Fill rate: 38.6719% Collisions: 32
2025-04-19T00:18:41.772373 I 39334 3 12 Catalog.cpp:2035 Time to load Dictionary 1_62 was 0ms
2025-04-19T00:18:41.772499 1 39334 3 12 QueryPlanDagExtractor.cpp:90 Stop DAG extraction (Detect RelLogicalUnion node)
2025-04-19T00:18:41.772514 1 39334 3 12 QueryPlanDagExtractor.cpp:90 Stop DAG extraction (Detect RelLogicalUnion node)
2025-04-19T00:18:41.772528 1 39334 3 12 QueryPlanDagExtractor.cpp:90 Stop DAG extraction (Detect RelLogicalUnion node)
2025-04-19T00:18:41.772543 1 39334 3 12 QueryPlanDagExtractor.cpp:90 Stop DAG extraction (Detect RelLogicalUnion node)
2025-04-19T00:18:41.772559 1 39334 3 12 QueryPlanDagExtractor.cpp:90 Stop DAG extraction (Detect RelLogicalUnion node)
2025-04-19T00:18:41.772575 I 39334 3 12 measure.h:77 Timer start                    executeRelAlgSeq                    executeRelAlgSeq:  895
2025-04-19T00:18:41.772582 1 39334 3 12 RelAlgExecutor.cpp:945 Executing query step 0 / 0
2025-04-19T00:18:41.772588 I 39334 3 12 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:41.772614 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:18:41.772619 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(7, operands=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(1999 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(date_dim.d_moy) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) , agg_exps=, scalar_sources=RexOperator(11, operands=RexInput(date_dim.d_month_seq) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["EXPR$0"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:18:41.772650 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(7, operands=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(1999 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(date_dim.d_moy) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) , agg_exps=, scalar_sources=RexOperator(11, operands=RexInput(date_dim.d_month_seq) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["EXPR$0"], is_agg=1 input_col_descs_unique.size()=3 source_used_inputs.size()=0
2025-04-19T00:18:41.772670 3 39334 3 12 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(8),nest_level(0)))
2025-04-19T00:18:41.772675 3 39334 3 12 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(8),nest_level(0))))
2025-04-19T00:18:41.772713 3 39334 3 12 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(7, operands=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(1999 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(date_dim.d_moy) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) , agg_exps=, scalar_sources=RexOperator(11, operands=RexInput(date_dim.d_month_seq) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["EXPR$0"], is_agg=1) = 2
2025-04-19T00:18:41.772756 I 39334 3 12 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:41.772765 3 39334 3 12 RelAlgExecutor.cpp:3692 body->getId()=27 body->toString()=RelCompound, filter_expr=RexOperator(7, operands=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(1999 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(date_dim.d_moy) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) , agg_exps=, scalar_sources=RexOperator(11, operands=RexInput(date_dim.d_month_seq) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["EXPR$0"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:41.772827 1 39334 3 12 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:41.772832 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 17479625411608308998
	Table/Col/Levels: ((db_id: 1, table_id: 8), 4, 0) ((db_id: 1, table_id: 8), 7, 0) ((db_id: 1, table_id: 8), 9, 0) 
	Simple Quals: (= (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1999) ) , (= (ColumnVar (db_id: 1, table_id: 8, column_id: 9), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1) ) 
	Group By: (+ (ColumnVar (db_id: 1, table_id: 8, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1) ) 
	Projected targets: (Var (db_id: 0, table_id: 0, column_id: 0), rte: -1, which_row: 3, varno: 1) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:41.772850 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:41.772874 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:41.773818 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:41.773830 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:41.773932 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:18:41.773942 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 2 / literal buffer usage: 8 bytes
2025-04-19T00:18:41.774271 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8, i8* %literals, i16 0
  %7 = bitcast i8* %6 to i32*
  %literal_0 = load i32, i32* %7, align 4
  %8 = getelementptr i8, i8* %literals, i16 4
  %9 = bitcast i8* %8 to i32*
  %literal_4 = load i32, i32* %9, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %10 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %11 = call i32 @pos_start_impl(i32* %row_index_resume)
  %12 = call i32 @pos_step_impl()
  %13 = call i32 @group_buff_idx_impl()
  %14 = sext i32 %11 to i64
  %15 = getelementptr i64*, i64** %group_by_buffers, i32 %13
  %col_buffer = load i64*, i64** %15, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %16 = icmp slt i64 %14, %row_count
  br i1 %16, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %17 = sext i32 %12 to i64
  br label %.forbody

.forbody:                                         ; preds = %26, %.loop.preheader
  %pos = phi i64 [ %14, %.loop.preheader ], [ %27, %26 ]
  %18 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_4, i32 %literal_0)
  %19 = lshr i64 %pos, 15
  %20 = and i64 %19, 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %22 = call i1 @check_interrupt()
  %23 = select i1 %22, i32 10, i32 %18
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %24 = phi i32 [ %23, %.interrupt_check ], [ %18, %.forbody ]
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %.error_exit, label %26

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %24, i32* %error_code)
  ret void

26:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %27 = add i64 %pos, %17
  %28 = icmp slt i64 %27, %row_count
  br i1 %28, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %26
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i8* %col_buf2, i8* %col_buf0, i64* %group_by_buff, i32 %arg_literal_4, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i8* %col_buf2, i8* %col_buf0, i64* %group_by_buff, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  %7 = call i8 @eq_int32_t_nullable_lhs(i32 %6, i32 %arg_literal_4, i64 -2147483648, i8 -128)
  %8 = icmp sgt i8 %7, 0
  %9 = and i1 %4, %8
  br i1 %9, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %10 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %11 = trunc i64 %10 to i32
  %12 = call i32 @add_int32_t_nullable_lhs(i32 %11, i32 %arg_literal_4, i64 -2147483648)
  %13 = sext i32 %12 to i64
  %14 = call i64* @get_group_value_fast(i64* %group_by_buff, i64 %13, i64 1, i64 0, i32 2)
  %15 = bitcast i64* %14 to i32*
  %agg_col_ptr = getelementptr i32, i32* %15, i64 0
  call void @agg_id_int32_shared(i32* %agg_col_ptr, i32 %12)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:41.775036 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:41.788641 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.075917
2025-04-19T00:18:41.887521 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 20.2712
2025-04-19T00:18:41.888293 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 20.5152
2025-04-19T00:18:41.903331 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 33.95
2025-04-19T00:18:41.920317 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     104 bytes stack frame, 104 bytes spill stores, 104 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 56 registers, 168 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:41.920350 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 456416 bytes
2025-04-19T00:18:41.921012 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:41.921221 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 148 ms
2025-04-19T00:18:41.921303 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:41.921310 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Perfect Hash
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 4 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: True
	Lazy Init Groups (GPU): True
	Entry Count: 2401
	Min Val (perfect hash only): 1
	Max Val (perfect hash only): 2401
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:41.921406 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:41.921437 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:41.921503 I 39334 3 13 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:41.921513 I 39334 3 13 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:41.921641 1 39334 3 13 CudaMgr.cpp:35 CUDA Error (2): out of memory
2025-04-19T00:18:41.921648 1 39334 3 13 CudaMgr.cpp:36  0# CudaMgr_Namespace::CudaErrorException::CudaErrorException(cudaError_enum) in /opt/heavyai/bin/heavydb
 1# 0x0000000001CE9716 in /opt/heavyai/bin/heavydb
 2# Buffer_Namespace::GpuCudaBufferMgr::addSlab(unsigned long) in /opt/heavyai/bin/heavydb
 3# Buffer_Namespace::BufferMgr::findFreeBuffer(unsigned long) in /opt/heavyai/bin/heavydb
 4# Buffer_Namespace::BufferMgr::reserveBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>&, unsigned long) in /opt/heavyai/bin/heavydb
 5# Buffer_Namespace::Buffer::reserve(unsigned long) in /opt/heavyai/bin/heavydb
 6# Buffer_Namespace::Buffer::Buffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 7# Buffer_Namespace::GpuCudaBuffer::GpuCudaBuffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, CudaMgr_Namespace::CudaMgr*, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 8# Buffer_Namespace::GpuCudaBufferMgr::allocateBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 9# Buffer_Namespace::BufferMgr::createBuffer(std::vector<int, std::allocator<int> > const&, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
10# Buffer_Namespace::BufferMgr::getBuffer(std::vector<int, std::allocator<int> > const&, unsigned long) in /opt/heavyai/bin/heavydb
11# Data_Namespace::DataMgr::getChunkBuffer(std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long) in /opt/heavyai/bin/heavydb
12# Chunk_NS::Chunk::getChunkBuffer(Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
13# Chunk_NS::Chunk::getChunk(ColumnDescriptor const*, Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long, bool) in /opt/heavyai/bin/heavydb
14# ColumnFetcher::getOneTableColumnFragment(shared::TableKey const&, int, int, std::map<shared::TableKey, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*, std::less<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*> > > const&, std::__cxx11::list<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::__cxx11::list<ChunkIter, std::allocator<ChunkIter> >&, Data_Namespace::MemoryLevel, int, DeviceAllocator*) const in /opt/heavyai/bin/heavydb
15# Executor::fetchChunks(ColumnFetcher const&, RelAlgExecutionUnit const&, int, Data_Namespace::MemoryLevel, std::map<shared::TableKey, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*, std::less<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*> > > const&, std::vector<FragmentsPerTable, std::allocator<FragmentsPerTable> > const&, std::__cxx11::list<ChunkIter, std::allocator<ChunkIter> >&, std::__cxx11::list<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, DeviceAllocator*, unsigned long, bool) in /opt/heavyai/bin/heavydb
16# ExecutionKernel::runImpl(Executor*, unsigned long, SharedKernelContext&) in /opt/heavyai/bin/heavydb
17# ExecutionKernel::run(Executor*, unsigned long, SharedKernelContext&) in /opt/heavyai/bin/heavydb
18# 0x00000000024EC270 in /opt/heavyai/bin/heavydb
19# tbb::detail::r1::task_dispatcher::execute_and_wait(tbb::detail::d1::task*, tbb::detail::d1::wait_context&, tbb::detail::d1::task_group_context&) in /opt/heavyai/bin/heavydb
20# 0x00000000024B4E16 in /opt/heavyai/bin/heavydb
21# tbb::detail::r1::task_arena_impl::execute(tbb::detail::d1::task_arena_base&, tbb::detail::d1::delegate_base&) in /opt/heavyai/bin/heavydb
22# Executor::launchKernelsImpl(SharedKernelContext&, std::vector<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> >, std::allocator<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> > > >&&, ExecutorDeviceType, unsigned long) in /opt/heavyai/bin/heavydb
23# Executor::launchKernelsViaResourceMgr(SharedKernelContext&, std::vector<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> >, std::allocator<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> > > >&&, ExecutorDeviceType, std::vector<InputDescriptor, std::allocator<InputDescriptor> > const&, QueryMemoryDescriptor const&) in /opt/heavyai/bin/heavydb
24# Executor::executeWorkUnitImpl(unsigned long&, bool, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, std::shared_ptr<RowSetMemoryOwner>, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
25# Executor::executeWorkUnit(unsigned long&, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
26# 0x000000000275DC7E in /opt/heavyai/bin/heavydb
27# RelAlgExecutor::executeWorkUnit(RelAlgExecutor::WorkUnit const&, std::vector<TargetMetaInfo, std::allocator<TargetMetaInfo> > const&, bool, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, std::optional<unsigned long>) in /opt/heavyai/bin/heavydb
28# RelAlgExecutor::executeCompound(RelCompound const*, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
29# RelAlgExecutor::executeRelAlgStep(RaExecutionSequence const&, unsigned long, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
30# RelAlgExecutor::executeRelAlgSeq(RaExecutionSequence const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, bool) in /opt/heavyai/bin/heavydb
31# RelAlgExecutor::executeRelAlgQueryNoRetry(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
32# RelAlgExecutor::executeRelAlgQuery(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
33# DBHandler::execute_rel_alg(ExecutionResult&, query_state::QueryStateProxy, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, ExecutorDeviceType, int, int, bool, bool, ExplainInfo const&, std::optional<unsigned long>) const in /opt/heavyai/bin/heavydb
34# 0x000000000215E287 in /opt/heavyai/bin/heavydb
35# 0x000000000215EA14 in /opt/heavyai/bin/heavydb
36# 0x000000000215F87B in /opt/heavyai/bin/heavydb
37# 0x0000730D88A99EE8 in /lib/x86_64-linux-gnu/libc.so.6
38# 0x00000000020F3DF3 in /opt/heavyai/bin/heavydb
39# QueryDispatchQueue::worker(unsigned long) in /opt/heavyai/bin/heavydb
40# 0x000000000A62E230 in /opt/heavyai/bin/heavydb
41# 0x0000730D88A94AC3 in /lib/x86_64-linux-gnu/libc.so.6
42# 0x0000730D88B26850 in /lib/x86_64-linux-gnu/libc.so.6
2025-04-19T00:18:41.968147 1 39334 3 13 BufferMgr.h:55 Failed to allocate 3672899584 bytes with condition FailedToCreateSlab
2025-04-19T00:18:41.968156 1 39334 3 13 BufferMgr.h:56  0# OutOfMemory::OutOfMemory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) in /opt/heavyai/bin/heavydb
 1# FailedToCreateSlab::FailedToCreateSlab(unsigned long) in /opt/heavyai/bin/heavydb
 2# 0x0000000001BCAFF3 in /opt/heavyai/bin/heavydb
 3# Buffer_Namespace::BufferMgr::findFreeBuffer(unsigned long) in /opt/heavyai/bin/heavydb
 4# Buffer_Namespace::BufferMgr::reserveBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>&, unsigned long) in /opt/heavyai/bin/heavydb
 5# Buffer_Namespace::Buffer::reserve(unsigned long) in /opt/heavyai/bin/heavydb
 6# Buffer_Namespace::Buffer::Buffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 7# Buffer_Namespace::GpuCudaBuffer::GpuCudaBuffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, CudaMgr_Namespace::CudaMgr*, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 8# Buffer_Namespace::GpuCudaBufferMgr::allocateBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 9# Buffer_Namespace::BufferMgr::createBuffer(std::vector<int, std::allocator<int> > const&, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
10# Buffer_Namespace::BufferMgr::getBuffer(std::vector<int, std::allocator<int> > const&, unsigned long) in /opt/heavyai/bin/heavydb
11# Data_Namespace::DataMgr::getChunkBuffer(std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long) in /opt/heavyai/bin/heavydb
12# Chunk_NS::Chunk::getChunkBuffer(Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
13# Chunk_NS::Chunk::getChunk(ColumnDescriptor const*, Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long, bool) in /opt/heavyai/bin/heavydb
14# ColumnFetcher::getOneTableColumnFragment(shared::TableKey const&, int, int, std::map<shared::TableKey, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*, std::less<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*> > > const&, std::__cxx11::list<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::__cxx11::list<ChunkIter, std::allocator<ChunkIter> >&, Data_Namespace::MemoryLevel, int, DeviceAllocator*) const in /opt/heavyai/bin/heavydb
15# Executor::fetchChunks(ColumnFetcher const&, RelAlgExecutionUnit const&, int, Data_Namespace::MemoryLevel, std::map<shared::TableKey, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*, std::less<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*> > > const&, std::vector<FragmentsPerTable, std::allocator<FragmentsPerTable> > const&, std::__cxx11::list<ChunkIter, std::allocator<ChunkIter> >&, std::__cxx11::list<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, DeviceAllocator*, unsigned long, bool) in /opt/heavyai/bin/heavydb
16# ExecutionKernel::runImpl(Executor*, unsigned long, SharedKernelContext&) in /opt/heavyai/bin/heavydb
17# ExecutionKernel::run(Executor*, unsigned long, SharedKernelContext&) in /opt/heavyai/bin/heavydb
18# 0x00000000024EC270 in /opt/heavyai/bin/heavydb
19# tbb::detail::r1::task_dispatcher::execute_and_wait(tbb::detail::d1::task*, tbb::detail::d1::wait_context&, tbb::detail::d1::task_group_context&) in /opt/heavyai/bin/heavydb
20# 0x00000000024B4E16 in /opt/heavyai/bin/heavydb
21# tbb::detail::r1::task_arena_impl::execute(tbb::detail::d1::task_arena_base&, tbb::detail::d1::delegate_base&) in /opt/heavyai/bin/heavydb
22# Executor::launchKernelsImpl(SharedKernelContext&, std::vector<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> >, std::allocator<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> > > >&&, ExecutorDeviceType, unsigned long) in /opt/heavyai/bin/heavydb
23# Executor::launchKernelsViaResourceMgr(SharedKernelContext&, std::vector<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> >, std::allocator<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> > > >&&, ExecutorDeviceType, std::vector<InputDescriptor, std::allocator<InputDescriptor> > const&, QueryMemoryDescriptor const&) in /opt/heavyai/bin/heavydb
24# Executor::executeWorkUnitImpl(unsigned long&, bool, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, std::shared_ptr<RowSetMemoryOwner>, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
25# Executor::executeWorkUnit(unsigned long&, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
26# 0x000000000275DC7E in /opt/heavyai/bin/heavydb
27# RelAlgExecutor::executeWorkUnit(RelAlgExecutor::WorkUnit const&, std::vector<TargetMetaInfo, std::allocator<TargetMetaInfo> > const&, bool, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, std::optional<unsigned long>) in /opt/heavyai/bin/heavydb
28# RelAlgExecutor::executeCompound(RelCompound const*, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
29# RelAlgExecutor::executeRelAlgStep(RaExecutionSequence const&, unsigned long, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
30# RelAlgExecutor::executeRelAlgSeq(RaExecutionSequence const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, bool) in /opt/heavyai/bin/heavydb
31# RelAlgExecutor::executeRelAlgQueryNoRetry(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
32# RelAlgExecutor::executeRelAlgQuery(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
33# DBHandler::execute_rel_alg(ExecutionResult&, query_state::QueryStateProxy, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, ExecutorDeviceType, int, int, bool, bool, ExplainInfo const&, std::optional<unsigned long>) const in /opt/heavyai/bin/heavydb
34# 0x000000000215E287 in /opt/heavyai/bin/heavydb
35# 0x000000000215EA14 in /opt/heavyai/bin/heavydb
36# 0x000000000215F87B in /opt/heavyai/bin/heavydb
37# 0x0000730D88A99EE8 in /lib/x86_64-linux-gnu/libc.so.6
38# 0x00000000020F3DF3 in /opt/heavyai/bin/heavydb
39# QueryDispatchQueue::worker(unsigned long) in /opt/heavyai/bin/heavydb
40# 0x000000000A62E230 in /opt/heavyai/bin/heavydb
41# 0x0000730D88A94AC3 in /lib/x86_64-linux-gnu/libc.so.6
42# 0x0000730D88B26850 in /lib/x86_64-linux-gnu/libc.so.6
2025-04-19T00:18:42.014153 I 39334 3 13 BufferMgr.cpp:322 ALLOCATION Attempted slab of 7173632 pages (3672899584B) failed GPU_MGR:0
2025-04-19T00:18:42.014450 I 39334 3 13 BufferMgr.cpp:309 ALLOCATION slab of 3586816 pages (1836449792B) created in 0 ms GPU_MGR:0
2025-04-19T00:18:42.014462 1 39334 3 13 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,4,0,
2025-04-19T00:18:42.014488 I 39334 3 13 BufferMgr.cpp:309 ALLOCATION slab of 8388608 pages (4294967296B) created in 0 ms CPU_MGR:0
2025-04-19T00:18:42.014494 1 39334 3 13 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,4,0,
2025-04-19T00:18:42.014716 1 39334 3 13 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,7,0,
2025-04-19T00:18:42.014724 1 39334 3 13 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,7,0,
2025-04-19T00:18:42.014902 1 39334 3 13 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,9,0,
2025-04-19T00:18:42.014912 1 39334 3 13 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,9,0,
2025-04-19T00:18:42.015077 I 39334 3 13 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 93 ms
2025-04-19T00:18:42.015237 I 39334 3 13 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:42.015245 2 39334 3 13 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(8),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(8),nest_level(0)))) ra_exe_unit.scan_limit=0 num_rows=((73049)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=2401 device_id=0 outer_table_key=(db_id: 1, table_id: 8) scan_limit=0 start_rowid=0 num_tables=1
2025-04-19T00:18:42.015258 I 39334 3 13 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:42.015393 1 39334 3 13 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.094752 ms
2025-04-19T00:18:42.015403 1 39334 3 13 GpuInterrupt.cpp:26 Registered module 0x730d20570390 on device 0
2025-04-19T00:18:42.016373 1 39334 3 13 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 1 ms
2025-04-19T00:18:42.016388 1 39334 3 13 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:42.016393 1 39334 3 13 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:42.016463 1 39334 3 13 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:42.017434 1 39334 3 13 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:42.017452 1 39334 3 13 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:42.017457 I 39334 3 13 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 2 ms
2025-04-19T00:18:42.017998 3 39334 3 13 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:18:42.018070 3 39334 3 13 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i64*
  %row_ptr_loaded = load i64, i64* %0, align 8
  %is_key_empty = icmp eq i64 %row_ptr_loaded, 9223372036854775807
  ret i1 %is_key_empty
}
2025-04-19T00:18:42.018096 3 39334 3 13 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %this_row_ptr, i8* %that_row_ptr, i32 8, i1 false)
  %this_targets_start = getelementptr i8, i8* %this_row_ptr, i32 8
  %that_targets_start = getelementptr i8, i8* %that_row_ptr, i32 8
  %0 = bitcast i8* %that_targets_start to i64*
  %that_targets_start_loaded = load i64, i64* %0, align 8
  call void @write_projection_int64(i8* %this_targets_start, i64 %that_targets_start_loaded, i64 0)
  ret i32 0
}
2025-04-19T00:18:42.018130 3 39334 3 13 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %entry_idx_64 = sext i32 %that_entry_idx to i64
  %row_off_in_bytes = mul i64 %entry_idx_64, 16
  %this_row_ptr = getelementptr i8, i8* %this_buff, i64 %row_off_in_bytes
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %row_off_in_bytes
  %0 = call i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:18:42.021177 2 39334 3 13 Execute.cpp:4139 results->rowCount()=1
2025-04-19T00:18:42.021218 I 39334 3 13 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 5 ms
2025-04-19T00:18:42.021261 I 39334 3 13 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 99 ms
2025-04-19T00:18:42.021312 1 39334 3 12 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:42.021329 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 248 ms
2025-04-19T00:18:42.021348 I 39334 3 12 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 248 ms
2025-04-19T00:18:42.021359 3 39334 3 12 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-27, ...) exec_desc.getResult().getDataPtr()->rowCount()=1
2025-04-19T00:18:42.021385 I 39334 3 12 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 248 ms
2025-04-19T00:18:42.021393 I 39334 3 12 measure.h:84 Timer end                      executeRelAlgSeq                    executeRelAlgSeq:  895 elapsed 248 ms
2025-04-19T00:18:42.021424 I 39334 3 12 measure.h:77 Timer start                    executeRelAlgSeq                    executeRelAlgSeq:  895
2025-04-19T00:18:42.021430 1 39334 3 12 RelAlgExecutor.cpp:945 Executing query step 0 / 0
2025-04-19T00:18:42.021436 I 39334 3 12 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:42.021450 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:18:42.021454 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(7, operands=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(1999 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(date_dim.d_moy) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) , agg_exps=, scalar_sources=RexOperator(11, operands=RexInput(date_dim.d_month_seq) RexLiteral(3 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["EXPR$0"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:18:42.021492 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(7, operands=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(1999 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(date_dim.d_moy) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) , agg_exps=, scalar_sources=RexOperator(11, operands=RexInput(date_dim.d_month_seq) RexLiteral(3 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["EXPR$0"], is_agg=1 input_col_descs_unique.size()=3 source_used_inputs.size()=0
2025-04-19T00:18:42.021511 3 39334 3 12 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(8),nest_level(0)))
2025-04-19T00:18:42.021516 3 39334 3 12 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(8),nest_level(0))))
2025-04-19T00:18:42.021538 3 39334 3 12 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(7, operands=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(1999 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(date_dim.d_moy) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) , agg_exps=, scalar_sources=RexOperator(11, operands=RexInput(date_dim.d_month_seq) RexLiteral(3 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["EXPR$0"], is_agg=1) = 2
2025-04-19T00:18:42.021571 I 39334 3 12 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:42.021580 3 39334 3 12 RelAlgExecutor.cpp:3692 body->getId()=32 body->toString()=RelCompound, filter_expr=RexOperator(7, operands=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(1999 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexOperator(0, operands=RexInput(date_dim.d_moy) RexLiteral(1 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) , agg_exps=, scalar_sources=RexOperator(11, operands=RexInput(date_dim.d_month_seq) RexLiteral(3 type=DECIMAL(1,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["EXPR$0"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:42.021617 1 39334 3 12 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:42.021622 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 10076749034792845934
	Table/Col/Levels: ((db_id: 1, table_id: 8), 4, 0) ((db_id: 1, table_id: 8), 7, 0) ((db_id: 1, table_id: 8), 9, 0) 
	Simple Quals: (= (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1999) ) , (= (ColumnVar (db_id: 1, table_id: 8, column_id: 9), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1) ) 
	Group By: (+ (ColumnVar (db_id: 1, table_id: 8, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 3) ) 
	Projected targets: (Var (db_id: 0, table_id: 0, column_id: 0), rte: -1, which_row: 3, varno: 1) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:42.021636 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:42.021646 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:42.022243 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:42.022254 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:42.022330 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:18:42.022340 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 3 / literal buffer usage: 12 bytes
2025-04-19T00:18:42.022583 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8, i8* %literals, i16 0
  %7 = bitcast i8* %6 to i32*
  %literal_0 = load i32, i32* %7, align 4
  %8 = getelementptr i8, i8* %literals, i16 4
  %9 = bitcast i8* %8 to i32*
  %literal_4 = load i32, i32* %9, align 4
  %10 = getelementptr i8, i8* %literals, i16 8
  %11 = bitcast i8* %10 to i32*
  %literal_8 = load i32, i32* %11, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %12 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %13 = call i32 @pos_start_impl(i32* %row_index_resume)
  %14 = call i32 @pos_step_impl()
  %15 = call i32 @group_buff_idx_impl()
  %16 = sext i32 %13 to i64
  %17 = getelementptr i64*, i64** %group_by_buffers, i32 %15
  %col_buffer = load i64*, i64** %17, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %18 = icmp slt i64 %16, %row_count
  br i1 %18, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %19 = sext i32 %14 to i64
  br label %.forbody

.forbody:                                         ; preds = %28, %.loop.preheader
  %pos = phi i64 [ %16, %.loop.preheader ], [ %29, %28 ]
  %20 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_8, i32 %literal_4, i32 %literal_0)
  %21 = lshr i64 %pos, 15
  %22 = and i64 %21, 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %24 = call i1 @check_interrupt()
  %25 = select i1 %24, i32 10, i32 %20
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %26 = phi i32 [ %25, %.interrupt_check ], [ %20, %.forbody ]
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %.error_exit, label %28

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %26, i32* %error_code)
  ret void

28:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %29 = add i64 %pos, %19
  %30 = icmp slt i64 %29, %row_count
  br i1 %30, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %28
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i8* %col_buf2, i8* %col_buf0, i64* %group_by_buff, i32 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i8* %col_buf2, i8* %col_buf0, i64* %group_by_buff, i32 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  %7 = call i8 @eq_int32_t_nullable_lhs(i32 %6, i32 %arg_literal_4, i64 -2147483648, i8 -128)
  %8 = icmp sgt i8 %7, 0
  %9 = and i1 %4, %8
  br i1 %9, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %10 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %11 = trunc i64 %10 to i32
  %12 = call i32 @add_int32_t_nullable_lhs(i32 %11, i32 %arg_literal_8, i64 -2147483648)
  %13 = sext i32 %12 to i64
  %14 = call i64* @get_group_value_fast(i64* %group_by_buff, i64 %13, i64 3, i64 0, i32 2)
  %15 = bitcast i64* %14 to i32*
  %agg_col_ptr = getelementptr i32, i32* %15, i64 0
  call void @agg_id_int32_shared(i32* %agg_col_ptr, i32 %12)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:42.022768 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:42.033972 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.077174
2025-04-19T00:18:42.101174 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.5341
2025-04-19T00:18:42.101942 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.7843
2025-04-19T00:18:42.117016 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 29.2527
2025-04-19T00:18:42.134499 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     112 bytes stack frame, 108 bytes spill stores, 108 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 56 registers, 176 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:42.134532 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 456416 bytes
2025-04-19T00:18:42.135001 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:42.135213 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 113 ms
2025-04-19T00:18:42.135293 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:42.135299 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Perfect Hash
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 4 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: True
	Lazy Init Groups (GPU): True
	Entry Count: 2401
	Min Val (perfect hash only): 3
	Max Val (perfect hash only): 2403
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:42.135758 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:42.135802 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:42.135823 I 39334 3 14 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.135834 I 39334 3 14 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:42.135851 I 39334 3 14 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:42.135975 I 39334 3 14 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:42.135982 2 39334 3 14 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(8),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(8),nest_level(0)))) ra_exe_unit.scan_limit=0 num_rows=((73049)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=2401 device_id=0 outer_table_key=(db_id: 1, table_id: 8) scan_limit=0 start_rowid=0 num_tables=1
2025-04-19T00:18:42.136005 I 39334 3 14 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:42.136053 1 39334 3 14 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.017088 ms
2025-04-19T00:18:42.136063 1 39334 3 14 GpuInterrupt.cpp:26 Registered module 0x730d233a0100 on device 0
2025-04-19T00:18:42.136515 1 39334 3 14 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:42.136522 1 39334 3 14 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:42.136527 1 39334 3 14 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:42.136597 1 39334 3 14 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:42.137557 1 39334 3 14 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:42.137576 1 39334 3 14 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:42.137581 I 39334 3 14 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 1 ms
2025-04-19T00:18:42.137617 1 39334 3 14 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:42.137900 2 39334 3 14 Execute.cpp:4139 results->rowCount()=1
2025-04-19T00:18:42.137929 I 39334 3 14 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 1 ms
2025-04-19T00:18:42.137965 I 39334 3 14 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 2 ms
2025-04-19T00:18:42.138001 1 39334 3 12 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:42.138014 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 116 ms
2025-04-19T00:18:42.138030 I 39334 3 12 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 116 ms
2025-04-19T00:18:42.138042 3 39334 3 12 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-32, ...) exec_desc.getResult().getDataPtr()->rowCount()=1
2025-04-19T00:18:42.138067 I 39334 3 12 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 116 ms
2025-04-19T00:18:42.138074 I 39334 3 12 measure.h:84 Timer end                      executeRelAlgSeq                    executeRelAlgSeq:  895 elapsed 116 ms
2025-04-19T00:18:42.138084 I 39334 3 12 measure.h:77 Timer start                    executeRelAlgSeq                    executeRelAlgSeq:  895
2025-04-19T00:18:42.138090 1 39334 3 12 RelAlgExecutor.cpp:945 Executing query step 0 / 6
2025-04-19T00:18:42.138096 I 39334 3 12 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:42.138110 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:18:42.138115 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(web_sales.ws_sold_date_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"]) input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:18:42.138128 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(web_sales.ws_sold_date_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"]) input_col_descs_unique.size()=3 source_used_inputs.size()=0
2025-04-19T00:18:42.138137 3 39334 3 12 RelAlgExecutor.cpp:4896 input_descs=(InputDescriptor(db_id(1), table_id(23),nest_level(0)))
2025-04-19T00:18:42.138149 3 39334 3 12 RelAlgExecutor.cpp:4897 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(23),nest_level(0))))
2025-04-19T00:18:42.138159 3 39334 3 12 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelProject(RexInput(web_sales.ws_sold_date_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"])) = 3
2025-04-19T00:18:42.138182 I 39334 3 12 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:42.138191 3 39334 3 12 RelAlgExecutor.cpp:3692 body->getId()=4 body->toString()=RelProject(RexInput(web_sales.ws_sold_date_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"]) it==leaf_results_.end()=true
2025-04-19T00:18:42.138201 1 39334 3 12 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:18:42.138207 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 1895055608413782929
	Table/Col/Levels: ((db_id: 1, table_id: 23), 1, 0) ((db_id: 1, table_id: 23), 4, 0) ((db_id: 1, table_id: 23), 5, 0) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:42.138216 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:42.138225 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:42.138259 1 39334 3 12 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:18:42.138949 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:42.138960 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:42.138988 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:18:42.138998 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:42.139225 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %8 = sext i32 %pos_start to i64
  %9 = icmp slt i64 %8, %row_count
  br i1 %9, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %10 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %19, %.loop.preheader
  %pos = phi i64 [ %8, %.loop.preheader ], [ %20, %19 ]
  %11 = call i32 @row_func(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i64* %join_hash_tables, i8* %row_func_mgr)
  %12 = lshr i64 %pos, 15
  %13 = and i64 %12, 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %15 = call i1 @check_interrupt()
  %16 = select i1 %15, i32 10, i32 %11
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %17 = phi i32 [ %16, %.interrupt_check ], [ %11, %.for.body ]
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %.error_exit, label %19

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %17, i32* %error_code)
  ret void

19:                                               ; preds = %.error_check
  %20 = add nsw i64 %pos, %10
  %21 = icmp slt i64 %20, %row_count
  br i1 %21, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %19
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %22 = phi i64 [ %.pre.result, %._crit_edge ], [ %7, %.entry ]
  %23 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %24 = call i64 @agg_sum_shared(i64* %23, i64 %22)
  call void @sync_threadblock()
  %25 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %25, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %0 = call i32 @filter_func(i64* %out)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i64* %out) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:42.139395 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:42.149312 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.080596
2025-04-19T00:18:42.217263 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.5059
2025-04-19T00:18:42.218076 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.7605
2025-04-19T00:18:42.230652 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 27.0509
2025-04-19T00:18:42.247184 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_template
ptxas         .     80 bytes stack frame, 80 bytes spill stores, 80 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 42 registers, 136 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:42.247211 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 455328 bytes
2025-04-19T00:18:42.247639 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:42.247824 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 109 ms
2025-04-19T00:18:42.247879 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:42.247884 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:42.247974 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:42.248004 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:42.248022 I 39334 3 15 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.248032 I 39334 3 15 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:42.248046 1 39334 3 15 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,1,0,
2025-04-19T00:18:42.249941 1 39334 3 15 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,4,0,
2025-04-19T00:18:42.251800 1 39334 3 15 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 2877536, chunk key:  key: 1,23,5,0,
2025-04-19T00:18:42.253723 I 39334 3 15 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 5 ms
2025-04-19T00:18:42.253764 I 39334 3 15 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:42.253785 I 39334 3 15 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:42.253857 1 39334 3 15 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.014016 ms
2025-04-19T00:18:42.253870 1 39334 3 15 GpuInterrupt.cpp:26 Registered module 0x730d2070de50 on device 0
2025-04-19T00:18:42.253995 1 39334 3 15 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:18:42.254003 1 39334 3 15 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:42.254009 1 39334 3 15 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:42.254174 1 39334 3 15 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:42.254254 1 39334 3 15 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:42.254267 1 39334 3 15 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:42.254273 I 39334 3 15 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:42.254284 I 39334 3 15 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:42.254303 I 39334 3 15 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 6 ms
2025-04-19T00:18:42.254326 1 39334 3 12 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 719384
2025-04-19T00:18:42.255024 3 39334 3 12 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:18:42.255123 3 39334 3 12 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i64*
  %row_ptr_loaded = load i64, i64* %0, align 8
  %is_key_empty = icmp eq i64 %row_ptr_loaded, 9223372036854775807
  ret i1 %is_key_empty
}
2025-04-19T00:18:42.255160 3 39334 3 12 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_start = getelementptr i8, i8* %this_row_ptr, i32 0
  %that_targets_start = getelementptr i8, i8* %that_row_ptr, i32 0
  %count_dest = bitcast i8* %this_targets_start to i64*
  %0 = bitcast i8* %that_targets_start to i64*
  %that_targets_start_loaded = load i64, i64* %0, align 8
  %1 = call i64 @agg_sum(i64* %count_dest, i64 %that_targets_start_loaded)
  ret i32 0
}
2025-04-19T00:18:42.255192 3 39334 3 12 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %entry_idx_64 = sext i32 %that_entry_idx to i64
  %row_off_in_bytes = mul i64 %entry_idx_64, 8
  %this_row_ptr = getelementptr i8, i8* %this_buff, i64 %row_off_in_bytes
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %row_off_in_bytes
  %0 = call i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:18:42.257911 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 119 ms
2025-04-19T00:18:42.257936 1 39334 3 12 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 719384
2025-04-19T00:18:42.257960 1 39334 3 12 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:42.257966 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 1895055608413782929
	Table/Col/Levels: ((db_id: 1, table_id: 23), 1, 0) ((db_id: 1, table_id: 23), 4, 0) ((db_id: 1, table_id: 23), 5, 0) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 1, table_id: 23, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 23, column_id: 5), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 23, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 719384
	Bump Allocator: False
2025-04-19T00:18:42.257987 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:42.257999 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:42.258635 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:42.258656 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:42.258687 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:18:42.258697 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:42.258961 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %7 = call i32 @pos_start_impl(i32* %row_index_resume)
  %8 = call i32 @pos_step_impl()
  %9 = call i32 @group_buff_idx_impl()
  %10 = sext i32 %7 to i64
  %11 = getelementptr i64*, i64** %group_by_buffers, i32 %9
  %col_buffer = load i64*, i64** %11, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %12 = icmp slt i64 %10, %row_count
  br i1 %12, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %13 = sext i32 %8 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %10, %.loop.preheader ], [ %23, %filter_match ], [ %23, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %14 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i64* %join_hash_tables, i8* %row_func_mgr)
  %15 = lshr i64 %pos, 15
  %16 = and i64 %15, 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %18 = call i1 @check_interrupt()
  %19 = select i1 %18, i32 10, i32 %14
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %20 = phi i32 [ %19, %.interrupt_check ], [ %14, %.forbody ]
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %.error_exit, label %22

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %20, i32* %error_code)
  ret void

22:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %23 = add i64 %pos, %13
  %24 = icmp slt i64 %23, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %25 = icmp ne i32 %crt_matched1, 0
  br i1 %25, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %22
  %26 = load i32, i32* %old_total_matched, align 4
  %27 = add i32 %26, %crt_matched1
  %limit_not_reached = icmp slt i32 %27, %6
  %28 = and i1 %24, %limit_not_reached
  br i1 %28, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %22
  br i1 %24, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %0 = call i32 @filter_func(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos) #34 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %0 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %0, i32* %old_total_matched, align 4
  %1 = load i32, i32* %max_matched, align 4
  %2 = load i32, i32* %old_total_matched, align 4
  %3 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %1, i32 %2, i64 %pos, i32 1)
  %4 = icmp ne i64* %3, null
  br i1 %4, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %5 = trunc i64 %pos to i32
  %6 = sub i32 0, %5
  ret i32 %6
}

End of IR
2025-04-19T00:18:42.259154 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:42.269438 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.088209
2025-04-19T00:18:42.328713 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.7764
2025-04-19T00:18:42.329477 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.0023
2025-04-19T00:18:42.342590 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 26.7164
2025-04-19T00:18:42.358710 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     96 bytes stack frame, 96 bytes spill stores, 96 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 50 registers, 160 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:42.358751 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 455136 bytes
2025-04-19T00:18:42.359189 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:42.359374 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 101 ms
2025-04-19T00:18:42.359430 1 39334 3 12 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:42.359435 1 39334 3 12 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Target group by indices: 0,0,0
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 0 , 0
	col_to_slot_map=[[0], [1], [2]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 719384
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:42.359535 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:42.359563 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:42.359583 I 39334 3 16 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.359592 I 39334 3 16 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:42.359610 I 39334 3 16 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:42.359621 2 39334 3 16 ExecutionKernel.cpp:303 total_num_input_rows=719384
2025-04-19T00:18:42.359642 I 39334 3 16 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:42.359648 2 39334 3 16 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(23),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(23),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(23),nest_level(0)))) ra_exe_unit.scan_limit=719384 num_rows=((719384)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=719384 query_exe_context->query_mem_desc_.getEntryCount()=719384 device_id=0 outer_table_key=(db_id: 1, table_id: 23) scan_limit=719384 start_rowid=0 num_tables=1
2025-04-19T00:18:42.359660 I 39334 3 16 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:42.359705 1 39334 3 16 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.014240 ms
2025-04-19T00:18:42.359713 1 39334 3 16 GpuInterrupt.cpp:26 Registered module 0x730d206ae590 on device 0
2025-04-19T00:18:42.359952 1 39334 3 16 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:42.359963 1 39334 3 16 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:42.359968 1 39334 3 16 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:42.360651 1 39334 3 16 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:42.363539 1 39334 3 16 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:42.363557 1 39334 3 16 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 2 ms
2025-04-19T00:18:42.363563 I 39334 3 16 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 3 ms
2025-04-19T00:18:42.363583 2 39334 3 16 Execute.cpp:4139 results->rowCount()=719384
2025-04-19T00:18:42.363589 I 39334 3 16 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 3 ms
2025-04-19T00:18:42.363602 I 39334 3 16 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 4 ms
2025-04-19T00:18:42.363622 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 105 ms
2025-04-19T00:18:42.363642 I 39334 3 12 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 225 ms
2025-04-19T00:18:42.363652 3 39334 3 12 RelAlgExecutor.cpp:1262 Returned from executeProject(), addTemporaryTable(-4, ...) exec_desc.getResult().getDataPtr()->rowCount()=719384
2025-04-19T00:18:42.363659 I 39334 3 12 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 225 ms
2025-04-19T00:18:42.363667 1 39334 3 12 RelAlgExecutor.cpp:945 Executing query step 1 / 6
2025-04-19T00:18:42.363673 I 39334 3 12 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:42.363688 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:18:42.363693 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(catalog_sales.cs_sold_date_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"]) input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:18:42.363707 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(catalog_sales.cs_sold_date_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"]) input_col_descs_unique.size()=3 source_used_inputs.size()=0
2025-04-19T00:18:42.363716 3 39334 3 12 RelAlgExecutor.cpp:4896 input_descs=(InputDescriptor(db_id(1), table_id(4),nest_level(0)))
2025-04-19T00:18:42.363720 3 39334 3 12 RelAlgExecutor.cpp:4897 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(4),nest_level(0))))
2025-04-19T00:18:42.363731 3 39334 3 12 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelProject(RexInput(catalog_sales.cs_sold_date_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"])) = 3
2025-04-19T00:18:42.363755 I 39334 3 12 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:42.363764 3 39334 3 12 RelAlgExecutor.cpp:3692 body->getId()=2 body->toString()=RelProject(RexInput(catalog_sales.cs_sold_date_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"]) it==leaf_results_.end()=true
2025-04-19T00:18:42.363785 1 39334 3 12 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:18:42.363794 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 2463136221736815444
	Table/Col/Levels: ((db_id: 1, table_id: 4), 1, 0) ((db_id: 1, table_id: 4), 4, 0) ((db_id: 1, table_id: 4), 16, 0) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:42.363807 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:42.363817 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:42.363847 1 39334 3 12 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:18:42.364515 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:42.364524 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:42.364552 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 16
2025-04-19T00:18:42.364561 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:42.364784 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %8 = sext i32 %pos_start to i64
  %9 = icmp slt i64 %8, %row_count
  br i1 %9, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %10 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %19, %.loop.preheader
  %pos = phi i64 [ %8, %.loop.preheader ], [ %20, %19 ]
  %11 = call i32 @row_func(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i64* %join_hash_tables, i8* %row_func_mgr)
  %12 = lshr i64 %pos, 15
  %13 = and i64 %12, 16
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %15 = call i1 @check_interrupt()
  %16 = select i1 %15, i32 10, i32 %11
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %17 = phi i32 [ %16, %.interrupt_check ], [ %11, %.for.body ]
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %.error_exit, label %19

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %17, i32* %error_code)
  ret void

19:                                               ; preds = %.error_check
  %20 = add nsw i64 %pos, %10
  %21 = icmp slt i64 %20, %row_count
  br i1 %21, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %19
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %22 = phi i64 [ %.pre.result, %._crit_edge ], [ %7, %.entry ]
  %23 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %24 = call i64 @agg_sum_shared(i64* %23, i64 %22)
  call void @sync_threadblock()
  %25 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %25, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %0 = call i32 @filter_func(i64* %out)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i64* %out) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:42.364948 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:42.374338 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.0748
2025-04-19T00:18:42.433029 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.7654
2025-04-19T00:18:42.433786 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.0018
2025-04-19T00:18:42.447001 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 26.8603
2025-04-19T00:18:42.463191 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_template
ptxas         .     80 bytes stack frame, 80 bytes spill stores, 80 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 42 registers, 136 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:42.463222 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 455328 bytes
2025-04-19T00:18:42.463727 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:42.463920 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 100 ms
2025-04-19T00:18:42.463973 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:42.463978 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:42.464055 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:42.464082 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:42.464101 I 39334 3 17 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.464111 I 39334 3 17 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:42.464126 1 39334 3 17 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,1,0,
2025-04-19T00:18:42.467823 1 39334 3 17 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,4,0,
2025-04-19T00:18:42.473428 1 39334 3 17 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 5766192, chunk key:  key: 1,4,16,0,
2025-04-19T00:18:42.478746 I 39334 3 17 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 14 ms
2025-04-19T00:18:42.478802 I 39334 3 17 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:42.478822 I 39334 3 17 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:42.478876 1 39334 3 17 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.011072 ms
2025-04-19T00:18:42.478889 1 39334 3 17 GpuInterrupt.cpp:26 Registered module 0x730d206b29f0 on device 0
2025-04-19T00:18:42.479017 1 39334 3 17 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:18:42.479026 1 39334 3 17 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:42.479032 1 39334 3 17 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:42.479203 1 39334 3 17 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:42.479289 1 39334 3 17 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:42.479304 1 39334 3 17 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:42.479309 I 39334 3 17 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:42.479321 I 39334 3 17 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:42.479333 I 39334 3 17 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 15 ms
2025-04-19T00:18:42.479360 1 39334 3 12 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 1441548
2025-04-19T00:18:42.479401 1 39334 3 12 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:42.479420 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 115 ms
2025-04-19T00:18:42.479438 1 39334 3 12 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 1441548
2025-04-19T00:18:42.479444 1 39334 3 12 RelAlgExecutor.cpp:3825 Using columnar layout for projection as output size of 1441548 rows exceeds threshold of 1000000 or some target uses FlatBuffer memory layout.
2025-04-19T00:18:42.479465 1 39334 3 12 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:42.479471 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 2463136221736815444
	Table/Col/Levels: ((db_id: 1, table_id: 4), 1, 0) ((db_id: 1, table_id: 4), 4, 0) ((db_id: 1, table_id: 4), 16, 0) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 1, table_id: 4, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 4, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 4, column_id: 16), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 1441548
	Bump Allocator: False
2025-04-19T00:18:42.479496 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:42.479517 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:42.480359 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:42.480371 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:42.480406 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 16
2025-04-19T00:18:42.480416 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:42.480668 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %7 = call i32 @pos_start_impl(i32* %row_index_resume)
  %8 = call i32 @pos_step_impl()
  %9 = call i32 @group_buff_idx_impl()
  %10 = sext i32 %7 to i64
  %11 = getelementptr i64*, i64** %group_by_buffers, i32 %9
  %col_buffer = load i64*, i64** %11, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %12 = icmp slt i64 %10, %row_count
  br i1 %12, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %13 = sext i32 %8 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %10, %.loop.preheader ], [ %23, %filter_match ], [ %23, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %14 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i64* %join_hash_tables, i8* %row_func_mgr)
  %15 = lshr i64 %pos, 15
  %16 = and i64 %15, 16
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %18 = call i1 @check_interrupt()
  %19 = select i1 %18, i32 10, i32 %14
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %20 = phi i32 [ %19, %.interrupt_check ], [ %14, %.forbody ]
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %.error_exit, label %22

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %20, i32* %error_code)
  ret void

22:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %23 = add i64 %pos, %13
  %24 = icmp slt i64 %23, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %25 = icmp ne i32 %crt_matched1, 0
  br i1 %25, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %22
  %26 = load i32, i32* %old_total_matched, align 4
  %27 = add i32 %26, %crt_matched1
  %limit_not_reached = icmp slt i32 %27, %6
  %28 = and i1 %24, %limit_not_reached
  br i1 %28, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %22
  br i1 %24, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %0 = call i32 @filter_func(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos) #34 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %0 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %0, i32* %old_total_matched, align 4
  %1 = load i32, i32* %max_matched, align 4
  %2 = load i32, i32* %old_total_matched, align 4
  %3 = call i32 @get_columnar_scan_output_offset(i64* %group_by_buff, i32 %1, i32 %2, i64 %pos)
  %4 = icmp sge i32 %3, 0
  br i1 %4, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %out_buff_b_stream = bitcast i64* %group_by_buff to i8*
  %out_row_idx = zext i32 %3 to i64
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %5 = trunc i64 %pos to i32
  %6 = sub i32 0, %5
  ret i32 %6
}

End of IR
2025-04-19T00:18:42.480881 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:42.491494 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.084438
2025-04-19T00:18:42.551554 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.7234
2025-04-19T00:18:42.552318 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 14.949
2025-04-19T00:18:42.565702 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 26.9019
2025-04-19T00:18:42.582451 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     96 bytes stack frame, 96 bytes spill stores, 96 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 50 registers, 160 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:42.582491 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 455264 bytes
2025-04-19T00:18:42.582960 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:42.583149 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 103 ms
2025-04-19T00:18:42.583209 1 39334 3 12 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:42.583216 1 39334 3 12 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Target group by indices: 0,0,0
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 0 , 0
	col_to_slot_map=[[0], [1], [2]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1441548
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: True
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:42.583305 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:42.583335 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:42.583353 I 39334 3 18 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.583363 I 39334 3 18 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:42.583383 I 39334 3 18 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:42.583392 2 39334 3 18 ExecutionKernel.cpp:303 total_num_input_rows=1441548
2025-04-19T00:18:42.583413 I 39334 3 18 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:42.583419 2 39334 3 18 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(4),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(4),nest_level(0))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(4),nest_level(0)))) ra_exe_unit.scan_limit=1441548 num_rows=((1441548)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=1441548 query_exe_context->query_mem_desc_.getEntryCount()=1441548 device_id=0 outer_table_key=(db_id: 1, table_id: 4) scan_limit=1441548 start_rowid=0 num_tables=1
2025-04-19T00:18:42.583431 I 39334 3 18 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:42.583478 1 39334 3 18 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.015744 ms
2025-04-19T00:18:42.583487 1 39334 3 18 GpuInterrupt.cpp:26 Registered module 0x730d20640e70 on device 0
2025-04-19T00:18:42.583790 1 39334 3 18 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:42.583803 1 39334 3 18 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:42.583809 1 39334 3 18 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:42.585107 1 39334 3 18 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 1 ms
2025-04-19T00:18:42.590689 1 39334 3 18 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:42.590708 1 39334 3 18 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 5 ms
2025-04-19T00:18:42.590714 I 39334 3 18 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 7 ms
2025-04-19T00:18:42.590735 2 39334 3 18 Execute.cpp:4139 results->rowCount()=1441548
2025-04-19T00:18:42.590740 I 39334 3 18 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 7 ms
2025-04-19T00:18:42.590753 I 39334 3 18 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 7 ms
2025-04-19T00:18:42.590783 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 111 ms
2025-04-19T00:18:42.590806 I 39334 3 12 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 227 ms
2025-04-19T00:18:42.590819 3 39334 3 12 RelAlgExecutor.cpp:1262 Returned from executeProject(), addTemporaryTable(-2, ...) exec_desc.getResult().getDataPtr()->rowCount()=1441548
2025-04-19T00:18:42.590830 I 39334 3 12 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 227 ms
2025-04-19T00:18:42.590836 1 39334 3 12 RelAlgExecutor.cpp:945 Executing query step 2 / 6
2025-04-19T00:18:42.590842 I 39334 3 12 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:42.590855 3 39334 3 12 RelAlgExecutor.cpp:1505 logical_union->inputCount()=2
2025-04-19T00:18:42.590861 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:18:42.590867 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelLogicalUnion(is_all(1)) input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:18:42.590877 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelLogicalUnion(is_all(1)) input_col_descs_unique.size()=6 source_used_inputs.size()=0
2025-04-19T00:18:42.590886 3 39334 3 12 RelAlgExecutor.cpp:5041 input_to_nest_level.size()=2 Pairs are:
2025-04-19T00:18:42.590891 3 39334 3 12 RelAlgExecutor.cpp:5043   (RelProject(RexInput(web_sales.ws_sold_date_sk) RexInput(web_sales.ws_bill_customer_sk) RexInput(web_sales.ws_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"]), 0)
2025-04-19T00:18:42.590901 3 39334 3 12 RelAlgExecutor.cpp:5043   (RelProject(RexInput(catalog_sales.cs_sold_date_sk) RexInput(catalog_sales.cs_bill_customer_sk) RexInput(catalog_sales.cs_item_sk) , ["sold_date_sk", "customer_sk", "item_sk"]), 0)
2025-04-19T00:18:42.590909 3 39334 3 12 RelAlgExecutor.cpp:5003 input_node->getOutputMetainfo()=(TargetMetaInfo(resname_(sold_date_sk) ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) physical_ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0))) TargetMetaInfo(resname_(customer_sk) ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) physical_ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0))) TargetMetaInfo(resname_(item_sk) ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) physical_ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0))))
2025-04-19T00:18:42.590926 3 39334 3 12 RelAlgExecutor.cpp:5055 i(0) input_exprs_owned.size()=3
2025-04-19T00:18:42.590931 3 39334 3 12 RelAlgExecutor.cpp:5057   (ColumnVar (db_id: 0, table_id: -2, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
2025-04-19T00:18:42.590938 3 39334 3 12 RelAlgExecutor.cpp:5057   (ColumnVar (db_id: 0, table_id: -2, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
2025-04-19T00:18:42.590943 3 39334 3 12 RelAlgExecutor.cpp:5057   (ColumnVar (db_id: 0, table_id: -2, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
2025-04-19T00:18:42.590948 3 39334 3 12 RelAlgExecutor.cpp:5003 input_node->getOutputMetainfo()=(TargetMetaInfo(resname_(sold_date_sk) ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) physical_ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0))) TargetMetaInfo(resname_(customer_sk) ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) physical_ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0))) TargetMetaInfo(resname_(item_sk) ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) physical_ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0))))
2025-04-19T00:18:42.590962 3 39334 3 12 RelAlgExecutor.cpp:5055 i(1) input_exprs_owned.size()=3
2025-04-19T00:18:42.590965 3 39334 3 12 RelAlgExecutor.cpp:5057   (ColumnVar (db_id: 0, table_id: -4, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
2025-04-19T00:18:42.590970 3 39334 3 12 RelAlgExecutor.cpp:5057   (ColumnVar (db_id: 0, table_id: -4, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
2025-04-19T00:18:42.590975 3 39334 3 12 RelAlgExecutor.cpp:5057   (ColumnVar (db_id: 0, table_id: -4, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
2025-04-19T00:18:42.590980 3 39334 3 12 RelAlgExecutor.cpp:5063 input_descs=(InputDescriptor(db_id(0), table_id(-2),nest_level(0)) InputDescriptor(db_id(0), table_id(-4),nest_level(1))) input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-2),nest_level(0)))) target_exprs.size()=3 max_num_tuples=1441548
2025-04-19T00:18:42.590991 3 39334 3 12 RelAlgExecutor.cpp:5118 logical_union->getOutputMetainfo()=(TargetMetaInfo(resname_(sold_date_sk) ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) physical_ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0))) TargetMetaInfo(resname_(customer_sk) ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) physical_ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0))) TargetMetaInfo(resname_(item_sk) ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) physical_ti_((type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)))) rewritten_exe_unit.input_col_descs.front()->getScanDesc().getTableKey()=(db_id: 0, table_id: -4)
2025-04-19T00:18:42.591006 I 39334 3 12 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:42.591015 3 39334 3 12 RelAlgExecutor.cpp:3692 body->getId()=5 body->toString()=RelLogicalUnion(is_all(1)) it==leaf_results_.end()=true
2025-04-19T00:18:42.591024 1 39334 3 12 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:18:42.591029 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 0
	Table/Col/Levels: ((db_id: 0, table_id: -4), 0, 0) ((db_id: 0, table_id: -2), 0, 0) ((db_id: 0, table_id: -4), 1, 0) ((db_id: 0, table_id: -2), 1, 0) ((db_id: 0, table_id: -4), 2, 0) ((db_id: 0, table_id: -2), 2, 0) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
	Union: UNION ALL
2025-04-19T00:18:42.591038 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:42.591046 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:42.591719 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:42.591728 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:42.591756 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:42.591954 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the CPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %31

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %28, %21 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp eq i64 %28, %20
  br i1 %29, label %30, label %21, !llvm.loop !24

30:                                               ; preds = %31, %21, %14
  ret void

31:                                               ; preds = %31, %18
  %32 = phi i64 [ %40, %31 ], [ 0, %18 ]
  %33 = getelementptr inbounds i8**, i8*** %6, i64 %32
  %34 = load i8**, i8*** %33, align 8, !tbaa !25
  %35 = trunc i64 %32 to i32
  %36 = mul i32 %16, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i64, i64* %8, i64 %37
  %39 = getelementptr inbounds i64, i64* %9, i64 %37
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %35, i32* %5, i8** %34, i8* %7, i64* %38, i64* %39, i32* %10, i64* %11, i64* %12, i8* %13)
  %40 = add nuw nsw i64 %32, 1
  %41 = icmp eq i64 %40, %20
  br i1 %41, label %30, label %31, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %result = alloca i64, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %12 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %14 = sext i32 %pos_start to i64
  %15 = icmp slt i64 %14, %row_count
  br i1 %15, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %16 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %24, %.loop.preheader
  %pos = phi i64 [ %14, %.loop.preheader ], [ %25, %24 ]
  %17 = call i32 @row_func(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i64* %join_hash_tables, i8* %row_func_mgr)
  %18 = and i64 %pos, 63
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %20 = call i1 @check_interrupt()
  %21 = select i1 %20, i32 10, i32 %17
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %22 = phi i32 [ %21, %.interrupt_check ], [ %17, %.for.body ]
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %.error_exit, label %24

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %22, i32* %error_code)
  ret void

24:                                               ; preds = %.error_check
  %25 = add nsw i64 %pos, %16
  %26 = icmp slt i64 %25, %row_count
  br i1 %26, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %24
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %27 = phi i64 [ %.pre.result, %._crit_edge ], [ %13, %.entry ]
  %28 = getelementptr inbounds i64*, i64** %out, i32 0
  %29 = load i64*, i64** %28, align 8
  %30 = mul i32 %frag_idx, %pos_step
  %31 = add i32 %group_buff_idx, %30
  %32 = getelementptr inbounds i64, i64* %29, i32 %31
  store i64 %27, i64* %32, align 8
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %0 = call i32 @filter_func(i64* %out)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i64* %out) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:42.600793 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:42.600897 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 9 ms
2025-04-19T00:18:42.600923 1 39334 3 12 QueryFragmentDescriptor.cpp:275 execution_kernels_per_device_.size()=1 execution_kernels_per_device_[0][*].fragments[0].table_id=(-2)
2025-04-19T00:18:42.600930 1 39334 3 12 QueryFragmentDescriptor.cpp:275 execution_kernels_per_device_.size()=1 execution_kernels_per_device_[0][*].fragments[0].table_id=(-2 -4)
2025-04-19T00:18:42.600935 1 39334 3 12 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:42.600939 1 39334 3 12 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:42.601002 1 39334 3 12 Execute.cpp:3137 In Executor::LaunchKernels executor 1 requested between 1 and 2 CPU slots, and was granted 2 CPU slots.
2025-04-19T00:18:42.601011 1 39334 3 12 Execute.cpp:2977 Launching 2 kernels for query on CPU using pool of 2 threads.
2025-04-19T00:18:42.601080 I 39334 3 19 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.601088 I 39334 3 19 measure.h:77 Timer start                    fetchUnionChunks                    fetchUnionChunks: 3565
2025-04-19T00:18:42.601093 2 39334 3 19 Execute.cpp:3578 selected_table_key=(db_id: 0, table_id: -4) input_descs_index=1 input_col_descs_index=0 input_descs=(InputDescriptor(db_id(0), table_id(-2),nest_level(0)) InputDescriptor(db_id(0), table_id(-4),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-2),nest_level(0))))
2025-04-19T00:18:42.601104 I 39334 3 19 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:42.601133 I 39334 3 20 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.601155 I 39334 3 20 measure.h:77 Timer start                    fetchUnionChunks                    fetchUnionChunks: 3565
2025-04-19T00:18:42.601161 2 39334 3 20 Execute.cpp:3578 selected_table_key=(db_id: 0, table_id: -2) input_descs_index=0 input_col_descs_index=1 input_descs=(InputDescriptor(db_id(0), table_id(-2),nest_level(0)) InputDescriptor(db_id(0), table_id(-4),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-2),nest_level(0))))
2025-04-19T00:18:42.637068 I 39334 3 19 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 35 ms
2025-04-19T00:18:42.637120 2 39334 3 19 Execute.cpp:3660 frag_col_buffers=(0x730a0be00020 0x730a0be00020 0x730a0c0be880 0x730a0c0be880 0x730a0c37d0e0 0x730a0c37d0e0) num_rows=((1441548 719384)) frag_offsets=((0 0)) input_descs_index=1 input_col_descs_index=0
2025-04-19T00:18:42.637126 I 39334 3 20 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:42.637131 I 39334 3 19 measure.h:84 Timer end                      fetchUnionChunks                    fetchUnionChunks: 3565 elapsed 36 ms
2025-04-19T00:18:42.637254 I 39334 3 19 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:42.637270 I 39334 3 19 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:42.637276 1 39334 3 19 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:42.637549 I 39334 3 19 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 0 ms
2025-04-19T00:18:42.637559 I 39334 3 19 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:42.637568 I 39334 3 19 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 36 ms
2025-04-19T00:18:42.701859 I 39334 3 20 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 64 ms
2025-04-19T00:18:42.701914 2 39334 3 20 Execute.cpp:3660 frag_col_buffers=(0x730a0c63b940 0x730a0c63b940 0x730a0cbbb570 0x730a0cbbb570 0x730a0d13b1a0 0x730a0d13b1a0) num_rows=((1441548 719384)) frag_offsets=((0 0)) input_descs_index=0 input_col_descs_index=1
2025-04-19T00:18:42.701925 I 39334 3 20 measure.h:84 Timer end                      fetchUnionChunks                    fetchUnionChunks: 3565 elapsed 100 ms
2025-04-19T00:18:42.702069 I 39334 3 20 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:42.702086 I 39334 3 20 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:42.702093 1 39334 3 20 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:42.702752 I 39334 3 20 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 0 ms
2025-04-19T00:18:42.702765 I 39334 3 20 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:42.702793 I 39334 3 20 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 101 ms
2025-04-19T00:18:42.702840 1 39334 3 12 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 719384
2025-04-19T00:18:42.702859 1 39334 3 12 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 1441548
2025-04-19T00:18:42.702907 1 39334 3 12 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:42.702933 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 111 ms
2025-04-19T00:18:42.702948 1 39334 3 12 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 2160932
2025-04-19T00:18:42.702955 1 39334 3 12 RelAlgExecutor.cpp:3825 Using columnar layout for projection as output size of 2160932 rows exceeds threshold of 1000000 or some target uses FlatBuffer memory layout.
2025-04-19T00:18:42.702974 1 39334 3 12 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:42.702981 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 0
	Table/Col/Levels: ((db_id: 0, table_id: -4), 0, 0) ((db_id: 0, table_id: -2), 0, 0) ((db_id: 0, table_id: -4), 1, 0) ((db_id: 0, table_id: -2), 1, 0) ((db_id: 0, table_id: -4), 2, 0) ((db_id: 0, table_id: -2), 2, 0) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 0, table_id: -2, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -2, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -2, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 2160932
	Bump Allocator: False
	Union: UNION ALL
2025-04-19T00:18:42.703017 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:42.703030 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:42.703944 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:42.703960 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:42.703987 2 39334 3 12 TargetExprBuilder.cpp:682 Set padded slot-width byte for the slot-0 to 8
2025-04-19T00:18:42.703995 2 39334 3 12 TargetExprBuilder.cpp:682 Set padded slot-width byte for the slot-1 to 8
2025-04-19T00:18:42.704001 2 39334 3 12 TargetExprBuilder.cpp:682 Set padded slot-width byte for the slot-2 to 8
2025-04-19T00:18:42.704049 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:42.704339 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the CPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %31

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %28, %21 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp eq i64 %28, %20
  br i1 %29, label %30, label %21, !llvm.loop !24

30:                                               ; preds = %31, %21, %14
  ret void

31:                                               ; preds = %31, %18
  %32 = phi i64 [ %40, %31 ], [ 0, %18 ]
  %33 = getelementptr inbounds i8**, i8*** %6, i64 %32
  %34 = load i8**, i8*** %33, align 8, !tbaa !25
  %35 = trunc i64 %32 to i32
  %36 = mul i32 %16, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i64, i64* %8, i64 %37
  %39 = getelementptr inbounds i64, i64* %9, i64 %37
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %35, i32* %5, i8** %34, i8* %7, i64* %38, i64* %39, i32* %10, i64* %11, i64* %12, i8* %13)
  %40 = add nuw nsw i64 %32, 1
  %41 = icmp eq i64 %40, %20
  br i1 %41, label %30, label %31, !llvm.loop !24
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %12 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %13 = call i32 @pos_start_impl(i32* %row_index_resume)
  %14 = call i32 @pos_step_impl()
  %15 = call i32 @group_buff_idx_impl()
  %16 = sext i32 %13 to i64
  %17 = getelementptr i64*, i64** %group_by_buffers, i32 %15
  %col_buffer = load i64*, i64** %17, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %18 = icmp slt i64 %16, %row_count
  br i1 %18, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %19 = sext i32 %14 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %16, %.loop.preheader ], [ %28, %filter_match ], [ %28, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %20 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i64* %join_hash_tables, i8* %row_func_mgr)
  %21 = and i64 %pos, 63
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %23 = call i1 @check_interrupt()
  %24 = select i1 %23, i32 10, i32 %20
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %25 = phi i32 [ %24, %.interrupt_check ], [ %20, %.forbody ]
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %.error_exit, label %27

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %25, i32* %error_code)
  ret void

27:                                               ; preds = %.error_check
  %28 = add i64 %pos, %19
  %29 = icmp slt i64 %28, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %30 = icmp ne i32 %crt_matched1, 0
  br i1 %30, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %27
  %31 = load i32, i32* %old_total_matched, align 4
  %32 = add i32 %31, %crt_matched1
  %limit_not_reached = icmp slt i32 %32, %12
  %33 = and i1 %29, %limit_not_reached
  br i1 %33, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %27
  br i1 %29, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %0 = call i32 @filter_func(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos) #34 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %0 = load i32, i32* %total_matched, align 4
  %1 = add i32 %0, 1
  store i32 %1, i32* %total_matched, align 4
  store i32 %0, i32* %old_total_matched, align 4
  %2 = load i32, i32* %max_matched, align 4
  %3 = load i32, i32* %old_total_matched, align 4
  %4 = call i32 @get_columnar_scan_output_offset(i64* %group_by_buff, i32 %2, i32 %3, i64 %pos)
  %5 = icmp sge i32 %4, 0
  br i1 %5, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %out_buff_b_stream = bitcast i64* %group_by_buff to i8*
  %out_row_idx = zext i32 %4 to i64
  %6 = shl i64 %out_row_idx, 3
  %out_byte_off_target_0 = add i64 %6, 17287456
  %7 = getelementptr i8, i8* %out_buff_b_stream, i64 %out_byte_off_target_0
  %agg_col_ptr = bitcast i8* %7 to i64*
  call void @agg_id(i64* %agg_col_ptr, i64 %pos)
  %8 = shl i64 %out_row_idx, 3
  %out_byte_off_target_1 = add i64 %8, 34574912
  %9 = getelementptr i8, i8* %out_buff_b_stream, i64 %out_byte_off_target_1
  %agg_col_ptr1 = bitcast i8* %9 to i64*
  call void @agg_id(i64* %agg_col_ptr1, i64 %pos)
  %10 = shl i64 %out_row_idx, 3
  %out_byte_off_target_2 = add i64 %10, 51862368
  %11 = getelementptr i8, i8* %out_buff_b_stream, i64 %out_byte_off_target_2
  %agg_col_ptr2 = bitcast i8* %11 to i64*
  call void @agg_id(i64* %agg_col_ptr2, i64 %pos)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %12 = trunc i64 %pos to i32
  %13 = sub i32 0, %12
  ret i32 %13
}

End of IR
2025-04-19T00:18:42.716756 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:42.716911 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 13 ms
2025-04-19T00:18:42.716953 1 39334 3 12 QueryFragmentDescriptor.cpp:275 execution_kernels_per_device_.size()=1 execution_kernels_per_device_[0][*].fragments[0].table_id=(-2)
2025-04-19T00:18:42.716959 1 39334 3 12 QueryFragmentDescriptor.cpp:275 execution_kernels_per_device_.size()=1 execution_kernels_per_device_[0][*].fragments[0].table_id=(-2 -4)
2025-04-19T00:18:42.716965 1 39334 3 12 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:42.716969 1 39334 3 12 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	1 | 8 , 4
	2 | 8 , 4
	col_to_slot_map=[[0], [1], [2]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 2160932
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: True
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:42.717031 1 39334 3 12 Execute.cpp:3137 In Executor::LaunchKernels executor 1 requested between 1 and 2 CPU slots, and was granted 2 CPU slots.
2025-04-19T00:18:42.717040 1 39334 3 12 Execute.cpp:2977 Launching 2 kernels for query on CPU using pool of 2 threads.
2025-04-19T00:18:42.717057 I 39334 3 21 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.717071 I 39334 3 22 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.717089 I 39334 3 22 measure.h:77 Timer start                    fetchUnionChunks                    fetchUnionChunks: 3565
2025-04-19T00:18:42.717075 I 39334 3 21 measure.h:77 Timer start                    fetchUnionChunks                    fetchUnionChunks: 3565
2025-04-19T00:18:42.717097 2 39334 3 22 Execute.cpp:3578 selected_table_key=(db_id: 0, table_id: -2) input_descs_index=0 input_col_descs_index=1 input_descs=(InputDescriptor(db_id(0), table_id(-2),nest_level(0)) InputDescriptor(db_id(0), table_id(-4),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-2),nest_level(0))))
2025-04-19T00:18:42.717103 2 39334 3 21 Execute.cpp:3578 selected_table_key=(db_id: 0, table_id: -4) input_descs_index=1 input_col_descs_index=0 input_descs=(InputDescriptor(db_id(0), table_id(-2),nest_level(0)) InputDescriptor(db_id(0), table_id(-4),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-2),nest_level(0))))
2025-04-19T00:18:42.717112 I 39334 3 22 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:42.784697 I 39334 3 22 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 67 ms
2025-04-19T00:18:42.784756 2 39334 3 22 Execute.cpp:3660 frag_col_buffers=(0x730a0d6bade0 0x730a0d6bade0 0x730a0dc3aa10 0x730a0dc3aa10 0x730a0e1ba640 0x730a0e1ba640) num_rows=((1441548 719384)) frag_offsets=((0 0)) input_descs_index=0 input_col_descs_index=1
2025-04-19T00:18:42.784768 I 39334 3 22 measure.h:84 Timer end                      fetchUnionChunks                    fetchUnionChunks: 3565 elapsed 67 ms
2025-04-19T00:18:42.784766 I 39334 3 21 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:42.784805 2 39334 3 22 ExecutionKernel.cpp:303 total_num_input_rows=1441548
2025-04-19T00:18:42.807518 1 39334 3 22 ExecutionKernel.cpp:429 outer_table_key=(db_id: 0, table_id: -2) ra_exe_unit_.scan_limit=2160932
2025-04-19T00:18:42.807557 I 39334 3 22 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:42.807569 2 39334 3 22 Execute.cpp:4027 bool(ra_exe_unit.union_all)=true ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-2),nest_level(0)) InputDescriptor(db_id(0), table_id(-4),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-2),nest_level(0)))) ra_exe_unit.scan_limit=2160932 num_rows=((1441548)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=1441548 query_exe_context->query_mem_desc_.getEntryCount()=2160932 device_id=0 outer_table_key=(db_id: 0, table_id: -2) scan_limit=2160932 start_rowid=0 num_tables=2
2025-04-19T00:18:42.807607 I 39334 3 22 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:42.807616 1 39334 3 22 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:42.827245 I 39334 3 21 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 42 ms
2025-04-19T00:18:42.827300 2 39334 3 21 Execute.cpp:3660 frag_col_buffers=(0x730a0e73a270 0x730a0e73a270 0x730a0e9f8ad0 0x730a0e9f8ad0 0x730a0ecb7330 0x730a0ecb7330) num_rows=((1441548 719384)) frag_offsets=((0 0)) input_descs_index=1 input_col_descs_index=0
2025-04-19T00:18:42.827312 I 39334 3 21 measure.h:84 Timer end                      fetchUnionChunks                    fetchUnionChunks: 3565 elapsed 110 ms
2025-04-19T00:18:42.827332 2 39334 3 21 ExecutionKernel.cpp:303 total_num_input_rows=719384
2025-04-19T00:18:42.835942 1 39334 3 21 ExecutionKernel.cpp:429 outer_table_key=(db_id: 0, table_id: -4) ra_exe_unit_.scan_limit=2160932
2025-04-19T00:18:42.836012 I 39334 3 21 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:42.836025 2 39334 3 21 Execute.cpp:4027 bool(ra_exe_unit.union_all)=true ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-2),nest_level(0)) InputDescriptor(db_id(0), table_id(-4),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-2),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-4),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-2),nest_level(0)))) ra_exe_unit.scan_limit=2160932 num_rows=((719384)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=719384 query_exe_context->query_mem_desc_.getEntryCount()=2160932 device_id=0 outer_table_key=(db_id: 0, table_id: -4) scan_limit=2160932 start_rowid=0 num_tables=2
2025-04-19T00:18:42.836057 I 39334 3 21 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:42.836064 1 39334 3 21 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:42.841327 I 39334 3 22 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 33 ms
2025-04-19T00:18:42.841376 2 39334 3 22 Execute.cpp:4139 results->rowCount()=1441548
2025-04-19T00:18:42.841385 I 39334 3 22 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 33 ms
2025-04-19T00:18:42.841397 I 39334 3 22 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 124 ms
2025-04-19T00:18:42.845989 I 39334 3 21 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 9 ms
2025-04-19T00:18:42.846017 2 39334 3 21 Execute.cpp:4139 results->rowCount()=719384
2025-04-19T00:18:42.846027 I 39334 3 21 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 10 ms
2025-04-19T00:18:42.846047 I 39334 3 21 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 128 ms
2025-04-19T00:18:42.846088 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 143 ms
2025-04-19T00:18:42.846115 I 39334 3 12 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 255 ms
2025-04-19T00:18:42.846127 I 39334 3 12 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 255 ms
2025-04-19T00:18:42.846133 1 39334 3 12 RelAlgExecutor.cpp:945 Executing query step 3 / 6
2025-04-19T00:18:42.846140 I 39334 3 12 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:42.846161 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 2
2025-04-19T00:18:42.846166 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=2
2025-04-19T00:18:42.846196 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1 input_col_descs_unique.size()=2 source_used_inputs.size()=10
2025-04-19T00:18:42.846211 3 39334 3 12 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(0), table_id(-5),nest_level(0)) InputDescriptor(db_id(1), table_id(12),nest_level(1)) InputDescriptor(db_id(1), table_id(8),nest_level(2)) InputDescriptor(db_id(1), table_id(5),nest_level(3)))
2025-04-19T00:18:42.846217 3 39334 3 12 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-5),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-5),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-5),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(1))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(12),nest_level(1))) InputColDescriptor(col_id(13),InputDescriptor(db_id(1), table_id(12),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(3))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(3))))
2025-04-19T00:18:42.846307 2 39334 3 12 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:42.846314 2 39334 3 12 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:18:42.846319 1 39334 3 12 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:18:42.846325 1 39334 3 12 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 3
2025-04-19T00:18:42.846329 1 39334 3 12 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 2
2025-04-19T00:18:42.846333 1 39334 3 12 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 1
2025-04-19T00:18:42.846339 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelLogicalUnion(is_all(1)) to nest level 0
2025-04-19T00:18:42.846346 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 1
2025-04-19T00:18:42.846358 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(date_dim, ["d_date_sk", "d_date_id", "d_date", "d_month_seq", "d_week_seq", "d_quarter_seq", "d_year", "d_dow", "d_moy", "d_dom", "d_qoy", "d_fy_year", "d_fy_quarter_seq", "d_fy_week_seq", "d_day_name", "d_quarter_name", "d_holiday", "d_weekend", "d_following_holiday", "d_first_dom", "d_last_dom", "d_same_day_ly", "d_same_day_lq", "d_current_day", "d_current_week", "d_current_month", "d_current_quarter", "d_current_year", "rowid"]) to nest level 2
2025-04-19T00:18:42.846365 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 3
2025-04-19T00:18:42.846373 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 2
2025-04-19T00:18:42.846379 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=2
2025-04-19T00:18:42.846395 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1 input_col_descs_unique.size()=2 source_used_inputs.size()=10
2025-04-19T00:18:42.846409 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelLogicalUnion(is_all(1)) to nest level 0
2025-04-19T00:18:42.846414 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 1
2025-04-19T00:18:42.846420 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(date_dim, ["d_date_sk", "d_date_id", "d_date", "d_month_seq", "d_week_seq", "d_quarter_seq", "d_year", "d_dow", "d_moy", "d_dom", "d_qoy", "d_fy_year", "d_fy_quarter_seq", "d_fy_week_seq", "d_day_name", "d_quarter_name", "d_holiday", "d_weekend", "d_following_holiday", "d_first_dom", "d_last_dom", "d_same_day_ly", "d_same_day_lq", "d_current_day", "d_current_week", "d_current_month", "d_current_quarter", "d_current_year", "rowid"]) to nest level 2
2025-04-19T00:18:42.846426 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 3
2025-04-19T00:18:42.846433 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 2
2025-04-19T00:18:42.846438 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=2
2025-04-19T00:18:42.846455 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1 input_col_descs_unique.size()=2 source_used_inputs.size()=10
2025-04-19T00:18:42.846490 3 39334 3 12 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1) = 4
2025-04-19T00:18:42.846529 I 39334 3 12 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:42.846543 3 39334 3 12 RelAlgExecutor.cpp:3692 body->getId()=40 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:42.846595 1 39334 3 12 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:42.846601 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 1823952035016052426
	Table/Col/Levels: ((db_id: 0, table_id: -5), 0, 0) ((db_id: 0, table_id: -5), 1, 0) ((db_id: 0, table_id: -5), 2, 0) ((db_id: 1, table_id: 5), 1, 1) ((db_id: 1, table_id: 5), 5, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) ((db_id: 1, table_id: 8), 9, 2) ((db_id: 1, table_id: 12), 1, 3) ((db_id: 1, table_id: 12), 11, 3) ((db_id: 1, table_id: 12), 13, 3) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -5, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 0, table_id: -5, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 8, column_id: 9), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1) ) , (= (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1999) ) 		2 INNER(= (ColumnVar (db_id: 0, table_id: -5, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 12, column_id: 13), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=63, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 63), uses_flatbuffer=0)) (CAST VARCHAR(5,0) DICT(63) (Const Music) ) ) , (= (ColumnVar (db_id: 1, table_id: 12, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=62, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 62), uses_flatbuffer=0)) (CAST VARCHAR(7,0) DICT(62) (Const country) ) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 5, column_id: 1), rte: 1, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 5, column_id: 5), rte: 1, which_row: 3, varno: 2) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:42.846638 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:42.846653 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:42.846763 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:18:42.846785 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:18:42.846816 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 1823952035016052426
	Table/Col/Levels: ((db_id: 0, table_id: -5), 0, 0) ((db_id: 0, table_id: -5), 1, 0) ((db_id: 0, table_id: -5), 2, 0) ((db_id: 1, table_id: 5), 1, 1) ((db_id: 1, table_id: 5), 5, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) ((db_id: 1, table_id: 8), 9, 2) ((db_id: 1, table_id: 12), 1, 3) ((db_id: 1, table_id: 12), 11, 3) ((db_id: 1, table_id: 12), 13, 3) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -5, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 0, table_id: -5, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 8, column_id: 9), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1) ) , (= (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1999) ) 		2 INNER(= (ColumnVar (db_id: 0, table_id: -5, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 12, column_id: 13), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=63, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 63), uses_flatbuffer=0)) (CAST VARCHAR(5,0) DICT(63) (Const Music) ) ) , (= (ColumnVar (db_id: 1, table_id: 12, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=62, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 62), uses_flatbuffer=0)) (CAST VARCHAR(7,0) DICT(62) (Const country) ) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:42.846848 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:42.846858 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:42.847609 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:42.847620 1 39334 3 12 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:42.847674 1 39334 3 12 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,1,0,
2025-04-19T00:18:42.847685 1 39334 3 12 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,1,0,
2025-04-19T00:18:42.848123 1 39334 3 23 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 100000, # entries stored in the payload buffer: 100000, hash table size : 400000 Bytes
2025-04-19T00:18:42.851479 1 39334 3 12 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 8992637071125528296)
2025-04-19T00:18:42.851509 1 39334 3 12 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 3 ms
2025-04-19T00:18:42.851522 1 39334 3 12 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:42.851559 1 39334 3 12 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,1,0,
2025-04-19T00:18:42.851568 1 39334 3 12 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,1,0,
2025-04-19T00:18:42.851896 1 39334 3 24 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 73049, # entries stored in the payload buffer: 73049, hash table size : 292196 Bytes
2025-04-19T00:18:42.852084 1 39334 3 12 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 13986152893634262682)
2025-04-19T00:18:42.852120 1 39334 3 12 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:42.852133 1 39334 3 12 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:42.852167 1 39334 3 12 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,1,0,
2025-04-19T00:18:42.852182 1 39334 3 12 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,1,0,
2025-04-19T00:18:42.852339 1 39334 3 25 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 18000, # entries stored in the payload buffer: 18000, hash table size : 72000 Bytes
2025-04-19T00:18:42.852512 1 39334 3 12 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 1327391546171934658)
2025-04-19T00:18:42.852545 1 39334 3 12 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:42.852554 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 4 ms
2025-04-19T00:18:42.852684 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 16
2025-04-19T00:18:42.852696 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 4 / literal buffer usage: 16 bytes
2025-04-19T00:18:42.853076 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8, i8* %literals, i16 0
  %23 = bitcast i8* %22 to i32*
  %literal_0 = load i32, i32* %23, align 4
  %24 = getelementptr i8, i8* %literals, i16 4
  %25 = bitcast i8* %24 to i32*
  %literal_4 = load i32, i32* %25, align 4
  %26 = getelementptr i8, i8* %literals, i16 8
  %27 = bitcast i8* %26 to i32*
  %literal_8 = load i32, i32* %27, align 4
  %28 = getelementptr i8, i8* %literals, i16 12
  %29 = bitcast i8* %28 to i32*
  %literal_12 = load i32, i32* %29, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %30 = sext i32 %pos_start to i64
  %31 = icmp slt i64 %30, %row_count
  br i1 %31, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %32 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %42, %.loop.preheader
  %pos = phi i64 [ %30, %.loop.preheader ], [ %43, %42 ]
  %33 = load i64*, i64** %out, align 8
  %34 = call i32 @row_func_hoisted_literals(i64* %33, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_12, i32 %literal_8, i32 %literal_4, i32 %literal_0)
  %35 = lshr i64 %pos, 15
  %36 = and i64 %35, 16
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %38 = call i1 @check_interrupt()
  %39 = select i1 %38, i32 10, i32 %34
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %40 = phi i32 [ %39, %.interrupt_check ], [ %34, %.for.body ]
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %.error_exit, label %42

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %40, i32* %error_code)
  ret void

42:                                               ; preds = %.error_check
  %43 = add nsw i64 %pos, %32
  %44 = icmp slt i64 %43, %row_count
  br i1 %44, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %42
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_12, i32 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_3, %loop_done_false, %singleton_true_1, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = load i64, i64* %join_hash_tables, align 8
  %3 = sext i32 %1 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %2, i64 %3, i64 1, i64 100000, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %6 = load i1, i1* %remaining_outer_cond_match, align 1
  %7 = and i1 %5, %6
  br i1 %7, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %9 = trunc i64 %8 to i32
  %10 = getelementptr i64, i64* %join_hash_tables, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = sext i32 %9 to i64
  %13 = call i64 @hash_join_idx_nullable(i64 %11, i64 %12, i64 2415022, i64 2488070, i64 -2147483648)
  %14 = icmp sge i64 %13, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %15 = load i1, i1* %remaining_outer_cond_match2, align 1
  %16 = and i1 %14, %15
  br i1 %16, label %singleton_true_3, label %exit

singleton_true_3:                                 ; preds = %singleton_true_1
  %17 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %18 = trunc i64 %17 to i32
  %19 = getelementptr i64, i64* %join_hash_tables, i64 2
  %20 = load i64, i64* %19, align 8
  %21 = sext i32 %18 to i64
  %22 = call i64 @hash_join_idx_nullable(i64 %20, i64 %21, i64 1, i64 18000, i64 -2147483648)
  %23 = icmp sge i64 %22, 0
  %remaining_outer_cond_match4 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match4, align 1
  %24 = load i1, i1* %remaining_outer_cond_match4, align 1
  %25 = and i1 %23, %24
  br i1 %25, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_3
  store i1 true, i1* %loop_done, align 1
  %26 = call i32 @filter_func_hoisted_literals(i8* %col_buf7, i64 %13, i8* %col_buf6, i8* %col_buf10, i64 %22, i8* %col_buf9, i8* %col_buf3, i64 %4, i8* %col_buf4, i64* %out, i1* %loop_done, i32 %arg_literal_12, i32 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0)
  %27 = load i1, i1* %loop_done, align 1
  br i1 %27, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %26

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf7, i64 %extra0, i8* %col_buf6, i8* %col_buf10, i64 %extra1, i8* %col_buf9, i8* %col_buf3, i64 %extra2, i8* %col_buf4, i64* %out, i1* %loop_done, i32 %arg_literal_12, i32 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0) #33 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf7, i32 4, i64 %extra0)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf6, i32 4, i64 %extra0)
  %6 = trunc i64 %5 to i32
  %7 = call i8 @eq_int32_t_nullable_lhs(i32 %6, i32 %arg_literal_4, i64 -2147483648, i8 -128)
  %8 = icmp sgt i8 %7, 0
  %9 = and i1 %4, %8
  %10 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %11 = trunc i64 %10 to i32
  %12 = call i8 @eq_int32_t_nullable_lhs(i32 %11, i32 %arg_literal_8, i64 -2147483648, i8 -128)
  %13 = icmp sgt i8 %12, 0
  %14 = and i1 %9, %13
  %15 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 4, i64 %extra1)
  %16 = trunc i64 %15 to i32
  %17 = call i8 @eq_int32_t_nullable_lhs(i32 %16, i32 %arg_literal_12, i64 -2147483648, i8 -128)
  %18 = icmp sgt i8 %17, 0
  %19 = and i1 %14, %18
  br i1 %19, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %20 = alloca i64, i32 2, align 8
  %21 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %extra2)
  %22 = trunc i64 %21 to i32
  %23 = sext i32 %22 to i64
  %24 = getelementptr i64, i64* %20, i32 0
  store i64 %23, i64* %24, align 8
  %25 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %extra2)
  %26 = trunc i64 %25 to i32
  %27 = sext i32 %26 to i64
  %28 = getelementptr i64, i64* %20, i32 1
  store i64 %27, i64* %28, align 8
  %29 = bitcast i64* %out to i8*
  %30 = bitcast i64* %20 to i8*
  call void @linear_probabilistic_count(i8* %29, i32 268435456, i8* %30, i32 16)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:18:42.853372 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:42.867146 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.089676
2025-04-19T00:18:42.928330 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.1313
2025-04-19T00:18:42.929120 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.367
2025-04-19T00:18:42.945516 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 30.1768
2025-04-19T00:18:42.961785 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_template
ptxas         .     192 bytes stack frame, 176 bytes spill stores, 176 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 248 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:42.961818 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 460384 bytes
2025-04-19T00:18:42.962281 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:42.962531 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 115 ms
2025-04-19T00:18:42.962586 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:42.962592 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Estimator
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	Empty	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:42.962689 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:42.962720 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:42.962739 I 39334 3 26 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:42.962749 I 39334 3 26 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:42.962761 I 39334 3 26 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:43.053445 I 39334 3 26 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 90 ms
2025-04-19T00:18:43.057546 1 39334 3 26 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,5,0,
2025-04-19T00:18:43.057579 1 39334 3 26 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,5,0,
2025-04-19T00:18:43.057877 1 39334 3 26 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,11,0,
2025-04-19T00:18:43.057891 1 39334 3 26 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,11,0,
2025-04-19T00:18:43.057956 1 39334 3 26 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,13,0,
2025-04-19T00:18:43.057965 1 39334 3 26 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,13,0,
2025-04-19T00:18:43.058033 I 39334 3 26 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 95 ms
2025-04-19T00:18:43.058058 I 39334 3 26 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:43.058078 I 39334 3 26 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:43.058125 1 39334 3 26 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.013984 ms
2025-04-19T00:18:43.058138 1 39334 3 26 GpuInterrupt.cpp:26 Registered module 0x730d22fea650 on device 0
2025-04-19T00:18:43.059826 1 39334 3 26 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 1 ms
2025-04-19T00:18:43.059839 1 39334 3 26 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:43.059844 1 39334 3 26 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:43.060528 1 39334 3 26 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:43.198453 I 39334 3 26 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 140 ms
2025-04-19T00:18:43.198490 I 39334 3 26 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 140 ms
2025-04-19T00:18:43.198513 I 39334 3 26 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 235 ms
2025-04-19T00:18:43.198552 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 351 ms
2025-04-19T00:18:43.271449 1 39334 3 12 RelAlgExecutor.cpp:3926 CardinalityEstimationRequired, Use ndv_estimation: 465, cardinality for estimated_groups_buffer_entry_guess: 930
2025-04-19T00:18:43.271489 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 1823952035016052426
	Table/Col/Levels: ((db_id: 0, table_id: -5), 0, 0) ((db_id: 0, table_id: -5), 1, 0) ((db_id: 0, table_id: -5), 2, 0) ((db_id: 1, table_id: 5), 1, 1) ((db_id: 1, table_id: 5), 5, 1) ((db_id: 1, table_id: 8), 1, 2) ((db_id: 1, table_id: 8), 7, 2) ((db_id: 1, table_id: 8), 9, 2) ((db_id: 1, table_id: 12), 1, 3) ((db_id: 1, table_id: 12), 11, 3) ((db_id: 1, table_id: 12), 13, 3) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -5, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 0, table_id: -5, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 8, column_id: 9), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1) ) , (= (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1999) ) 		2 INNER(= (ColumnVar (db_id: 0, table_id: -5, column_id: 2), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (ColumnVar (db_id: 1, table_id: 12, column_id: 13), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=63, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 63), uses_flatbuffer=0)) (CAST VARCHAR(5,0) DICT(63) (Const Music) ) ) , (= (ColumnVar (db_id: 1, table_id: 12, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=62, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 62), uses_flatbuffer=0)) (CAST VARCHAR(7,0) DICT(62) (Const country) ) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 5, column_id: 1), rte: 1, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 5, column_id: 5), rte: 1, which_row: 3, varno: 2) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:43.271549 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:43.271573 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:43.272475 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:43.272504 1 39334 3 12 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:43.272558 1 39334 3 12 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 8992637071125528296)
2025-04-19T00:18:43.272688 1 39334 3 27 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 100000, # entries stored in the payload buffer: 100000, hash table size : 400000 Bytes
2025-04-19T00:18:43.272935 1 39334 3 12 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:43.272970 1 39334 3 12 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:43.272998 1 39334 3 12 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 13986152893634262682)
2025-04-19T00:18:43.273074 1 39334 3 28 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 73049, # entries stored in the payload buffer: 73049, hash table size : 292196 Bytes
2025-04-19T00:18:43.273259 1 39334 3 12 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:43.273296 1 39334 3 12 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:43.273319 1 39334 3 12 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 1327391546171934658)
2025-04-19T00:18:43.273404 1 39334 3 29 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 18000, # entries stored in the payload buffer: 18000, hash table size : 72000 Bytes
2025-04-19T00:18:43.273586 1 39334 3 12 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:43.273615 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 1 ms
2025-04-19T00:18:43.273875 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 16
2025-04-19T00:18:43.273890 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 4 / literal buffer usage: 16 bytes
2025-04-19T00:18:43.274266 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !25

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !26
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !25
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8, i8* %literals, i16 0
  %23 = bitcast i8* %22 to i32*
  %literal_0 = load i32, i32* %23, align 4
  %24 = getelementptr i8, i8* %literals, i16 4
  %25 = bitcast i8* %24 to i32*
  %literal_4 = load i32, i32* %25, align 4
  %26 = getelementptr i8, i8* %literals, i16 8
  %27 = bitcast i8* %26 to i32*
  %literal_8 = load i32, i32* %27, align 4
  %28 = getelementptr i8, i8* %literals, i16 12
  %29 = bitcast i8* %28 to i32*
  %literal_12 = load i32, i32* %29, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %30 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %31 = call i32 @pos_start_impl(i32* %row_index_resume)
  %32 = call i32 @pos_step_impl()
  %33 = call i32 @group_buff_idx_impl()
  %34 = sext i32 %31 to i64
  %35 = getelementptr i64*, i64** %group_by_buffers, i32 %33
  %col_buffer = load i64*, i64** %35, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %36 = icmp slt i64 %34, %row_count
  br i1 %36, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %37 = sext i32 %32 to i64
  br label %.forbody

.forbody:                                         ; preds = %46, %.loop.preheader
  %pos = phi i64 [ %34, %.loop.preheader ], [ %47, %46 ]
  %38 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_12, i32 %literal_8, i32 %literal_4, i32 %literal_0)
  %39 = lshr i64 %pos, 15
  %40 = and i64 %39, 16
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %42 = call i1 @check_interrupt()
  %43 = select i1 %42, i32 10, i32 %38
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %44 = phi i32 [ %43, %.interrupt_check ], [ %38, %.forbody ]
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %.error_exit, label %46

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %44, i32* %error_code)
  ret void

46:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %47 = add i64 %pos, %37
  %48 = icmp slt i64 %47, %row_count
  br i1 %48, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %46
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_12, i32 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_3, %loop_done_false, %singleton_true_1, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = load i64, i64* %join_hash_tables, align 8
  %3 = sext i32 %1 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %2, i64 %3, i64 1, i64 100000, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %6 = load i1, i1* %remaining_outer_cond_match, align 1
  %7 = and i1 %5, %6
  br i1 %7, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %9 = trunc i64 %8 to i32
  %10 = getelementptr i64, i64* %join_hash_tables, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = sext i32 %9 to i64
  %13 = call i64 @hash_join_idx_nullable(i64 %11, i64 %12, i64 2415022, i64 2488070, i64 -2147483648)
  %14 = icmp sge i64 %13, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %15 = load i1, i1* %remaining_outer_cond_match2, align 1
  %16 = and i1 %14, %15
  br i1 %16, label %singleton_true_3, label %exit

singleton_true_3:                                 ; preds = %singleton_true_1
  %17 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %18 = trunc i64 %17 to i32
  %19 = getelementptr i64, i64* %join_hash_tables, i64 2
  %20 = load i64, i64* %19, align 8
  %21 = sext i32 %18 to i64
  %22 = call i64 @hash_join_idx_nullable(i64 %20, i64 %21, i64 1, i64 18000, i64 -2147483648)
  %23 = icmp sge i64 %22, 0
  %remaining_outer_cond_match4 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match4, align 1
  %24 = load i1, i1* %remaining_outer_cond_match4, align 1
  %25 = and i1 %23, %24
  br i1 %25, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_3
  store i1 true, i1* %loop_done, align 1
  %26 = call i32 @filter_func_hoisted_literals(i8* %col_buf7, i64 %13, i8* %col_buf6, i8* %col_buf10, i64 %22, i8* %col_buf9, i8* %col_buf3, i64 %4, i8* %col_buf4, i64* %group_by_buff, i1* %loop_done, i64 %pos, i32 %arg_literal_12, i32 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0)
  %27 = load i1, i1* %loop_done, align 1
  br i1 %27, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %26

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf7, i64 %extra0, i8* %col_buf6, i8* %col_buf10, i64 %extra1, i8* %col_buf9, i8* %col_buf3, i64 %extra2, i8* %col_buf4, i64* %group_by_buff, i1* %loop_done, i64 %pos, i32 %arg_literal_12, i32 %arg_literal_8, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf7, i32 4, i64 %extra0)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf6, i32 4, i64 %extra0)
  %6 = trunc i64 %5 to i32
  %7 = call i8 @eq_int32_t_nullable_lhs(i32 %6, i32 %arg_literal_4, i64 -2147483648, i8 -128)
  %8 = icmp sgt i8 %7, 0
  %9 = and i1 %4, %8
  %10 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %11 = trunc i64 %10 to i32
  %12 = call i8 @eq_int32_t_nullable_lhs(i32 %11, i32 %arg_literal_8, i64 -2147483648, i8 -128)
  %13 = icmp sgt i8 %12, 0
  %14 = and i1 %9, %13
  %15 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 4, i64 %extra1)
  %16 = trunc i64 %15 to i32
  %17 = call i8 @eq_int32_t_nullable_lhs(i32 %16, i32 %arg_literal_12, i64 -2147483648, i8 -128)
  %18 = icmp sgt i8 %17, 0
  %19 = and i1 %14, %18
  br i1 %19, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %20 = alloca i32, i32 2, align 4
  %21 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %extra2)
  %22 = trunc i64 %21 to i32
  %23 = getelementptr i32, i32* %20, i32 0
  store i32 %22, i32* %23, align 4
  %24 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %extra2)
  %25 = trunc i64 %24 to i32
  %26 = getelementptr i32, i32* %20, i32 1
  store i32 %25, i32* %26, align 4
  %27 = bitcast i32* %20 to i64*
  %28 = call i64* @get_group_value(i64* %group_by_buff, i32 930, i64* %27, i32 2, i32 4, i32 1)
  %29 = icmp ne i64* %28, null
  br i1 %29, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %30 = trunc i64 %pos to i32
  %31 = sub i32 0, %30
  ret i32 %31
}

End of IR
2025-04-19T00:18:43.274589 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:43.289476 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.086394
2025-04-19T00:18:43.350662 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.4772
2025-04-19T00:18:43.351431 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.7108
2025-04-19T00:18:43.369653 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 32.289
2025-04-19T00:18:43.386894 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     200 bytes stack frame, 192 bytes spill stores, 188 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 280 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:43.386927 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 473184 bytes
2025-04-19T00:18:43.387420 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:43.387725 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 116 ms
2025-04-19T00:18:43.387793 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:43.387803 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 2
	Target group by indices: 0,1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	col_to_slot_map=[[0], [1]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 930
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:43.387877 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:43.387906 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:43.387925 I 39334 3 30 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:43.387935 I 39334 3 30 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:43.387947 I 39334 3 30 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:43.477344 I 39334 3 30 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 89 ms
2025-04-19T00:18:43.481444 I 39334 3 30 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 93 ms
2025-04-19T00:18:43.481503 I 39334 3 30 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:43.481518 2 39334 3 30 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-5),nest_level(0)) InputDescriptor(db_id(1), table_id(5),nest_level(1)) InputDescriptor(db_id(1), table_id(8),nest_level(2)) InputDescriptor(db_id(1), table_id(12),nest_level(3))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-5),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-5),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-5),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(1))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(8),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(13),InputDescriptor(db_id(1), table_id(12),nest_level(3)))) ra_exe_unit.scan_limit=0 num_rows=((2160932 100000 73049 18000)) frag_offsets=((0 0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=930 device_id=0 outer_table_key=(db_id: 0, table_id: -5) scan_limit=0 start_rowid=0 num_tables=4
2025-04-19T00:18:43.481539 I 39334 3 30 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:43.481607 1 39334 3 30 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.013696 ms
2025-04-19T00:18:43.481618 1 39334 3 30 GpuInterrupt.cpp:26 Registered module 0x730d229aed50 on device 0
2025-04-19T00:18:43.481821 1 39334 3 30 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:43.481836 1 39334 3 30 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:43.481842 1 39334 3 30 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:43.482630 1 39334 3 30 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:43.482721 1 39334 3 30 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:43.482734 1 39334 3 30 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:43.482740 I 39334 3 30 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 1 ms
2025-04-19T00:18:43.483375 3 39334 3 30 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:18:43.483459 3 39334 3 30 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i32*
  %row_ptr_loaded = load i32, i32* %0, align 4
  %is_key_empty = icmp eq i32 %row_ptr_loaded, 2147483647
  ret i1 %is_key_empty
}
2025-04-19T00:18:43.483490 3 39334 3 30 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_targets_ptr, i8* %that_targets_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %target_1_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 0
  %target_1_first_slot1 = getelementptr i8, i8* %that_targets_ptr, i32 0
  ret i32 0
}
2025-04-19T00:18:43.483514 3 39334 3 30 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %that_entry_idx_64 = sext i32 %that_entry_idx to i64
  %that_row_off_in_bytes = mul i64 %that_entry_idx_64, 8
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %that_row_off_in_bytes
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_ptr_out = alloca i64*, align 8
  %this_is_empty_out = alloca i8, align 1
  call void @get_group_value_reduction_rt(i8* %this_buff, i8* %that_row_ptr, i32 2, i8* %this_qmd_handle, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i64 8, i64** %this_targets_ptr_out, i8* %this_is_empty_out)
  %this_targets_ptr_i64 = load i64*, i64** %this_targets_ptr_out, align 8
  %this_is_empty = load i8, i8* %this_is_empty_out, align 1
  %this_is_empty_bool = trunc i8 %this_is_empty to i1
  br i1 %this_is_empty_bool, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 0

.do_reduction2:                                   ; preds = %.do_reduction
  %this_targets_ptr = bitcast i64* %this_targets_ptr_i64 to i8*
  %that_targets_ptr = getelementptr i8, i8* %that_row_ptr, i32 8
  %0 = call i32 @reduce_one_entry(i8* %this_targets_ptr, i8* %that_targets_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:18:43.486276 2 39334 3 30 Execute.cpp:4139 results->rowCount()=465
2025-04-19T00:18:43.486373 I 39334 3 30 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 4 ms
2025-04-19T00:18:43.486390 I 39334 3 30 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 98 ms
2025-04-19T00:18:43.486437 1 39334 3 12 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:43.486455 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 214 ms
2025-04-19T00:18:43.486485 1 39334 3 12 Execute.cpp:5202 Put estimated cardinality to the cache
2025-04-19T00:18:43.486511 I 39334 3 12 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 639 ms
2025-04-19T00:18:43.486522 3 39334 3 12 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-40, ...) exec_desc.getResult().getDataPtr()->rowCount()=465
2025-04-19T00:18:43.486604 I 39334 3 12 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 640 ms
2025-04-19T00:18:43.486610 1 39334 3 12 RelAlgExecutor.cpp:945 Executing query step 4 / 6
2025-04-19T00:18:43.486616 I 39334 3 12 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:43.486634 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 2
2025-04-19T00:18:43.486640 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=2
2025-04-19T00:18:43.486682 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1 input_col_descs_unique.size()=2 source_used_inputs.size()=12
2025-04-19T00:18:43.486701 3 39334 3 12 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(0), table_id(-40),nest_level(0)) InputDescriptor(db_id(1), table_id(18),nest_level(1)) InputDescriptor(db_id(1), table_id(6),nest_level(2)) InputDescriptor(db_id(1), table_id(16),nest_level(3)) InputDescriptor(db_id(1), table_id(8),nest_level(4)))
2025-04-19T00:18:43.486706 3 39334 3 12 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(18),nest_level(1))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(1))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(18),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(2))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(6),nest_level(2))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(2))) InputColDescriptor(col_id(24),InputDescriptor(db_id(1), table_id(16),nest_level(3))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(4))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(8),nest_level(4))))
2025-04-19T00:18:43.486817 2 39334 3 12 FromTableReordering.cpp:508 Table reordering starting with nest level 1
2025-04-19T00:18:43.486828 2 39334 3 12 FromTableReordering.cpp:529 Table reordering picked start nest level 1 with cost 100
2025-04-19T00:18:43.486833 1 39334 3 12 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 1
2025-04-19T00:18:43.486838 1 39334 3 12 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 4
2025-04-19T00:18:43.486842 1 39334 3 12 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 0
2025-04-19T00:18:43.486846 1 39334 3 12 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 2
2025-04-19T00:18:43.486851 1 39334 3 12 FromTableReordering.cpp:539 Insert input permutation, idx: 4, nest_level: 3
2025-04-19T00:18:43.486856 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:43.486864 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(date_dim, ["d_date_sk", "d_date_id", "d_date", "d_month_seq", "d_week_seq", "d_quarter_seq", "d_year", "d_dow", "d_moy", "d_dom", "d_qoy", "d_fy_year", "d_fy_quarter_seq", "d_fy_week_seq", "d_day_name", "d_quarter_name", "d_holiday", "d_weekend", "d_following_holiday", "d_first_dom", "d_last_dom", "d_same_day_ly", "d_same_day_lq", "d_current_day", "d_current_week", "d_current_month", "d_current_quarter", "d_current_year", "rowid"]) to nest level 1
2025-04-19T00:18:43.486870 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1 to nest level 2
2025-04-19T00:18:43.486880 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:43.486886 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 4
2025-04-19T00:18:43.486895 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 2
2025-04-19T00:18:43.486900 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=2
2025-04-19T00:18:43.486926 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1 input_col_descs_unique.size()=2 source_used_inputs.size()=12
2025-04-19T00:18:43.486944 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:43.486950 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(date_dim, ["d_date_sk", "d_date_id", "d_date", "d_month_seq", "d_week_seq", "d_quarter_seq", "d_year", "d_dow", "d_moy", "d_dom", "d_qoy", "d_fy_year", "d_fy_quarter_seq", "d_fy_week_seq", "d_day_name", "d_quarter_name", "d_holiday", "d_weekend", "d_following_holiday", "d_first_dom", "d_last_dom", "d_same_day_ly", "d_same_day_lq", "d_current_day", "d_current_week", "d_current_month", "d_current_quarter", "d_current_year", "rowid"]) to nest level 1
2025-04-19T00:18:43.486956 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1 to nest level 2
2025-04-19T00:18:43.486965 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:43.486970 1 39334 3 12 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 4
2025-04-19T00:18:43.486978 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 2
2025-04-19T00:18:43.486983 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=2
2025-04-19T00:18:43.487002 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1 input_col_descs_unique.size()=2 source_used_inputs.size()=12
2025-04-19T00:18:43.487065 3 39334 3 12 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1) = 3
2025-04-19T00:18:43.487106 I 39334 3 12 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:43.487121 3 39334 3 12 RelAlgExecutor.cpp:3692 body->getId()=41 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:43.487174 1 39334 3 12 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:43.487179 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 1823952035016052426
	Table/Col/Levels: ((db_id: 1, table_id: 18), 1, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 16, 0) ((db_id: 1, table_id: 8), 1, 1) ((db_id: 1, table_id: 8), 4, 1) ((db_id: 0, table_id: -40), 0, 2) ((db_id: 0, table_id: -40), 1, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 8, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 16), 24, 4) ((db_id: 1, table_id: 16), 25, 4) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (>= (ColumnVar (db_id: 1, table_id: 8, column_id: 4), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1189) ) , (<= (ColumnVar (db_id: 1, table_id: 8, column_id: 4), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1191) ) 		1 INNER(= (ColumnVar (db_id: 0, table_id: -40, column_id: 0), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 0, table_id: -40, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		3 INNER(= < (ColumnVar (db_id: 1, table_id: 6, column_id: 8), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=38, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 38), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 16, column_id: 24), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=105, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 105), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) > ) 
	Group By: (ColumnVar (db_id: 0, table_id: -40, column_id: 0), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 0, table_id: -40, column_id: 0), rte: 2, which_row: 3, varno: 1) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 16), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:43.487214 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:43.487227 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:43.488101 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:43.488121 1 39334 3 12 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:43.488252 1 39334 3 31 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 73049, # entries stored in the payload buffer: 73049, hash table size : 292196 Bytes
2025-04-19T00:18:43.488469 1 39334 3 12 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 14051107868346617177)
2025-04-19T00:18:43.488484 1 39334 3 12 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:43.488496 1 39334 3 12 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:43.488536 1 39334 3 12 HashJoin.cpp:357 Building a perfect join hash table fails: Switch to baseline hash join: a join column has too wide hash value range when comparing the actual # rows(# hash entries: 99491, # rows: 930)
2025-04-19T00:18:43.488547 1 39334 3 12 HashJoin.cpp:358 Trying to re-build keyed join hash table
2025-04-19T00:18:43.488551 1 39334 3 12 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= (ColumnVar (db_id: 0, table_id: -40, column_id: 0), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
2025-04-19T00:18:43.488580 I 39334 3 12 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:43.488756 I 39334 3 12 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:43.488863 1 39334 3 32 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToOne, hash table size: 14880 Bytes, # hash entries: 1860, # entries stored in the payload buffer: 465, rowid size: 4 Bytes
2025-04-19T00:18:43.490409 1 39334 3 12 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 1 ms
2025-04-19T00:18:43.490425 1 39334 3 12 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:43.490459 1 39334 3 12 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,1,0,
2025-04-19T00:18:43.490470 1 39334 3 12 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,1,0,
2025-04-19T00:18:43.490718 1 39334 3 33 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 50000, # entries stored in the payload buffer: 50000, hash table size : 200000 Bytes
2025-04-19T00:18:43.490884 1 39334 3 12 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 10209159661055272150)
2025-04-19T00:18:43.490904 1 39334 3 12 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:43.490916 1 39334 3 12 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:43.490921 1 39334 3 12 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 6, column_id: 8), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=38, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 38), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 16, column_id: 24), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=105, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 105), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:43.491023 1 39334 3 12 StringDictionaryProxy.cpp:354 100.00% (1 entries) from dictionary ((db_id: 1, string_dict_id: 105)) with 1 total entries ( 0 literals) translated to dictionary ((db_id: 1, string_dict_id: 38)) with 1846 total entries (0 literals).
2025-04-19T00:18:43.491055 1 39334 3 12 StringDictionaryProxy.cpp:354 100.00% (1 entries) from dictionary ((db_id: 1, string_dict_id: 106)) with 1 total entries ( 0 literals) translated to dictionary ((db_id: 1, string_dict_id: 39)) with 51 total entries (0 literals).
2025-04-19T00:18:43.491073 1 39334 3 12 BaselineJoinHashTable.cpp:1116 Checking CPU hash table cache.
2025-04-19T00:18:43.491088 1 39334 3 12 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,24,0,
2025-04-19T00:18:43.491109 1 39334 3 12 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,25,0,
2025-04-19T00:18:43.491172 1 39334 3 34 BaselineHashTable.h:110 Initialize a CPU baseline hash table with join type OneToOne, hash table size: 288 Bytes, # hash entries: 24, # entries stored in the payload buffer: 12, rowid size: 4 Bytes
2025-04-19T00:18:43.492886 1 39334 3 12 BaselineJoinHashTable.cpp:304 Caught exception while building baseline hash table: Unrecognized error when initializing baseline hash table (-1)
2025-04-19T00:18:43.492928 1 39334 3 12 BaselineJoinHashTable.cpp:1116 Checking CPU hash table cache.
2025-04-19T00:18:43.494310 1 39334 3 67 BaselineHashTable.h:110 Initialize a CPU baseline hash table with join type OneToMany, hash table size: 80 Bytes, # hash entries: 2, # entries stored in the payload buffer: 12, rowid size: 4 Bytes
2025-04-19T00:18:43.499021 1 39334 3 67 HashtableRecycler.cpp:161 [Baseline Join Hashtable, CPU] Put item to cache (key: 1894868972447082495)
2025-04-19T00:18:43.499038 1 39334 3 67 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 1894868972447082495)
2025-04-19T00:18:43.499049 1 39334 3 67 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToMany, hash table size: 80 Bytes, # hash entries: 2, # entries stored in the payload buffer: 12, rowid size: 4 Bytes
2025-04-19T00:18:43.499126 1 39334 3 12 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToMany in 8 ms
2025-04-19T00:18:43.499141 2 39334 3 12 HashJoin.cpp:379 Built GPU hash table: | keyedOneToMany | keys * (152,6) | offsets * 0 | counts * 12 | payloads 0 1 2 3 4 5 6 7 8 9 10 11 |
2025-04-19T00:18:43.499172 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 11 ms
2025-04-19T00:18:43.499522 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:18:43.499538 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 2 / literal buffer usage: 8 bytes
2025-04-19T00:18:43.500053 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8*, i8** %byte_stream, i32 11
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8, i8* %literals, i16 0
  %25 = bitcast i8* %24 to i32*
  %literal_0 = load i32, i32* %25, align 4
  %26 = getelementptr i8, i8* %literals, i16 4
  %27 = bitcast i8* %26 to i32*
  %literal_4 = load i32, i32* %27, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %28 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %29 = call i32 @pos_start_impl(i32* %row_index_resume)
  %30 = call i32 @pos_step_impl()
  %31 = call i32 @group_buff_idx_impl()
  %32 = sext i32 %29 to i64
  %33 = getelementptr i64*, i64** %group_by_buffers, i32 %31
  %col_buffer = load i64*, i64** %33, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %34 = icmp slt i64 %32, %row_count
  br i1 %34, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %35 = sext i32 %30 to i64
  br label %.forbody

.forbody:                                         ; preds = %44, %.loop.preheader
  %pos = phi i64 [ %32, %.loop.preheader ], [ %45, %44 ]
  %36 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i8* %23, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_4, i32 %literal_0)
  %37 = lshr i64 %pos, 15
  %38 = and i64 %37, 32
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %40 = call i1 @check_interrupt()
  %41 = select i1 %40, i32 10, i32 %36
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %42 = phi i32 [ %41, %.interrupt_check ], [ %36, %.forbody ]
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %.error_exit, label %44

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %42, i32* %error_code)
  ret void

44:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %45 = add i64 %pos, %35
  %46 = icmp slt i64 %45, %row_count
  br i1 %46, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %44
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i8* %col_buf11, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %ub_iter_head_, %singleton_true_3, %singleton_true_1, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = load i64, i64* %join_hash_tables, align 8
  %3 = sext i32 %1 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %2, i64 %3, i64 2415022, i64 2488070, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %6 = load i1, i1* %remaining_outer_cond_match, align 1
  %7 = and i1 %5, %6
  br i1 %7, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %8 = alloca i32, i64 4, align 4
  %9 = getelementptr i32, i32* %8, i64 0
  %10 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %11 = trunc i64 %10 to i32
  store i32 %11, i32* %9, align 4
  %12 = getelementptr i64, i64* %join_hash_tables, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = inttoptr i64 %13 to i8*
  %15 = bitcast i32* %8 to i8*
  %16 = call i64 @baseline_hash_join_idx_32(i8* %14, i8* %15, i64 4, i64 1860)
  %17 = icmp sge i64 %16, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %18 = load i1, i1* %remaining_outer_cond_match2, align 1
  %19 = and i1 %17, %18
  br i1 %19, label %singleton_true_3, label %exit

singleton_true_3:                                 ; preds = %singleton_true_1
  %20 = call i64 @fixed_width_int_decode(i8* %col_buf6, i32 4, i64 %16)
  %21 = trunc i64 %20 to i32
  %22 = getelementptr i64, i64* %join_hash_tables, i64 2
  %23 = load i64, i64* %22, align 8
  %24 = sext i32 %21 to i64
  %25 = call i64 @hash_join_idx_nullable(i64 %23, i64 %24, i64 1, i64 50000, i64 -2147483648)
  %26 = icmp sge i64 %25, 0
  %remaining_outer_cond_match4 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match4, align 1
  %27 = load i1, i1* %remaining_outer_cond_match4, align 1
  %28 = and i1 %26, %27
  br i1 %28, label %ub_iter_preheader_, label %exit

ub_iter_preheader_:                               ; preds = %singleton_true_3
  %ub_iter_counter_ptr_ = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %29 = alloca i32, i64 8, align 4
  %30 = getelementptr i32, i32* %29, i64 0
  %31 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %25)
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %30, align 4
  %33 = getelementptr i32, i32* %29, i64 1
  %34 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 4, i64 %25)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %33, align 4
  %36 = getelementptr i64, i64* %join_hash_tables, i64 3
  %37 = load i64, i64* %36, align 8
  %38 = inttoptr i64 %37 to i32*
  %39 = call i64 @get_composite_key_index_32(i32* %29, i64 2, i32* %38, i64 2)
  %40 = add i64 %37, 16
  %41 = call i64 @hash_join_idx(i64 %40, i64 %39, i64 0, i64 1)
  %42 = icmp sge i64 %41, 0
  %43 = add i64 %40, 8
  %44 = call i64 @hash_join_idx(i64 %43, i64 %39, i64 0, i64 1)
  %45 = select i1 %42, i64 %44, i64 0
  %46 = add i64 %40, 16
  %47 = inttoptr i64 %46 to i32*
  %48 = getelementptr i32, i32* %47, i64 %41
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %ub_iter_counter_ = getelementptr i32, i32* %48, i64 %ub_iter_counter_val_
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %45
  br i1 %have_more_inner_rows, label %loop_body, label %exit

ub_iter_advance_:                                 ; preds = %loop_done_false
  %49 = add i64 %ub_iter_counter_val_, 1
  store i64 %49, i64* %ub_iter_counter_ptr_, align 8
  br label %ub_iter_head_

loop_body:                                        ; preds = %ub_iter_head_
  store i1 true, i1* %loop_done, align 1
  %50 = call i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %4, i8* %col_buf5, i64 %16, i64* %group_by_buff, i8* %col_buf2, i64 %pos, i1* %loop_done, i32 %arg_literal_4, i32 %arg_literal_0)
  %51 = load i1, i1* %loop_done, align 1
  br i1 %51, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %50

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %extra0, i8* %col_buf5, i64 %extra1, i64* %group_by_buff, i8* %col_buf2, i64 %pos, i1* %loop_done, i32 %arg_literal_4, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %extra0)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @ge_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i8 @le_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_4, i64 -2147483648, i8 -128)
  %6 = icmp sgt i8 %5, 0
  %7 = and i1 %4, %6
  br i1 %7, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf5, i32 4, i64 %extra1)
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %9 to i64
  %11 = call i64* @get_group_value_fast(i64* %group_by_buff, i64 %10, i64 141, i64 0, i32 3)
  %12 = call i64 @fixed_width_int_decode(i8* %col_buf5, i32 4, i64 %extra1)
  %13 = trunc i64 %12 to i32
  %agg_col_ptr = getelementptr i64, i64* %11, i64 0
  %14 = sext i32 %13 to i64
  call void @agg_id_shared(i64* %agg_col_ptr, i64 %14)
  %15 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %16 = trunc i64 %15 to i32
  %17 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %16, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr1 = getelementptr i64, i64* %11, i64 1
  %18 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr1, i64 %17, i64 -9223372036854775808)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:18:43.500482 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:43.515418 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.090165
2025-04-19T00:18:43.577379 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.392
2025-04-19T00:18:43.578192 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.6504
2025-04-19T00:18:43.596119 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 32.9564
2025-04-19T00:18:43.611933 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     256 bytes stack frame, 204 bytes spill stores, 204 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 320 stack, 0 bytes smem, 464 bytes cmem[0], 12 bytes cmem[2], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:43.611965 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 476960 bytes
2025-04-19T00:18:43.612457 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:43.612751 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 125 ms
2025-04-19T00:18:43.612842 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:43.612851 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Perfect Hash
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	1 | 8 , 8
	col_to_slot_map=[[0], [1]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: True
	Lazy Init Groups (GPU): True
	Entry Count: 99491
	Min Val (perfect hash only): 141
	Max Val (perfect hash only): 99631
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:43.612932 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:43.612961 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:43.612980 I 39334 3 100 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:43.612998 I 39334 3 100 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:43.613014 1 39334 3 100 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,1,0,
2025-04-19T00:18:43.613025 1 39334 3 100 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,1,0,
2025-04-19T00:18:43.621852 1 39334 3 100 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,4,0,
2025-04-19T00:18:43.621879 1 39334 3 100 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,4,0,
2025-04-19T00:18:43.630623 1 39334 3 100 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,16,0,
2025-04-19T00:18:43.630652 1 39334 3 100 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,16,0,
2025-04-19T00:18:43.639482 1 39334 3 100 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,8,0,
2025-04-19T00:18:43.639510 1 39334 3 100 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,8,0,
2025-04-19T00:18:43.639638 1 39334 3 100 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,9,0,
2025-04-19T00:18:43.639646 1 39334 3 100 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,9,0,
2025-04-19T00:18:43.639784 I 39334 3 100 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 26 ms
2025-04-19T00:18:43.639832 I 39334 3 100 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:43.639841 2 39334 3 100 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(8),nest_level(1)) InputDescriptor(db_id(0), table_id(-40),nest_level(2)) InputDescriptor(db_id(1), table_id(6),nest_level(3)) InputDescriptor(db_id(1), table_id(16),nest_level(4))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(1))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(8),nest_level(1))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-40),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-40),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(24),InputDescriptor(db_id(1), table_id(16),nest_level(4))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(4)))) ra_exe_unit.scan_limit=0 num_rows=((2880404 73049 465 50000 12)) frag_offsets=((0 0 0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=99491 device_id=0 outer_table_key=(db_id: 1, table_id: 18) scan_limit=0 start_rowid=0 num_tables=5
2025-04-19T00:18:43.639862 I 39334 3 100 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:43.639909 1 39334 3 100 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.007872 ms
2025-04-19T00:18:43.639920 1 39334 3 100 GpuInterrupt.cpp:26 Registered module 0x730d227a7ca0 on device 0
2025-04-19T00:18:43.640153 1 39334 3 100 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:43.640162 1 39334 3 100 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:43.640166 1 39334 3 100 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:43.640745 1 39334 3 100 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:43.642132 1 39334 3 100 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:43.642148 1 39334 3 100 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 1 ms
2025-04-19T00:18:43.642153 I 39334 3 100 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 2 ms
2025-04-19T00:18:43.642809 3 39334 3 100 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:18:43.642889 3 39334 3 100 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i64*
  %row_ptr_loaded = load i64, i64* %0, align 8
  %is_key_empty = icmp eq i64 %row_ptr_loaded, 9223372036854775807
  ret i1 %is_key_empty
}
2025-04-19T00:18:43.642920 3 39334 3 100 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %this_row_ptr, i8* %that_row_ptr, i32 8, i1 false)
  %this_targets_start = getelementptr i8, i8* %this_row_ptr, i32 8
  %that_targets_start = getelementptr i8, i8* %that_row_ptr, i32 8
  %0 = bitcast i8* %that_targets_start to i64*
  %that_targets_start_loaded = load i64, i64* %0, align 8
  call void @write_projection_int64(i8* %this_targets_start, i64 %that_targets_start_loaded, i64 0)
  %this_target_1_first_slot = getelementptr i8, i8* %this_targets_start, i32 8
  %that_target_1_first_slot = getelementptr i8, i8* %that_targets_start, i32 8
  %sum_dest = bitcast i8* %this_target_1_first_slot to i64*
  %1 = bitcast i8* %that_target_1_first_slot to i64*
  %that_target_1_first_slot_loaded = load i64, i64* %1, align 8
  %2 = call i64 @agg_sum_skip_val(i64* %sum_dest, i64 %that_target_1_first_slot_loaded, i64 -9223372036854775808)
  ret i32 0
}
2025-04-19T00:18:43.642964 3 39334 3 100 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %entry_idx_64 = sext i32 %that_entry_idx to i64
  %row_off_in_bytes = mul i64 %entry_idx_64, 24
  %this_row_ptr = getelementptr i8, i8* %this_buff, i64 %row_off_in_bytes
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %row_off_in_bytes
  %0 = call i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:18:43.646121 2 39334 3 100 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:43.646499 I 39334 3 100 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 6 ms
2025-04-19T00:18:43.646524 I 39334 3 100 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 33 ms
2025-04-19T00:18:43.646572 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 159 ms
2025-04-19T00:18:43.646657 I 39334 3 12 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 159 ms
2025-04-19T00:18:43.646671 3 39334 3 12 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-41, ...) exec_desc.getResult().getDataPtr()->rowCount()=0
2025-04-19T00:18:43.646678 I 39334 3 12 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 160 ms
2025-04-19T00:18:43.646684 1 39334 3 12 RelAlgExecutor.cpp:945 Executing query step 5 / 6
2025-04-19T00:18:43.646690 I 39334 3 12 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:43.646706 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 1
2025-04-19T00:18:43.646711 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=1
2025-04-19T00:18:43.646828 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1 input_col_descs_unique.size()=1 source_used_inputs.size()=0
2025-04-19T00:18:43.646857 3 39334 3 12 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(0), table_id(-41),nest_level(0)))
2025-04-19T00:18:43.646862 3 39334 3 12 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-41),nest_level(0))))
2025-04-19T00:18:43.646870 3 39334 3 12 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1) = 2
2025-04-19T00:18:43.646920 I 39334 3 12 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:43.646932 3 39334 3 12 RelAlgExecutor.cpp:3692 body->getId()=42 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:43.646976 1 39334 3 12 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:43.646981 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 1823952035016052426
	Table/Col/Levels: ((db_id: 0, table_id: -41), 1, 0) 
	Group By: (CAST INTEGER(0,0) NONE(0) (/ (CAST DECIMAL(12,2)(12,2) NONE(0) (ColumnVar (db_id: 0, table_id: -41, column_id: 1), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) (Const        50.00) ) ) 
	Projected targets: (Var (db_id: 0, table_id: 0, column_id: 0), rte: -1, which_row: 3, varno: 1) , (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:43.646994 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:43.647003 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:43.647057 1 39334 3 12 NativeCodegen.cpp:2912 GPU shared memory is used for the Perfect Hash query(16 out of 4096 bytes).
2025-04-19T00:18:43.647721 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:43.647730 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:43.647862 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:18:43.647877 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:43.649155 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %2 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %3 = call i32 @pos_start_impl(i32* %row_index_resume)
  %4 = call i32 @pos_step_impl()
  %5 = call i32 @group_buff_idx_impl()
  %6 = sext i32 %3 to i64
  %7 = getelementptr i64*, i64** %group_by_buffers, i32 %5
  %col_buffer = load i64*, i64** %7, align 8
  %result_buffer = call i64* @init_smem_func(i64* %col_buffer, i32 16)
  %8 = icmp slt i64 %6, %row_count
  br i1 %8, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %9 = sext i32 %4 to i64
  br label %.forbody

.forbody:                                         ; preds = %18, %.loop.preheader
  %pos = phi i64 [ %6, %.loop.preheader ], [ %19, %18 ]
  %10 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i64* %join_hash_tables, i8* %row_func_mgr)
  %11 = lshr i64 %pos, 15
  %12 = and i64 %11, 32
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %14 = call i1 @check_interrupt()
  %15 = select i1 %14, i32 10, i32 %10
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %16 = phi i32 [ %15, %.interrupt_check ], [ %10, %.forbody ]
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %.error_exit, label %18

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %16, i32* %error_code)
  ret void

18:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %19 = add i64 %pos, %9
  %20 = icmp slt i64 %19, %row_count
  br i1 %20, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %18
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @reduce_from_smem_to_gmem(i64* %col_buffer, i64* %result_buffer, i32 16)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %0 = call i32 @filter_func(i8* %col_buf0, i64 %pos, i64* %group_by_buff)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i8* %col_buf0, i64 %pos, i64* %group_by_buff) #34 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 8, i64 %pos)
  %1 = call i64 @safe_div_int64_t(i64 %0, i64 50, i64 -9223372036854775808)
  %2 = call i64 @scale_decimal_down_nullable(i64 %1, i64 100, i64 -9223372036854775808)
  %3 = call i32 @cast_int64_t_to_int32_t_nullable(i64 %2, i64 -9223372036854775808, i32 -2147483648)
  %4 = call i64 @translate_null_key_int32_t(i32 %3, i32 -2147483648, i64 1)
  %5 = sext i32 %3 to i64
  %6 = call i64* @get_group_value_fast_keyless(i64* %group_by_buff, i64 %4, i64 0, i64 0, i32 1)
  %7 = bitcast i64* %6 to i32*
  %agg_col_ptr = getelementptr i32, i32* %7, i64 0
  call void @agg_id_int32_shared(i32* %agg_col_ptr, i32 %3)
  %8 = bitcast i64* %6 to i32*
  %9 = getelementptr i32, i32* %8, i32 1
  %10 = addrspacecast i32* %9 to i32 addrspace(3)*
  %11 = atomicrmw add i32 addrspace(3)* %10, i32 1 monotonic, align 4
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:43.649411 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:43.662648 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.088139
2025-04-19T00:18:43.722322 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.6355
2025-04-19T00:18:43.723095 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 14.8737
2025-04-19T00:18:43.741164 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 31.3399
2025-04-19T00:18:43.756684 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for reduce_from_smem_to_gmem
ptxas         .     32 bytes stack frame, 28 bytes spill stores, 28 bytes spill loads
ptxas info    : Function properties for init_smem_func
ptxas         .     24 bytes stack frame, 20 bytes spill stores, 20 bytes spill loads
ptxas info    : Function properties for query_group_by_template
ptxas         .     88 bytes stack frame, 88 bytes spill stores, 88 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 48 registers, 176 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:43.756722 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 463776 bytes
2025-04-19T00:18:43.757226 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:43.757473 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 110 ms
2025-04-19T00:18:43.757529 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:43.757534 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Perfect Hash
	Keyless Hash: True, target index for key: 1
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 4 , 4
	1 | 4 , 4
	col_to_slot_map=[[0], [1]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: True
	Lazy Init Groups (GPU): True
	Entry Count: 2
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:43.757610 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:43.757640 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:43.757659 I 39334 3 3458 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:43.757669 I 39334 3 3458 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:43.757680 I 39334 3 3458 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:43.757697 I 39334 3 3458 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:43.757712 I 39334 3 3458 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:43.757862 I 39334 3 3458 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:43.757872 2 39334 3 3458 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-41),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-41),nest_level(0)))) ra_exe_unit.scan_limit=0 num_rows=((0)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=2 device_id=0 outer_table_key=(db_id: 0, table_id: -41) scan_limit=0 start_rowid=0 num_tables=1
2025-04-19T00:18:43.757889 I 39334 3 3458 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:43.757945 1 39334 3 3458 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.016160 ms
2025-04-19T00:18:43.757955 1 39334 3 3458 GpuInterrupt.cpp:26 Registered module 0x730d206416c0 on device 0
2025-04-19T00:18:43.758356 1 39334 3 3458 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:43.758364 1 39334 3 3458 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:43.758369 1 39334 3 3458 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:43.758430 1 39334 3 3458 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:43.758509 1 39334 3 3458 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:43.758522 1 39334 3 3458 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:43.758527 I 39334 3 3458 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:43.759083 3 39334 3 3458 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:18:43.759157 3 39334 3 3458 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %is_empty_slot_ptr = getelementptr i8, i8* %row_ptr, i32 4
  %0 = bitcast i8* %is_empty_slot_ptr to i32*
  %is_empty_slot_ptr_loaded = load i32, i32* %0, align 4
  %1 = sext i32 %is_empty_slot_ptr_loaded to i64
  %is_key_empty = icmp eq i64 %1, 0
  ret i1 %is_key_empty
}
2025-04-19T00:18:43.759191 3 39334 3 3458 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_start = getelementptr i8, i8* %this_row_ptr, i32 0
  %that_targets_start = getelementptr i8, i8* %that_row_ptr, i32 0
  %0 = bitcast i8* %that_targets_start to i32*
  %that_targets_start_loaded = load i32, i32* %0, align 4
  call void @write_projection_int32(i8* %this_targets_start, i32 %that_targets_start_loaded, i64 0)
  %this_target_1_first_slot = getelementptr i8, i8* %this_targets_start, i32 4
  %that_target_1_first_slot = getelementptr i8, i8* %that_targets_start, i32 4
  %count_dest = bitcast i8* %this_target_1_first_slot to i32*
  %1 = bitcast i8* %that_target_1_first_slot to i32*
  %that_target_1_first_slot_loaded = load i32, i32* %1, align 4
  %2 = call i32 @agg_sum_int32(i32* %count_dest, i32 %that_target_1_first_slot_loaded)
  ret i32 0
}
2025-04-19T00:18:43.759226 3 39334 3 3458 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %entry_idx_64 = sext i32 %that_entry_idx to i64
  %row_off_in_bytes = mul i64 %entry_idx_64, 8
  %this_row_ptr = getelementptr i8, i8* %this_buff, i64 %row_off_in_bytes
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %row_off_in_bytes
  %0 = call i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:18:43.762030 2 39334 3 3458 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:43.762046 I 39334 3 3458 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 4 ms
2025-04-19T00:18:43.762089 I 39334 3 3458 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 4 ms
2025-04-19T00:18:43.762119 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 115 ms
2025-04-19T00:18:43.762132 I 39334 3 12 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 115 ms
2025-04-19T00:18:43.762143 3 39334 3 12 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-42, ...) exec_desc.getResult().getDataPtr()->rowCount()=0
2025-04-19T00:18:43.762154 I 39334 3 12 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 115 ms
2025-04-19T00:18:43.762160 1 39334 3 12 RelAlgExecutor.cpp:945 Executing query step 6 / 6
2025-04-19T00:18:43.762165 I 39334 3 12 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:43.762182 3 39334 3 12 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:18:43.762187 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=1) RexOperator(12, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=0) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["segment", "num_customers", "segment_base"]) input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:18:43.762297 3 39334 3 12 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=1) RexOperator(12, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=0) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["segment", "num_customers", "segment_base"]) input_col_descs_unique.size()=2 source_used_inputs.size()=0
2025-04-19T00:18:43.762365 3 39334 3 12 RelAlgExecutor.cpp:4896 input_descs=(InputDescriptor(db_id(0), table_id(-42),nest_level(0)))
2025-04-19T00:18:43.762370 3 39334 3 12 RelAlgExecutor.cpp:4897 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-42),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-42),nest_level(0))))
2025-04-19T00:18:43.762378 3 39334 3 12 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelProject(RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=1) RexOperator(12, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=0) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["segment", "num_customers", "segment_base"])) = 3
2025-04-19T00:18:43.762466 I 39334 3 12 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:43.762475 3 39334 3 12 RelAlgExecutor.cpp:3692 body->getId()=38 body->toString()=RelProject(RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=1) RexOperator(12, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , agg_exps=RexAgg(agg=4, distinct=0, type=BIGINT, operands=[]) , scalar_sources=RexOperator(19, operands=RexOperator(13, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) , agg_exps=, scalar_sources=RexInput(customer.c_customer_sk) RexInput(customer.c_current_addr_sk) RexRef(1) RexRef(2) , 2, , fields=["c_customer_sk", "c_current_addr_sk"], is_agg=1, in_index=0) RexInput(store_sales.ss_ext_sales_price) RexRef(1) , 1, , fields=["c_customer_sk", "revenue"], is_agg=1, in_index=1) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=DECIMAL, dimension=19, scale=2, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) RexRef(1) , 1, , fields=["segment", "num_customers"], is_agg=1, in_index=0) RexLiteral(50 type=DECIMAL(2,0) target_type=INT(10,0)) , type=(type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["segment", "num_customers", "segment_base"]) it==leaf_results_.end()=true
2025-04-19T00:18:43.762550 1 39334 3 12 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:18:43.762555 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 2445370724775975965
	Table/Col/Levels: ((db_id: 0, table_id: -42), 0, 0) ((db_id: 0, table_id: -42), 1, 0) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:43.762564 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:43.762572 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:43.762601 1 39334 3 12 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:18:43.763192 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:43.763203 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:43.763236 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:18:43.763246 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:43.763462 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %4 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %6 = sext i32 %pos_start to i64
  %7 = icmp slt i64 %6, %row_count
  br i1 %7, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %8 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %17, %.loop.preheader
  %pos = phi i64 [ %6, %.loop.preheader ], [ %18, %17 ]
  %9 = call i32 @row_func(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i64* %join_hash_tables, i8* %row_func_mgr)
  %10 = lshr i64 %pos, 15
  %11 = and i64 %10, 32
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %13 = call i1 @check_interrupt()
  %14 = select i1 %13, i32 10, i32 %9
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %15 = phi i32 [ %14, %.interrupt_check ], [ %9, %.for.body ]
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %.error_exit, label %17

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %15, i32* %error_code)
  ret void

17:                                               ; preds = %.error_check
  %18 = add nsw i64 %pos, %8
  %19 = icmp slt i64 %18, %row_count
  br i1 %19, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %17
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %20 = phi i64 [ %.pre.result, %._crit_edge ], [ %5, %.entry ]
  %21 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %22 = call i64 @agg_sum_shared(i64* %21, i64 %20)
  call void @sync_threadblock()
  %23 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %23, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %0 = call i32 @filter_func(i64* %out)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i64* %out) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:43.763628 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:43.773596 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.07899
2025-04-19T00:18:43.835651 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.7517
2025-04-19T00:18:43.836457 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 16.0015
2025-04-19T00:18:43.849831 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 28.0518
2025-04-19T00:18:43.867270 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_template
ptxas         .     80 bytes stack frame, 80 bytes spill stores, 80 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 42 registers, 136 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:43.867310 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 455328 bytes
2025-04-19T00:18:43.867882 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:43.868068 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 105 ms
2025-04-19T00:18:43.868125 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:43.868131 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:43.868206 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:43.868231 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:43.868254 I 39334 3 3459 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:43.868263 I 39334 3 3459 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:43.868274 I 39334 3 3459 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:43.868286 I 39334 3 3459 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:43.868296 I 39334 3 3459 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:43.868320 I 39334 3 3459 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:43.868330 I 39334 3 3459 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:43.868376 1 39334 3 3459 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.015392 ms
2025-04-19T00:18:43.868385 1 39334 3 3459 GpuInterrupt.cpp:26 Registered module 0x730d22c84750 on device 0
2025-04-19T00:18:43.868503 1 39334 3 3459 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:18:43.868510 1 39334 3 3459 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:43.868515 1 39334 3 3459 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:43.868575 1 39334 3 3459 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:43.868652 1 39334 3 3459 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:43.868664 1 39334 3 3459 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:43.868669 I 39334 3 3459 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:43.868679 I 39334 3 3459 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:43.868689 I 39334 3 3459 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:43.868713 1 39334 3 12 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 0
2025-04-19T00:18:43.868747 1 39334 3 12 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:43.868769 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 106 ms
2025-04-19T00:18:43.868794 1 39334 3 12 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 1
2025-04-19T00:18:43.868812 1 39334 3 12 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:43.868817 1 39334 3 12 Execute.cpp:2026 Executor 1 is executing work unit:
	Extracted Query Plan Dag Hash: 2445370724775975965
	Table/Col/Levels: ((db_id: 0, table_id: -42), 0, 0) ((db_id: 0, table_id: -42), 1, 0) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 0, table_id: -42, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -42, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (* (ColumnVar (db_id: 0, table_id: -42, column_id: 0), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 50) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 1 , 2 
	  Algorithm: Streaming Top N
	  Limit: 100
	  Offset: 0
	Scan Limit: 1
	Bump Allocator: False
2025-04-19T00:18:43.868841 I 39334 3 12 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:43.868851 I 39334 3 12 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:43.869585 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:43.869595 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:43.870225 1 39334 3 12 QueryCompilationDescriptor.cpp:55 Retry query compilation with no GPU lazy fetch.
2025-04-19T00:18:43.870915 I 39334 3 12 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:43.870926 I 39334 3 12 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:43.870997 1 39334 3 12 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:18:43.871007 1 39334 3 12 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 4 bytes
2025-04-19T00:18:43.871307 3 39334 3 12 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8, i8* %literals, i16 0
  %5 = bitcast i8* %4 to i32*
  %literal_0 = load i32, i32* %5, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %7 = call i32 @pos_start_impl(i32* %row_index_resume)
  %8 = call i32 @pos_step_impl()
  %9 = call i32 @group_buff_idx_impl()
  %10 = sext i32 %7 to i64
  %11 = getelementptr i64*, i64** %group_by_buffers, i32 %9
  %col_buffer = load i64*, i64** %11, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %12 = icmp slt i64 %10, %row_count
  br i1 %12, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %13 = sext i32 %8 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %10, %.loop.preheader ], [ %23, %filter_match ], [ %23, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %14 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_0)
  %15 = lshr i64 %pos, 15
  %16 = and i64 %15, 32
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %18 = call i1 @check_interrupt()
  %19 = select i1 %18, i32 10, i32 %14
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %20 = phi i32 [ %19, %.interrupt_check ], [ %14, %.forbody ]
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %.error_exit, label %22

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %20, i32* %error_code)
  ret void

22:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %23 = add i64 %pos, %13
  %24 = icmp slt i64 %23, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %25 = icmp ne i32 %crt_matched1, 0
  br i1 %25, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %22
  %26 = load i32, i32* %old_total_matched, align 4
  %27 = add i32 %26, %crt_matched1
  %limit_not_reached = icmp slt i32 %27, %6
  %28 = and i1 %24, %limit_not_reached
  br i1 %28, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %22
  br i1 %24, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i8* %col_buf0, i8* %col_buf1, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i8* %col_buf0, i8* %col_buf1, i32 %arg_literal_0) #34 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %0 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %0, i32* %old_total_matched, align 4
  %1 = load i32, i32* %max_matched, align 4
  %2 = load i32, i32* %old_total_matched, align 4
  %3 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %1, i32 %2, i64 %pos, i32 4)
  %4 = icmp ne i64* %3, null
  br i1 %4, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %mul_ok, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  %agg_col_ptr = getelementptr i64, i64* %3, i64 0
  %7 = sext i32 %6 to i64
  call void @agg_id_shared(i64* %agg_col_ptr, i64 %7)
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %9 = trunc i64 %8 to i32
  %agg_col_ptr1 = getelementptr i64, i64* %3, i64 1
  %10 = sext i32 %9 to i64
  call void @agg_id_shared(i64* %agg_col_ptr1, i64 %10)
  %11 = icmp eq i32 %6, -2147483648
  %12 = icmp eq i32 %arg_literal_0, -2147483648
  %13 = or i1 %11, %12
  br i1 %13, label %mul_ok, label %operands_not_null

groupby_nullcheck_false:                          ; preds = %filter_true
  %14 = trunc i64 %pos to i32
  %15 = sub i32 0, %14
  ret i32 %15

mul_ok:                                           ; preds = %mul_check, %operands_not_null, %groupby_nullcheck_true
  %16 = call i32 @mul_int32_t_nullable_lhs(i32 %6, i32 %arg_literal_0, i64 -2147483648)
  %agg_col_ptr2 = getelementptr i64, i64* %3, i64 2
  %17 = sext i32 %16 to i64
  call void @agg_id_shared(i64* %agg_col_ptr2, i64 %17)
  br label %filter_false

operands_not_null:                                ; preds = %groupby_nullcheck_true
  %18 = icmp eq i32 %arg_literal_0, 0
  br i1 %18, label %mul_ok, label %mul_check

mul_fail:                                         ; preds = %mul_check
  ret i32 7

mul_check:                                        ; preds = %operands_not_null
  %19 = icmp slt i32 %arg_literal_0, 0
  %20 = sub i32 0, %arg_literal_0
  %21 = select i1 %19, i32 %20, i32 %arg_literal_0
  %22 = sub i32 0, %6
  %23 = select i1 %19, i32 %22, i32 %6
  %24 = sdiv i32 -2147483648, %21
  %25 = icmp slt i32 %23, %24
  %26 = sdiv i32 2147483647, %21
  %27 = icmp sgt i32 %23, %26
  %28 = or i1 %27, %25
  br i1 %28, label %mul_fail, label %mul_ok
}

End of IR
2025-04-19T00:18:43.871555 1 39334 3 12 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:43.883897 1 39334 3 12 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.094006
2025-04-19T00:18:43.947202 1 39334 3 12 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.9421
2025-04-19T00:18:43.948002 1 39334 3 12 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 16.1935
2025-04-19T00:18:43.964352 1 39334 3 12 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 32.3067
2025-04-19T00:18:43.982114 1 39334 3 12 NvidiaKernel.cpp:185 CUDA Linker completed: ptxas info    : Overriding maximum register limit 256 for 'multifrag_query_hoisted_literals' with  64 of maxrregcount option
ptxas info    : 142 bytes gmem
ptxas info    : Function properties for query_group_by_template
ptxas         .     136 bytes stack frame, 136 bytes spill stores, 136 bytes spill loads
ptxas info    : Compiling entry function 'multifrag_query_hoisted_literals' for 'sm_86'
ptxas info    : Function properties for multifrag_query_hoisted_literals
ptxas         .     56 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 28 registers, 464 bytes cmem[0]
info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 200 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:43.982152 1 39334 3 12 NvidiaKernel.cpp:188 Generated GPU binary code size: 458080 bytes
2025-04-19T00:18:43.982639 1 39334 3 12 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:43.982863 I 39334 3 12 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 114 ms
2025-04-19T00:18:43.982919 1 39334 3 12 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:43.982924 1 39334 3 12 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	1 | 8 , 4
	2 | 8 , 4
	col_to_slot_map=[[0], [1], [2]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: False
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:43.983010 1 39334 3 12 Execute.cpp:3132 In Executor::LaunchKernels executor 1 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:43.983039 1 39334 3 12 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:43.983058 I 39334 3 3460 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:43.983067 I 39334 3 3460 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:43.983077 I 39334 3 3460 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:43.983088 I 39334 3 3460 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:43.983104 I 39334 3 3460 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:43.983129 I 39334 3 3460 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:43.983136 2 39334 3 3460 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-42),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-42),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-42),nest_level(0)))) ra_exe_unit.scan_limit=1 num_rows=((0)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=1 device_id=0 outer_table_key=(db_id: 0, table_id: -42) scan_limit=1 start_rowid=0 num_tables=1
2025-04-19T00:18:43.983147 I 39334 3 3460 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:43.983190 1 39334 3 3460 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.011200 ms
2025-04-19T00:18:43.983200 1 39334 3 3460 GpuInterrupt.cpp:26 Registered module 0x730d2066aa20 on device 0
2025-04-19T00:18:43.983402 1 39334 3 3460 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:43.983410 1 39334 3 3460 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:43.983414 1 39334 3 3460 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:43.983490 1 39334 3 3460 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:43.983568 1 39334 3 3460 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:43.983583 1 39334 3 3460 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:43.983588 I 39334 3 3460 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:43.983608 2 39334 3 3460 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:43.983613 I 39334 3 3460 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 0 ms
2025-04-19T00:18:43.983625 I 39334 3 3460 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:43.983646 I 39334 3 12 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 114 ms
2025-04-19T00:18:43.983660 I 39334 3 12 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 221 ms
2025-04-19T00:18:43.983676 I 39334 3 12 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 221 ms
2025-04-19T00:18:43.983686 I 39334 3 12 measure.h:84 Timer end                      executeRelAlgSeq                    executeRelAlgSeq:  895 elapsed 1845 ms
2025-04-19T00:18:43.983738 1 39334 3 12 GpuInterrupt.cpp:227 Reset interrupt flag for CPU execution kernel on Executor 1
2025-04-19T00:18:43.983744 I 39334 3 12 measure.h:84 Timer end             executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612 elapsed 2212 ms
2025-04-19T00:18:43.983750 I 39334 3 12 measure.h:84 Timer end                    executeRelAlgQuery                  executeRelAlgQuery:  573 elapsed 2212 ms
2025-04-19T00:18:43.983757 I 39334 3 12 RelAlgExecutor.cpp:572 DEBUG_TIMER thread_id(12)
2212ms total duration for executeRelAlgQuery
  2212ms start(0ms) executeRelAlgQueryNoRetry RelAlgExecutor.cpp:613
    1ms start(0ms) Query pre-execution steps RelAlgExecutor.cpp:614
    248ms start(1ms) executeRelAlgSeq RelAlgExecutor.cpp:896
      248ms start(1ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        248ms start(1ms) executeCompound RelAlgExecutor.cpp:2282
          248ms start(1ms) executeWorkUnit RelAlgExecutor.cpp:3652
            148ms start(1ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(2ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              146ms start(3ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                0ms start(3ms) initializeNVPTXBackend NativeCodegen.cpp:1546
                146ms start(3ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(3ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  4ms start(3ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(8ms) generatePTX NativeCodegen.cpp:1507
                  131ms start(17ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(13)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                93ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(93ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                5ms start(93ms) executePlanWithGroupBy Execute.cpp:3991
                  2ms start(93ms) launchGpuCode QueryExecutionContext.cpp:227
                  3ms start(95ms) getRowSet QueryExecutionContext.cpp:161
                    3ms start(95ms) reduceMultiDeviceResults Execute.cpp:1528
                      3ms start(95ms) reduceMultiDeviceResultSets Execute.cpp:1602
                        2ms start(96ms) generateNativeCPUCode NativeCodegen.cpp:441
                          1ms start(96ms) optimize_ir NativeCodegen.cpp:312
                          1ms start(98ms) create_execution_engine NativeCodegen.cpp:421
              End thread(13)
            0ms start(250ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(250ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(250ms) reduceMultiDeviceResultSets Execute.cpp:1602
    116ms start(250ms) executeRelAlgSeq RelAlgExecutor.cpp:896
      116ms start(250ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        116ms start(250ms) executeCompound RelAlgExecutor.cpp:2282
          116ms start(250ms) executeWorkUnit RelAlgExecutor.cpp:3652
            113ms start(250ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(251ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              112ms start(251ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                112ms start(251ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(251ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(251ms) optimize_ir NativeCodegen.cpp:312
                  7ms start(255ms) generatePTX NativeCodegen.cpp:1507
                  100ms start(262ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(14)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                1ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  1ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(1ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(1ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(1ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(14)
            0ms start(366ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(366ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(366ms) reduceMultiDeviceResultSets Execute.cpp:1602
    1845ms start(366ms) executeRelAlgSeq RelAlgExecutor.cpp:896
      225ms start(366ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        225ms start(366ms) executeProject RelAlgExecutor.cpp:2330
          225ms start(367ms) executeWorkUnit RelAlgExecutor.cpp:3652
            109ms start(367ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(367ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              108ms start(368ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                108ms start(368ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(368ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  2ms start(368ms) optimize_ir NativeCodegen.cpp:312
                  6ms start(371ms) generatePTX NativeCodegen.cpp:1507
                  98ms start(378ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(15)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                5ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(5ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(5ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(5ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(15)
            3ms start(483ms) collectAllDeviceResults Execute.cpp:2630
              3ms start(483ms) reduceMultiDeviceResults Execute.cpp:1528
                3ms start(483ms) reduceMultiDeviceResultSets Execute.cpp:1602
                  2ms start(484ms) generateNativeCPUCode NativeCodegen.cpp:441
                    1ms start(484ms) optimize_ir NativeCodegen.cpp:312
                    0ms start(485ms) create_execution_engine NativeCodegen.cpp:421
            101ms start(486ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(487ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              100ms start(487ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                100ms start(487ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(487ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  2ms start(488ms) optimize_ir NativeCodegen.cpp:312
                  6ms start(491ms) generatePTX NativeCodegen.cpp:1507
                  89ms start(498ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(16)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                3ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  3ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(3ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(3ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(3ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(16)
            0ms start(592ms) resultsUnion Execute.cpp:1499
      227ms start(592ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        227ms start(592ms) executeProject RelAlgExecutor.cpp:2330
          227ms start(592ms) executeWorkUnit RelAlgExecutor.cpp:3652
            100ms start(592ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(593ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              98ms start(593ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                98ms start(593ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(593ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  2ms start(593ms) optimize_ir NativeCodegen.cpp:312
                  6ms start(596ms) generatePTX NativeCodegen.cpp:1507
                  88ms start(603ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(17)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                14ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(14ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(14ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(14ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(17)
            0ms start(708ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(708ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(708ms) reduceMultiDeviceResultSets Execute.cpp:1602
            103ms start(708ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(709ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              102ms start(709ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                102ms start(709ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(709ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(709ms) optimize_ir NativeCodegen.cpp:312
                  6ms start(713ms) generatePTX NativeCodegen.cpp:1507
                  91ms start(720ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(18)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                7ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  7ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(7ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(7ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(7ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(18)
            0ms start(819ms) resultsUnion Execute.cpp:1499
      255ms start(819ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        255ms start(819ms) executeUnion RelAlgExecutor.cpp:2730
          255ms start(819ms) executeWorkUnit RelAlgExecutor.cpp:3652
            9ms start(819ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(820ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              8ms start(820ms) generateNativeCPUCode NativeCodegen.cpp:441
                2ms start(820ms) optimize_ir NativeCodegen.cpp:312
                6ms start(823ms) create_execution_engine NativeCodegen.cpp:421
              New thread(19)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                36ms start(0ms) fetchUnionChunks Execute.cpp:3564
                  35ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(36ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(36ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(36ms) launchCpuCode QueryExecutionContext.cpp:575
              End thread(19)
              New thread(20)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                100ms start(0ms) fetchUnionChunks Execute.cpp:3564
                  64ms start(36ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(100ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(100ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(100ms) launchCpuCode QueryExecutionContext.cpp:575
              End thread(20)
            0ms start(931ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(931ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(931ms) reduceMultiDeviceResultSets Execute.cpp:1602
            13ms start(931ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(932ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              12ms start(933ms) generateNativeCPUCode NativeCodegen.cpp:441
                3ms start(933ms) optimize_ir NativeCodegen.cpp:312
                8ms start(936ms) create_execution_engine NativeCodegen.cpp:421
              New thread(21)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                110ms start(0ms) fetchUnionChunks Execute.cpp:3564
                  42ms start(67ms) ColumnarResults ColumnarResults.cpp:275
                8ms start(110ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                10ms start(118ms) executePlanWithGroupBy Execute.cpp:3991
                  9ms start(119ms) launchCpuCode QueryExecutionContext.cpp:575
                  0ms start(128ms) getRowSet QueryExecutionContext.cpp:161
              End thread(21)
              New thread(22)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                67ms start(0ms) fetchUnionChunks Execute.cpp:3564
                  67ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                22ms start(67ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                33ms start(90ms) executePlanWithGroupBy Execute.cpp:3991
                  33ms start(90ms) launchCpuCode QueryExecutionContext.cpp:575
                  0ms start(124ms) getRowSet QueryExecutionContext.cpp:161
              End thread(22)
            0ms start(1074ms) resultsUnion Execute.cpp:1499
      640ms start(1074ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        640ms start(1075ms) executeCompound RelAlgExecutor.cpp:2282
          639ms start(1075ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(1075ms) compileWorkUnit NativeCodegen.cpp:2852
            115ms start(1075ms) compileWorkUnit NativeCodegen.cpp:2852
              3ms start(1076ms) getInstance HashJoin.cpp:297
                3ms start(1076ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1076ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(23)
                      3ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        3ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          3ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(3ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(23)
              0ms start(1080ms) getInstance HashJoin.cpp:297
                0ms start(1080ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1080ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(24)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(24)
              0ms start(1080ms) getInstance HashJoin.cpp:297
                0ms start(1080ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1081ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(25)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(25)
              0ms start(1081ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              109ms start(1081ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                108ms start(1082ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1082ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  4ms start(1082ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1087ms) generatePTX NativeCodegen.cpp:1507
                  94ms start(1095ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(26)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                95ms start(0ms) fetchChunks Execute.cpp:3380
                  90ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(95ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                140ms start(95ms) executePlanWithoutGroupBy Execute.cpp:3764
                  140ms start(95ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(26)
            0ms start(1427ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1427ms) reduceMultiDeviceResults Execute.cpp:1528
            116ms start(1500ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1501ms) getInstance HashJoin.cpp:297
                0ms start(1501ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1501ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(27)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(27)
              0ms start(1501ms) getInstance HashJoin.cpp:297
                0ms start(1501ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1501ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(28)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(28)
              0ms start(1502ms) getInstance HashJoin.cpp:297
                0ms start(1502ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1502ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(29)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(29)
              0ms start(1502ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              113ms start(1503ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                112ms start(1503ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1503ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  5ms start(1503ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1509ms) generatePTX NativeCodegen.cpp:1507
                  97ms start(1518ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(30)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                93ms start(0ms) fetchChunks Execute.cpp:3380
                  89ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(93ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                4ms start(93ms) executePlanWithGroupBy Execute.cpp:3991
                  1ms start(93ms) launchGpuCode QueryExecutionContext.cpp:227
                  3ms start(94ms) getRowSet QueryExecutionContext.cpp:161
                    3ms start(94ms) reduceMultiDeviceResults Execute.cpp:1528
                      3ms start(94ms) reduceMultiDeviceResultSets Execute.cpp:1602
                        2ms start(95ms) generateNativeCPUCode NativeCodegen.cpp:441
                          1ms start(95ms) optimize_ir NativeCodegen.cpp:312
                          1ms start(97ms) create_execution_engine NativeCodegen.cpp:421
              End thread(30)
            0ms start(1715ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1715ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(1715ms) reduceMultiDeviceResultSets Execute.cpp:1602
      160ms start(1715ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        160ms start(1715ms) executeCompound RelAlgExecutor.cpp:2282
          159ms start(1715ms) executeWorkUnit RelAlgExecutor.cpp:3652
            125ms start(1716ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1716ms) synthesize_metadata InputMetadata.cpp:362
              0ms start(1716ms) getInstance HashJoin.cpp:297
                0ms start(1716ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1717ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(31)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(31)
              1ms start(1717ms) getInstance HashJoin.cpp:297
                1ms start(1717ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(1717ms) getOneColumnFragment ColumnFetcher.cpp:82
                    0ms start(1717ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(32)
                      1ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        1ms start(0ms) initHashTableOnGpu BaselineHashTableBuilder.h:513
                          0ms start(0ms) Initialize GPU Baseline Join Hash Table BaselineHashTableBuilder.h:535
                          1ms start(0ms) Fill GPU Baseline Join Hash Table BaselineHashTableBuilder.h:557
                    End thread(32)
              0ms start(1719ms) getInstance HashJoin.cpp:297
                0ms start(1719ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1719ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(33)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(33)
              8ms start(1719ms) getInstance HashJoin.cpp:297
                8ms start(1719ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(1719ms) buildIntersectionTranslationMapToOtherProxyUnlocked StringDictionaryProxy.cpp:268
                    0ms start(1719ms) buildDictionaryTranslationMap StringDictionary.cpp:1861
                  0ms start(1719ms) buildIntersectionTranslationMapToOtherProxyUnlocked StringDictionaryProxy.cpp:268
                    0ms start(1719ms) buildDictionaryTranslationMap StringDictionary.cpp:1861
                  0ms start(1719ms) initHashTableOnCpuFromCache BaselineJoinHashTable.cpp:1115
                  0ms start(1719ms) getOneColumnFragment ColumnFetcher.cpp:82
                  0ms start(1719ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(34)
                      1ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        1ms start(0ms) initHashTableOnCpu BaselineHashTableBuilder.h:276
                          0ms start(0ms) Initialize CPU Baseline Join Hash Table BaselineHashTableBuilder.h:297
                          1ms start(0ms) Fill CPU Baseline Join Hash Table BaselineHashTableBuilder.h:361
                              New thread(35)
                              End thread(35)
                              New thread(36)
                              End thread(36)
                              New thread(37)
                              End thread(37)
                              New thread(38)
                              End thread(38)
                              New thread(39)
                              End thread(39)
                              New thread(40)
                              End thread(40)
                              New thread(41)
                              End thread(41)
                              New thread(42)
                              End thread(42)
                              New thread(43)
                              End thread(43)
                              New thread(44)
                              End thread(44)
                              New thread(45)
                              End thread(45)
                              New thread(46)
                              End thread(46)
                              New thread(47)
                              End thread(47)
                              New thread(48)
                              End thread(48)
                              New thread(49)
                              End thread(49)
                              New thread(50)
                              End thread(50)
                              New thread(51)
                              End thread(51)
                              New thread(52)
                              End thread(52)
                              New thread(53)
                              End thread(53)
                              New thread(54)
                              End thread(54)
                              New thread(55)
                              End thread(55)
                              New thread(56)
                              End thread(56)
                              New thread(57)
                              End thread(57)
                              New thread(58)
                              End thread(58)
                              New thread(59)
                              End thread(59)
                              New thread(60)
                              End thread(60)
                              New thread(61)
                              End thread(61)
                              New thread(62)
                              End thread(62)
                              New thread(63)
                              End thread(63)
                              New thread(64)
                              End thread(64)
                              New thread(65)
                              End thread(65)
                              New thread(66)
                              End thread(66)
                    End thread(34)
                  0ms start(1721ms) initHashTableOnCpuFromCache BaselineJoinHashTable.cpp:1115
                  0ms start(1721ms) getOneColumnFragment ColumnFetcher.cpp:82
                  0ms start(1721ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(67)
                      4ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        4ms start(0ms) initHashTableOnCpu BaselineHashTableBuilder.h:276
                          0ms start(0ms) Initialize CPU Baseline Join Hash Table BaselineHashTableBuilder.h:297
                          4ms start(0ms) Fill CPU Baseline Join Hash Table BaselineHashTableBuilder.h:361
                              New thread(68)
                              End thread(68)
                              New thread(69)
                              End thread(69)
                              New thread(70)
                              End thread(70)
                              New thread(71)
                              End thread(71)
                              New thread(72)
                              End thread(72)
                              New thread(73)
                              End thread(73)
                              New thread(74)
                              End thread(74)
                              New thread(75)
                              End thread(75)
                              New thread(76)
                              End thread(76)
                              New thread(77)
                              End thread(77)
                              New thread(78)
                              End thread(78)
                              New thread(79)
                              End thread(79)
                              New thread(80)
                              End thread(80)
                              New thread(81)
                              End thread(81)
                              New thread(82)
                              End thread(82)
                              New thread(83)
                              End thread(83)
                              New thread(84)
                              End thread(84)
                              New thread(85)
                              End thread(85)
                              New thread(86)
                              End thread(86)
                              New thread(87)
                              End thread(87)
                              New thread(88)
                              End thread(88)
                              New thread(89)
                              End thread(89)
                              New thread(90)
                              End thread(90)
                              New thread(91)
                              End thread(91)
                              New thread(92)
                              End thread(92)
                              New thread(93)
                              End thread(93)
                              New thread(94)
                              End thread(94)
                              New thread(95)
                              End thread(95)
                              New thread(96)
                              End thread(96)
                              New thread(97)
                              End thread(97)
                              New thread(98)
                              End thread(98)
                              New thread(99)
                              End thread(99)
                            0ms start(1ms) Initialize Additional Buffers for CPU Baseline Join Hash Table BaselineHashTableBuilder.h:426
                            3ms start(1ms) Fill Additional Buffers for CPU Baseline Join Hash Table BaselineHashTableBuilder.h:438
                    End thread(67)
              0ms start(1728ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              112ms start(1728ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                111ms start(1729ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1729ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  5ms start(1729ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1735ms) generatePTX NativeCodegen.cpp:1507
                  96ms start(1744ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(100)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                26ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(26ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                6ms start(26ms) executePlanWithGroupBy Execute.cpp:3991
                  2ms start(26ms) launchGpuCode QueryExecutionContext.cpp:227
                  3ms start(29ms) getRowSet QueryExecutionContext.cpp:161
                    3ms start(29ms) reduceMultiDeviceResults Execute.cpp:1528
                      3ms start(29ms) reduceMultiDeviceResultSets Execute.cpp:1602
                        3ms start(30ms) generateNativeCPUCode NativeCodegen.cpp:441
                          2ms start(30ms) optimize_ir NativeCodegen.cpp:312
                          0ms start(32ms) create_execution_engine NativeCodegen.cpp:421
              End thread(100)
            0ms start(1875ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1875ms) reduceMultiDeviceResults Execute.cpp:1528
      115ms start(1875ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        115ms start(1875ms) executeCompound RelAlgExecutor.cpp:2282
          115ms start(1875ms) executeWorkUnit RelAlgExecutor.cpp:3652
            110ms start(1875ms) compileWorkUnit NativeCodegen.cpp:2852
              1ms start(1876ms) codegen GpuSharedMemoryUtils.cpp:56
              0ms start(1877ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              108ms start(1878ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                107ms start(1878ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1878ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  4ms start(1878ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1882ms) generatePTX NativeCodegen.cpp:1507
                  94ms start(1891ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(3458)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                4ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  3ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    3ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      3ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
                        2ms start(1ms) generateNativeCPUCode NativeCodegen.cpp:441
                          1ms start(1ms) optimize_ir NativeCodegen.cpp:312
                          0ms start(3ms) create_execution_engine NativeCodegen.cpp:421
              End thread(3458)
            0ms start(1990ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1990ms) reduceMultiDeviceResults Execute.cpp:1528
      221ms start(1991ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        221ms start(1991ms) executeSort RelAlgExecutor.cpp:3227
          221ms start(1991ms) executeWorkUnit RelAlgExecutor.cpp:3652
            105ms start(1991ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1992ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              104ms start(1992ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                104ms start(1992ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1992ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  2ms start(1992ms) optimize_ir NativeCodegen.cpp:312
                  6ms start(1995ms) generatePTX NativeCodegen.cpp:1507
                  93ms start(2002ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(3459)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(3459)
            0ms start(2097ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(2097ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(2097ms) reduceMultiDeviceResultSets Execute.cpp:1602
            1ms start(2097ms) compileWorkUnit NativeCodegen.cpp:2852
            112ms start(2099ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(2099ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              111ms start(2100ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                111ms start(2100ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(2100ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(2100ms) optimize_ir NativeCodegen.cpp:312
                  7ms start(2104ms) generatePTX NativeCodegen.cpp:1507
                  98ms start(2112ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(3460)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(3460)
            0ms start(2212ms) resultsUnion Execute.cpp:1499
2025-04-19T00:18:43.984029 I 39334 3 12 DBHandler.cpp:6148 Cache size information {"query_resultset": 0 bytes, "hash_tables": 80 bytes, "chunk_metadata": 0 bytes, "query_plan_dag": 112 bytes, "compiled_GPU code": 5521600 bytes, "string_dictionary": 32256 bytes}
2025-04-19T00:18:43.984034 1 39334 3 12 DBHandler.cpp:6221 jsonlog { "name": "CPU Memory Info", "TotalMB": 15841.9, "FreeMB": 9254.88, "ProcessMB": 639.07, "VirtualMB": 22388.1, "ProcessPlusSwapMB": 448.383, "ProcessSharedMB": 190.688, "FragmentationPercent": 36 }
2025-04-19T00:18:44.000140 I 39334 3 1 DBHandler.cpp:1303 DEBUG_TIMER thread_id(1)
3161ms total duration for sql_execute
2025-04-19T00:18:44.000205 1 39334 3 1 DBHandler.cpp:1349 Table Schema Locks:
2025-04-19T00:18:44.000213 1 39334 3 1 DBHandler.cpp:1350 Table Data Locks:
2025-04-19T00:18:44.000454 I 39334 3 1 DBHandler.cpp:1300 stdlog sql_execute 2 3162 heavyai admin 838-55GH {"query_str","client","nonce","execution_time_ms","total_time_ms"} {"with my_customers as ( select distinct c_customer_sk , c_current_addr_sk from ( select cs_sold_date_sk sold_date_sk, cs_bill_customer_sk customer_sk, cs_item_sk item_sk from   catalog_sales union all select ws_sold_date_sk sold_date_sk, ws_bill_customer_sk customer_sk, ws_item_sk item_sk from   web_sales ) cs_or_ws_sales, item, date_dim, customer where   sold_date_sk = d_date_sk and item_sk = i_item_sk and i_category = 'Music' and i_class = 'country' and c_customer_sk = cs_or_ws_sales.customer_sk and d_moy = 1 and d_year = 1999 ) , my_revenue as ( select c_customer_sk, sum(ss_ext_sales_price) as revenue from   my_customers, store_sales, customer_address, store, date_dim where  c_current_addr_sk = ca_address_sk and ca_county = s_county and ca_state = s_state and ss_sold_date_sk = d_date_sk and c_customer_sk = ss_customer_sk and d_month_seq between (select distinct d_month_seq+1 from   date_dim where d_year = 1999 and d_moy = 1) and  (select distinct d_month_seq+3 from   date_dim where d_year = 1999 and d_moy = 1) group by c_customer_sk ) , segments as (select cast((revenue/50) as int) as segment from   my_revenue ) select  segment, count(*) as num_customers, segment*50 as segment_base from segments group by segment order by segment, num_customers limit 100;","tcp:localhost:32986","","3122","3162"}
2025-04-19T00:18:44.000464 1 39334 3 1 DBHandler.cpp:1300 stacked_times sql_execute 2 total time 3162 ms
  parse_to_ra 126501303353344 - total time 910 ms
    processCalciteRequest 126501303353344 - total time 864 ms
      processImpl 126501303353344 - total time 863 ms
  execute_rel_alg 126501917818880 - total time 2224 ms
  convertRows 126501303353344 - total time 0 ms

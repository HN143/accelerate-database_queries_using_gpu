2025-04-19T00:15:37.301904 I 37424 0 0 CommandLineOptions.cpp:1887  Max import threads 32
2025-04-19T00:15:37.301988 I 37424 0 0 CommandLineOptions.cpp:1896  Min CPU buffer pool slab size (in bytes) 268435456
2025-04-19T00:15:37.301996 I 37424 0 0 CommandLineOptions.cpp:1898  Max CPU buffer pool slab size (in bytes) 4294967296
2025-04-19T00:15:37.302000 I 37424 0 0 CommandLineOptions.cpp:1900  Min GPU buffer pool slab size (in bytes) 268435456
2025-04-19T00:15:37.302003 I 37424 0 0 CommandLineOptions.cpp:1902  Max GPU buffer pool slab size (in bytes) 4294967296
2025-04-19T00:15:37.302007 I 37424 0 0 CommandLineOptions.cpp:1904  calcite JVM max memory (in MB) 1024
2025-04-19T00:15:37.302010 I 37424 0 0 CommandLineOptions.cpp:1905  HeavyDB Server Port 6274
2025-04-19T00:15:37.302014 I 37424 0 0 CommandLineOptions.cpp:1906  HeavyDB Calcite Port 6279
2025-04-19T00:15:37.302018 I 37424 0 0 CommandLineOptions.cpp:1907  Enable Calcite view optimize true
2025-04-19T00:15:37.302022 I 37424 0 0 CommandLineOptions.cpp:1909  Allow Local Auth Fallback: enabled
2025-04-19T00:15:37.302025 I 37424 0 0 CommandLineOptions.cpp:1911  ParallelTop min threshold: 100000
2025-04-19T00:15:37.302028 I 37424 0 0 CommandLineOptions.cpp:1912  ParallelTop watchdog max: 20000000
2025-04-19T00:15:37.302032 I 37424 0 0 CommandLineOptions.cpp:1914  Enable Data Recycler: enabled
2025-04-19T00:15:37.302036 I 37424 0 0 CommandLineOptions.cpp:1917  	 Use hashtable cache: enabled
2025-04-19T00:15:37.302040 I 37424 0 0 CommandLineOptions.cpp:1920  		 Total amount of bytes that hashtable cache keeps: 4096 MB.
2025-04-19T00:15:37.302044 I 37424 0 0 CommandLineOptions.cpp:1922  		 Per-hashtable size limit: 2048 MB.
2025-04-19T00:15:37.302048 I 37424 0 0 CommandLineOptions.cpp:1925  	 Use query resultset cache: enabled
2025-04-19T00:15:37.302052 I 37424 0 0 CommandLineOptions.cpp:1928  		 Total amount of bytes that query resultset cache keeps: 4096 MB.
2025-04-19T00:15:37.302056 I 37424 0 0 CommandLineOptions.cpp:1930  		 Per-query resultset size limit: 2048 MB.
2025-04-19T00:15:37.302060 I 37424 0 0 CommandLineOptions.cpp:1933  		 Use auto query resultset caching: disabled
2025-04-19T00:15:37.302063 I 37424 0 0 CommandLineOptions.cpp:1940  		 Use query step skipping: enabled
2025-04-19T00:15:37.302068 I 37424 0 0 CommandLineOptions.cpp:1942  	 Use chunk metadata cache: enabled
2025-04-19T00:15:37.302071 I 37424 0 0 CommandLineOptions.cpp:1945 Executor Resource Manager: enabled
2025-04-19T00:15:37.302075 I 37424 0 0 CommandLineOptions.cpp:1948 	CPU kernel concurrency: enabled
2025-04-19T00:15:37.302079 I 37424 0 0 CommandLineOptions.cpp:1951 	CPU-GPU kernel concurrency: enabled
2025-04-19T00:15:37.302083 I 37424 0 0 CommandLineOptions.cpp:1958 	CPU result set reserved ratio of CPU buffer pool size: 0.8
2025-04-19T00:15:37.302090 I 37424 0 0 CommandLineOptions.cpp:1961 	Per-query max CPU threads ratio: 0.9
2025-04-19T00:15:37.302094 I 37424 0 0 CommandLineOptions.cpp:1963 	Per-query max CPU result memory ratio of allocated total: 0.8
2025-04-19T00:15:37.302099 I 37424 0 0 CommandLineOptions.cpp:1965 	Allow concurrent CPU thread/slot oversubscription: disabled
2025-04-19T00:15:37.302102 I 37424 0 0 CommandLineOptions.cpp:1969 	Allow concurrent CPU result memory oversubscription: disabled
2025-04-19T00:15:37.302106 I 37424 0 0 CommandLineOptions.cpp:1974 	Per-query Max available resource utilization ratio: 0.8
2025-04-19T00:15:37.302111 I 37424 0 0 CommandLineOptions.cpp:1985 Runtime UDF/UDTF Registration Policy:  ALLOWED for superusers only
2025-04-19T00:15:37.302121 1 37424 0 0 CommandLineOptions.cpp:1237 taking [/var/lib/heavyai/storage/heavydb_pid.lck] read+write lock until process exit
2025-04-19T00:15:37.302175 I 37424 0 0 CommandLineOptions.cpp:1318 HeavyDB started with data directory at '/var/lib/heavyai/storage'
2025-04-19T00:15:37.302182 I 37424 0 0 CommandLineOptions.cpp:1323  Server read-only mode is false (--read-only)
2025-04-19T00:15:37.302186 I 37424 0 0 CommandLineOptions.cpp:1340  Threading layer: TBB
2025-04-19T00:15:37.302190 I 37424 0 0 CommandLineOptions.cpp:1344  Watchdog is set to true
2025-04-19T00:15:37.302199 I 37424 0 0 CommandLineOptions.cpp:1345  Dynamic Watchdog is set to false
2025-04-19T00:15:37.302203 I 37424 0 0 CommandLineOptions.cpp:1349  Runtime query interrupt is set to true
2025-04-19T00:15:37.302207 I 37424 0 0 CommandLineOptions.cpp:1351  A frequency of checking pending query interrupt request is set to 1000 (in ms.)
2025-04-19T00:15:37.302211 I 37424 0 0 CommandLineOptions.cpp:1353  A frequency of checking running query interrupt request is set to 0.1 (0.0 ~ 1.0)
2025-04-19T00:15:37.302221 I 37424 0 0 CommandLineOptions.cpp:1356  Non-kernel time query interrupt is set to true
2025-04-19T00:15:37.302225 I 37424 0 0 CommandLineOptions.cpp:1359  Debug Timer is set to true
2025-04-19T00:15:37.302229 I 37424 0 0 CommandLineOptions.cpp:1360  LogUserId is set to false
2025-04-19T00:15:37.302233 I 37424 0 0 CommandLineOptions.cpp:1361  Maximum idle session duration 60
2025-04-19T00:15:37.302237 I 37424 0 0 CommandLineOptions.cpp:1362  Maximum active session duration 43200
2025-04-19T00:15:37.302241 I 37424 0 0 CommandLineOptions.cpp:1363  Maximum number of sessions -1
2025-04-19T00:15:37.302245 I 37424 0 0 CommandLineOptions.cpp:1365 Legacy delimited import is set to true
2025-04-19T00:15:37.302248 I 37424 0 0 CommandLineOptions.cpp:1367 Legacy parquet import is set to false
2025-04-19T00:15:37.302253 I 37424 0 0 CommandLineOptions.cpp:1369 FSI regex parsed import is set to true
2025-04-19T00:15:37.302257 I 37424 0 0 CommandLineOptions.cpp:1371 Allowed import paths is set to ["/"]
2025-04-19T00:15:37.302259 I 37424 0 0 CommandLineOptions.cpp:1372 Allowed export paths is set to ["/"]
2025-04-19T00:15:37.302288 I 37424 0 0 DdlUtils.cpp:874 Parsed allowed-import-paths: (/var/lib/heavyai/storage/import /)
2025-04-19T00:15:37.302297 I 37424 0 0 DdlUtils.cpp:874 Parsed allowed-export-paths: (/var/lib/heavyai/storage/export /)
2025-04-19T00:15:37.302311 I 37424 0 0 CommandLineOptions.cpp:1394 FSI has been enabled as a side effect of enabling non-legacy import.
2025-04-19T00:15:37.302317 I 37424 0 0 CommandLineOptions.cpp:1517 Disk cache enabled for foreign tables only
2025-04-19T00:15:37.302322 I 37424 0 0 CommandLineOptions.cpp:1564 Vacuum Min Selectivity: 0.1
2025-04-19T00:15:37.302327 I 37424 0 0 CommandLineOptions.cpp:1566 Enable system tables is set to true
2025-04-19T00:15:37.302331 I 37424 0 0 CommandLineOptions.cpp:1575 Enable FSI is set to true
2025-04-19T00:15:37.302334 I 37424 0 0 CommandLineOptions.cpp:1576 Enable logs system tables set to false
2025-04-19T00:15:37.302338 I 37424 0 0 CommandLineOptions.cpp:1583 Maximum number of logs system table files set to 100
2025-04-19T00:15:37.302342 I 37424 0 0 HeavyDB.cpp:388 HeavyDB starting up
2025-04-19T00:15:37.302363 I 37424 0 0 HeavyDB.cpp:392 Initializing TBB with 32 threads.
2025-04-19T00:15:37.302950 I 37424 0 0 HeavyDB.cpp:397 TBB max concurrency: 32 threads.
2025-04-19T00:15:37.304035 1 37424 0 0 HeavyDB.cpp:327 heartbeat thread starting
2025-04-19T00:15:37.304142 I 37424 0 0 DBHandler.cpp:244 HeavyDB Server 7.1.0-20231018-69d8a78a07
2025-04-19T00:15:37.365856 I 37424 0 0 CudaMgr.cpp:515 Using 1 Gpus.
2025-04-19T00:15:37.365888 1 37424 0 0 CudaMgr.cpp:517 Device: 0
2025-04-19T00:15:37.365895 1 37424 0 0 CudaMgr.cpp:518 UUID: 8c8b4619-0dfc-3e11-b9db-9f2b8cd9a4b5
2025-04-19T00:15:37.365901 1 37424 0 0 CudaMgr.cpp:519 Clock (khz): 1500000
2025-04-19T00:15:37.365907 1 37424 0 0 CudaMgr.cpp:520 Compute Major: 8
2025-04-19T00:15:37.365911 1 37424 0 0 CudaMgr.cpp:521 Compute Minor: 6
2025-04-19T00:15:37.365916 1 37424 0 0 CudaMgr.cpp:522 PCI bus id: 1
2025-04-19T00:15:37.365920 1 37424 0 0 CudaMgr.cpp:523 PCI deviceId id: 0
2025-04-19T00:15:37.365925 1 37424 0 0 CudaMgr.cpp:524 Per device global memory: 3.79565 GB
2025-04-19T00:15:37.365934 1 37424 0 0 CudaMgr.cpp:526 Memory clock (khz): 6001000
2025-04-19T00:15:37.365939 1 37424 0 0 CudaMgr.cpp:527 Memory bandwidth: 96.016 GB/sec
2025-04-19T00:15:37.365945 1 37424 0 0 CudaMgr.cpp:530 Constant Memory: 65536
2025-04-19T00:15:37.365949 1 37424 0 0 CudaMgr.cpp:531 Shared memory per multiprocessor: 102400
2025-04-19T00:15:37.365962 1 37424 0 0 CudaMgr.cpp:533 Shared memory per block: 49152
2025-04-19T00:15:37.365967 1 37424 0 0 CudaMgr.cpp:534 Number of MPs: 16
2025-04-19T00:15:37.365971 1 37424 0 0 CudaMgr.cpp:535 Warp Size: 32
2025-04-19T00:15:37.365976 1 37424 0 0 CudaMgr.cpp:536 Max threads per block: 1024
2025-04-19T00:15:37.365981 1 37424 0 0 CudaMgr.cpp:537 Max registers per block: 65536
2025-04-19T00:15:37.365985 1 37424 0 0 CudaMgr.cpp:538 Max register per MP: 65536
2025-04-19T00:15:37.365990 1 37424 0 0 CudaMgr.cpp:539 Memory bus width in bits: 128
2025-04-19T00:15:37.365994 I 37424 0 0 CudaMgr.cpp:68 Warming up the GPU JIT Compiler... (this may take several seconds)
2025-04-19T00:15:37.366915 1 37424 0 0 NvidiaKernel.cpp:91 CUDA JIT time to create link: 0.904794
2025-04-19T00:15:37.460224 1 37424 0 0 NvidiaKernel.cpp:100 CUDA JIT time to add RT fatbinary: 16.6595
2025-04-19T00:15:37.460975 1 37424 0 0 NvidiaKernel.cpp:109 CUDA JIT time to add GPU table functions library: 16.8905
2025-04-19T00:15:37.463237 I 37424 0 0 CudaMgr.cpp:71 GPU JIT Compiler initialized.
2025-04-19T00:15:37.463259 I 37424 0 0 ArrowForeignStorage.cpp:880 CSV backed temporary tables has been activated. Create table `with (storage_type='CSV:path/to/file.csv');`
2025-04-19T00:15:37.463266 I 37424 0 0 ArrowForeignStorage.cpp:1058 CSV backed temporary tables has been activated. Create table `with (storage_type='CSV:path/to/file.csv');`
2025-04-19T00:15:37.463376 I 37424 0 0 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 0ms Epoch: 0 files read: 0 table location: '/var/lib/heavyai/storage/disk_cache'
2025-04-19T00:15:37.463383 3 37424 0 0 CachingFileMgr.cpp:97 Number of Headers in Vector: 0
2025-04-19T00:15:37.463405 1 37424 0 0 DataMgr.cpp:260 Detected 15841.9M of total system memory.
2025-04-19T00:15:37.463411 I 37424 0 0 DataMgr.cpp:269 Min CPU Slab Size is 256MB
2025-04-19T00:15:37.463416 I 37424 0 0 DataMgr.cpp:270 Max CPU Slab Size is 4096MB
2025-04-19T00:15:37.463421 I 37424 0 0 DataMgr.cpp:271 Max memory pool size for CPU is 12673.5MB
2025-04-19T00:15:37.463425 I 37424 0 0 DataMgr.cpp:293 Reserved GPU memory is 384MB includes render buffer allocation
2025-04-19T00:15:37.463434 I 37424 0 0 DataMgr.cpp:312 Min GPU Slab size for GPU 0 is 256MB
2025-04-19T00:15:37.463439 I 37424 0 0 DataMgr.cpp:314 Max GPU Slab size for GPU 0 is 3502.75MB
2025-04-19T00:15:37.463443 I 37424 0 0 DataMgr.cpp:316 Max memory pool size for GPU 0 is 3502.75MB
2025-04-19T00:15:37.463507 I 37424 0 0 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 0ms Epoch: 0 files read: 0 table location: '/var/lib/heavyai/storage/data/table_0_0'
2025-04-19T00:15:37.463512 3 37424 0 0 FileMgr.cpp:280 Number of Headers in Vector: 0
2025-04-19T00:15:37.463533 I 37424 0 0 DBHandler.cpp:255 Initializing Executor Resource Manager
2025-04-19T00:15:37.463538 I 37424 0 0 DBHandler.cpp:263 	Setting Executor resource pool avaiable CPU threads/slots to default value of 32.
2025-04-19T00:15:37.463554 I 37424 0 0 DBHandler.cpp:274 	Setting max per-query CPU threads to ratio of 0.9 of 32 available threads, or 28 threads.
2025-04-19T00:15:37.463562 I 37424 0 0 DBHandler.cpp:325 	Setting Executor resource pool reserved space for CPU buffer pool memory to 11.75 GB.
2025-04-19T00:15:37.463578 I 37424 0 0 DBHandler.cpp:329 	Setting Executor resource pool reserved space for GPU buffer pool memory to 3.24 GB.
2025-04-19T00:15:37.463582 I 37424 0 0 DBHandler.cpp:333 	Setting Executor resource pool reserved space for CPU result memory to 4.0 GB.
2025-04-19T00:15:37.463660 I 37424 0 0 Calcite.cpp:373 Creating Calcite Handler,  Calcite Port is 6279 base data dir is /var/lib/heavyai/storage
2025-04-19T00:15:37.463666 I 37424 0 0 Calcite.cpp:281 Running Calcite server as a daemon
2025-04-19T00:15:38.079359 I 37424 0 0 Calcite.cpp:321 Calcite server start took 600 ms 
2025-04-19T00:15:38.079404 I 37424 0 0 Calcite.cpp:322 ping took 10 ms 
2025-04-19T00:15:38.084129 1 37424 0 0 Calcite.cpp:634 [{"name":"Truncate__","annotations":[{},{},{"uses_manager":"false"}],"ret":"float","args":["float","i32"]},{"name":"area_triangle","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"ST_AsBinary__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"box_contains_point","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double","double"]},{"name":"Round__","annotations":[{},{},{"uses_manager":"false"}],"ret":"float","args":["float","i32"]},{"name":"array_first_half__f64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>"]},{"name":"array_equal__textdict","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<TextEncodingDict>","Array<TextEncodingDict>"]},{"name":"ST_YMax","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_AsWkt__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"ST_Intersects_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_point_point_squared","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"centroid_add_polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32","i32","i32","double*","double*","double*","double*","i64*","double*"]},{"name":"h3ToGeoPacked","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_AsBinary__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"perimeter_multipolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32","i1"]},{"name":"ST_Distance_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_downAp7","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Centroid_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32*","i32","i32*","i32","i32","i32","i32","double*"]},{"name":"array_equal__f32","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<float>","Array<float>"]},{"name":"ST_AsWkt__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"convert_meters_to_pixel_height","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i8*","i64","i32","i32","i32","double","double","i32","double"]},{"name":"_hex2dToGeo","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32","i32","double*"]},{"name":"tol_eq","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"ST_YMin_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ST_Centroid_Polygon","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32*","i32","i32","i32","i32","double*"]},{"name":"_square","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Log10","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_YMax_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ct_device_selection_udf_gpu__gpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_DWithin_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"round_to_digit","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"_ijkScale","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32"]},{"name":"_rotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_append__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>","double"]},{"name":"array_append__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>","i8"]},{"name":"array_append__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>","i16"]},{"name":"_geoToFaceIjk","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32*"]},{"name":"array_append__4","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>","float"]},{"name":"x_and_y_are_dependent","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32","i32"]},{"name":"ST_XMin_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"raw_array_as_scalar_same_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64*","i64"]},{"name":"ST_X_Point","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_Distance_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_append","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>","i64"]},{"name":"ST_Length_LineString_Geodesic","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"point_in_polygon_winding_number","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","i64","i64","i32","i32","i32"]},{"name":"array_first_half__t32","annotations":[{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"ST_cContains_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_cIntersects_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"udf_identity","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone"]},{"name":"_v2dMag","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double*"]},{"name":"_neighbor","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32"]},{"name":"ST_cIntersects_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"strtok_to_array__1","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["TextEncodingDict","TextEncodingNone"]},{"name":"ST_Distance_MultiLineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsText__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"reg_hex_horiz_pixel_bin_y","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"reg_hex_horiz_pixel_bin_x","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"compressed_coord","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i8*","i32"]},{"name":"ST_Distance_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"area_polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ct_device_selection_udf_both__gpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Log__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"text_encoding_dict_concat","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingNone"]},{"name":"ST_XMax","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_DWithin_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_ijkToHex2d","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","double*"]},{"name":"ST_Perimeter_MultiPolygon_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiPoint_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Contains_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsWkb__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"centroid_add_triangle","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double","double*","double*"]},{"name":"distance_point_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","i1","double"]},{"name":"ST_Contains_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ct_sleep_us__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i64"]},{"name":"array_second_half__i64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>"]},{"name":"h3ToLat","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["i64"]},{"name":"ST_Distance_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_LineString_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_second_half_impl","annotations":[{},{"uses_manager":"false"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"ST_AsWkb__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"_h3ToGeo","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","double*"]},{"name":"array_second_half__i16","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>"]},{"name":"_upAp7r","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"Point_Overlaps_Box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double","double"]},{"name":"point_dwithin_box","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","double*","i64","i32","i32","double"]},{"name":"Floor__2","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_Distance_Point_ClosedLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Floor__3","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Intersects_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiPolygon_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Floor__1","annotations":[{},{"uses_manager":"false"}],"ret":"i16","args":["i16"]},{"name":"ST_Intersects_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsBinary__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"array_append__","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>","i32"]},{"name":"_upAp7","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_AsText__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"_faceIjkToH3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i32*","i32"]},{"name":"Sinh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"barray_append","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>","i1"]},{"name":"ST_XMin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_DWithin_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_MultiPolygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsBinary__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"ST_Intersects_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiLineString_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Perimeter_Polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_DWithin_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"geoToH3","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["double","double","i32"]},{"name":"ST_Distance_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"array_first_half__b8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>"]},{"name":"max_distance_point_line","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"HeavyDB_Geo_PolyBoundsPtr","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["double*","i64"]},{"name":"array_second_half__b8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>"]},{"name":"_pointSquareDist","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","double*"]},{"name":"ST_DWithin_LineString_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_unitIjkToDigit","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"array_equal__i8","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i8>","Array<i8>"]},{"name":"ST_Contains_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Sin","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Distance_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_Point_MultiPoint_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_second_half__i32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>"]},{"name":"ST_Distance_LineString_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_point_point","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"_downAp7r","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Contains_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"tol_ge","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"ST_Distance_MultiPoint_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Contains_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_XMax_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ST_Intersects_MultiPolygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ln__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_Contains_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"text_encoding_none_concat","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone","TextEncodingNone"]},{"name":"distance_point_multilinestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkt__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"convert_meters_to_merc_pixel_width","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","i32","double"]},{"name":"ST_AsWkt__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"ST_Intersects_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Length_LineString","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_AsText__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"ST_Perimeter_Polygon_Geodesic","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Contains_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"tarray_append","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>","TextEncodingDict"]},{"name":"ST_Area_Polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"is_inf","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["double"]},{"name":"ST_AsText__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"ct_device_selection_udf_both__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_first_half__f32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>"]},{"name":"box_dwithin_box","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","i32","double*","i64","i32","i32","double"]},{"name":"centroid_add_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","i32","i1","double*","double*","i64*","double*"]},{"name":"Log10__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_Intersects_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"Asin","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Distance_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"rect_pixel_bin_x","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","i32"]},{"name":"rect_pixel_bin_y","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","i32"]},{"name":"ST_Intersects_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"is_inf__","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["float"]},{"name":"is_point_in_view","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","double","double","double","double"]},{"name":"is_point_size_in_merc_view","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double"]},{"name":"array_equal__f64","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<double>","Array<double>"]},{"name":"ST_Centroid_MultiPoint","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"_ijkRotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Distance_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_LineString_Linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_Point_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Contains_MultiPolygon_Point_Impl","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsText__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"ST_Distance_MultiPoint_Point_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"raw_array_as_array_diff_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["i64*","i64"]},{"name":"_geoToHex2d","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32*","double*"]},{"name":"_adjustOverageClassII","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32*","i32","i32","i32"]},{"name":"degrees","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_second_half__t32","annotations":[{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"approx_distance_in_meters","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["float","float","float","float"]},{"name":"raw_array_as_scalar_diff_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i64*","i64"]},{"name":"constrainLng","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Length_MultiLineString","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32"]},{"name":"array_first_half__i32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>"]},{"name":"ST_Intersects_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_DWithin_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_posAngleRads","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Tanh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_equal__i16","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i16>","Array<i16>"]},{"name":"_isBaseCellPentagon","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_MaxDistance_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"_h3ToFaceIjk","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","i32*"]},{"name":"Log","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"is_nan","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["double"]},{"name":"ST_Perimeter_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"tol_zero_template","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","i64"]},{"name":"centroid_add_ring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","i32","double","double*","double*","double*","double*","i64*","double*"]},{"name":"_ijkSub","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32*","i32*"]},{"name":"ST_YMin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"array_second_half__f64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>"]},{"name":"_h3ToFaceIjkWithInitializedFijk","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i64","i32*"]},{"name":"Ceil","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"polygon_contains_point","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","double","double","i32","i32","i32"]},{"name":"ST_Distance_MultiLineString_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Centroid_LineString","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"ST_Distance_Point_LineString_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_in_meters__","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["float","float","float","float"]},{"name":"Floor__","annotations":[{},{"uses_manager":"false"}],"ret":"float","args":["float"]},{"name":"box_overlaps_box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double*","i64"]},{"name":"decompress_coord","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i32"]},{"name":"isResClassIII","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_first_half__i64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>"]},{"name":"array_append_impl","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>","float"]},{"name":"array_first_half_impl","annotations":[{},{"uses_manager":"false"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"max_distance_point_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","i1"]},{"name":"ST_AsBinary__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"ST_Distance_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"tol_zero","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double"]},{"name":"ST_AsWkb__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"rect_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"barray_append_impl","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>","i8"]},{"name":"ST_Distance_Polygon_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_rotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"tol","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["i32","i32"]},{"name":"_geoAzDistanceRads","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","double","double","double*"]},{"name":"_ijkAdd","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32*","i32*"]},{"name":"ST_DWithin_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"convert_meters_to_pixel_width","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i8*","i64","i32","i32","i32","double","double","i32","double"]},{"name":"reg_hex_vert_pixel_bin_y","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"reg_hex_vert_pixel_bin_x","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"ST_Contains_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"_faceIjkToBaseCellCCWrot60","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"ST_Distance_MultiPoint_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"power","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double"]},{"name":"ST_AsWkb__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"area_ring","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"reg_hex_vert_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"text_encoding_dict_concat3","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingDict"]},{"name":"Atanh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"length_linestring","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i32","i32","i32","i1","i1"]},{"name":"Cos","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Sqrt","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"tol_le","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"Cot","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_DWithin_Point_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_h3LeadingNonZeroDigit","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i64"]},{"name":"box_contains_box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double*","i64"]},{"name":"ST_DWithin_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"line_intersects_line","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double","double"]},{"name":"_faceIjkToBaseCell","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"compression_unit_size","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_Distance_MultiPoint_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Area_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Intersects_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"centroid_add_segment","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double*","double*"]},{"name":"radsToDegs","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"text_encoding_dict_concat2","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingNone","TextEncodingDict"]},{"name":"Tan","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"_h3RotatePent60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Distance_MultiPoint_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_faceIjkToGeo","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32","double*"]},{"name":"ln","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"_h3RotatePent60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"array_second_half__i8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>"]},{"name":"array_first_half__i8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>"]},{"name":"ST_Contains_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"rect_pixel_bin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","i32","i32"]},{"name":"ST_Distance_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkb__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"distance_point_multipolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ct_device_selection_udf_any","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_AsText__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"ST_AsWkt__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"_geoToVec3d","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","double*"]},{"name":"Ceil__2","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Ceil__1","annotations":[{},{"uses_manager":"false"}],"ret":"i16","args":["i16"]},{"name":"array_second_half__f32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>"]},{"name":"Ceil__3","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Distance_Point_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkb__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"distance_point_line","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"ST_Centroid_Point","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"_hex2dToCoordIJK","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32*"]},{"name":"ST_Distance_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Round2_to_digit","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"ST_DWithin_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"on_segment","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double"]},{"name":"h3ToLon","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["i64"]},{"name":"ST_AsWkt__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"distance_in_meters","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"_baseCellIsCwOffset","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32","i32"]},{"name":"ST_DWithin_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"text_encoding_none_length","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["TextEncodingNone"]},{"name":"_setIJK","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32","i32","i32"]},{"name":"Atan2","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double"]},{"name":"Acos","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_equal__i64","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i64>","Array<i64>"]},{"name":"ST_Y_Point","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"_ijkMatches","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32*","i32*"]},{"name":"Cosh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"distance_point_polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"is_nan__","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["float"]},{"name":"ST_Contains_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Intersects_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"text_encoding_none_copy","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone"]},{"name":"Truncate","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"text_encoding_dict_copy_from","annotations":[{},{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingDict","i32"]},{"name":"ST_cContains_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"radians","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_MaxDistance_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"h3ToParent","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"_h3Rotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"text_encoding_dict_copy","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict"]},{"name":"_ijkNormalize","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"Ceil__","annotations":[{},{"uses_manager":"false"}],"ret":"float","args":["float"]},{"name":"reg_hex_horiz_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"ST_Distance_Point_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_ijkRotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"array_equal__bool","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<bool>","Array<bool>"]},{"name":"ST_Distance_MultiPoint_MultiPoint_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"convert_meters_to_merc_pixel_height","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","i32","double"]},{"name":"Round","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"ST_Intersects_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"array_equal__i32","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i32>","Array<i32>"]},{"name":"is_point_size_in_view","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","double","double","double","double","double"]},{"name":"conv_4326_900913_x","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_first_half__i16","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>"]},{"name":"Contains_Polygon_Point_Impl","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"conv_4326_900913_y","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Atan","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ct_device_selection_udf_cpu__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Floor","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"orientation","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i16","args":["double","double","double","double","double","double"]},{"name":"Truncate__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"i16","args":["i16","i32"]},{"name":"ST_Distance_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Truncate__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32","i32"]},{"name":"is_left","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i64","i64","i64","i64","i64"]},{"name":"Truncate__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"is_point_in_merc_view","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double"]},{"name":"degsToRads","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Tan__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_AsBinary__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"polygon_contains_linestring","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_LineString_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"raw_array_as_array_same_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["i64*","i64"]},{"name":"ST_Distance_MultiPoint_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_geoAzimuthRads","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","double*"]},{"name":"strtok_to_array","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["TextEncodingNone","TextEncodingNone"]},{"name":"pi","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":[]},{"name":"Round__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"i16","args":["i16","i32"]},{"name":"ST_Distance_Point_Point_Squared","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Exp","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Round__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32","i32"]},{"name":"Round__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"Round__4","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32","i32"]},{"name":"_h3Rotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]}]
2025-04-19T00:15:38.136632 I 37424 0 0 DBHandler.cpp:527 Started in GPU mode.
2025-04-19T00:15:38.137352 2 37424 0 0 SysCatalog.cpp:251 reloading catalog caches for: system_catalog
2025-04-19T00:15:38.137481 I 37424 0 0 QueryEngine.h:47 Query Engine CUDA streams disabled
2025-04-19T00:15:38.137496 I 37424 0 0 DBHandler.cpp:567 Overriding default geos library with 'libgeos_c.so'
2025-04-19T00:15:38.137619 I 37424 0 0 HeavyDB.cpp:552  HeavyDB server using unencrypted connection
2025-04-19T00:16:02.912148 I 37424 1 1 DBHandler.cpp:659 stdlog_begin connect 0 0     
2025-04-19T00:16:03.085079 I 37424 1 1 DBHandler.cpp:701 User admin connected to database heavyai
2025-04-19T00:16:03.085106 I 37424 1 1 DBHandler.cpp:659 stdlog connect 0 172 heavyai admin 603-gDni {"client","roles"} {"tcp:localhost:59132","super"}
2025-04-19T00:16:03.085241 1 37424 2 1 DBHandler.cpp:960 stdlog_begin get_session_info 1 0 heavyai admin 603-gDni  
2025-04-19T00:16:03.085261 I 37424 2 1 DBHandler.cpp:960 stdlog get_session_info 1 0 heavyai admin 603-gDni {"client"} {"tcp:localhost:59132"}
2025-04-19T00:16:15.257689 I 37424 3 1 DBHandler.cpp:1300 stdlog_begin sql_execute 2 0 heavyai admin 603-gDni {"query_str"} {"with customer_total_return as (select sr_customer_sk as ctr_customer_sk ,sr_store_sk as ctr_store_sk ,sum(SR_FEE) as ctr_total_return from store_returns ,date_dim where sr_returned_date_sk = d_date_sk and d_year =2000 group by sr_customer_sk ,sr_store_sk) select  c_customer_id from customer_total_return ctr1 ,store ,customer where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2 from customer_total_return ctr2 where ctr1.ctr_store_sk = ctr2.ctr_store_sk) and s_store_sk = ctr1.ctr_store_sk and s_state = 'TN' and ctr1.ctr_customer_sk = c_customer_sk order by c_customer_id limit 100;"}
2025-04-19T00:16:15.257729 1 37424 3 1 DBHandler.cpp:1205 query type: READ
2025-04-19T00:16:15.258488 I 37424 3 1 Calcite.cpp:566 User calcite catalog heavyai sql 'with customer_total_return as (select sr_customer_sk as ctr_customer_sk ,sr_store_sk as ctr_store_sk ,sum(SR_FEE) as ctr_total_return from store_returns ,date_dim where sr_returned_date_sk = d_date_sk and d_year =2000 group by sr_customer_sk ,sr_store_sk) select  c_customer_id from customer_total_return ctr1 ,store ,customer where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2 from customer_total_return ctr2 where ctr1.ctr_store_sk = ctr2.ctr_store_sk) and s_store_sk = ctr1.ctr_store_sk and s_state = 'TN' and ctr1.ctr_customer_sk = c_customer_sk order by c_customer_id limit 100;'
2025-04-19T00:16:15.286538 1 37424 3 2 DBHandler.cpp:3056 stdlog_begin get_databases 3 0 heavyai calcite 615-eZZV  
2025-04-19T00:16:15.286703 I 37424 3 2 DBHandler.cpp:3056 stdlog get_databases 3 0 heavyai calcite 615-eZZV {"client"} {"tcp:localhost:43510"}
2025-04-19T00:16:15.780285 1 37424 3 3 DBHandler.cpp:2703 stdlog_begin get_tables_for_database 4 0 heavyai calcite 615-eZZV  
2025-04-19T00:16:15.780337 I 37424 3 3 DBHandler.cpp:2703 stdlog get_tables_for_database 4 0 heavyai calcite 615-eZZV {"client"} {"tcp:localhost:43516"}
2025-04-19T00:16:15.782938 1 37424 3 4 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 5 0 heavyai calcite 615-eZZV {"table_name"} {"store_returns"}
2025-04-19T00:16:15.782959 1 37424 3 4 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_returns
2025-04-19T00:16:15.783059 I 37424 3 4 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 5 0 heavyai calcite 615-eZZV {"table_name","client"} {"store_returns","tcp:localhost:43528"}
2025-04-19T00:16:15.798550 1 37424 3 5 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 6 0 heavyai calcite 615-eZZV {"table_name"} {"date_dim"}
2025-04-19T00:16:15.798581 1 37424 3 5 LockMgr.h:128 Acquiring Table Schema Read Lock for table: date_dim
2025-04-19T00:16:15.798667 I 37424 3 5 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 6 0 heavyai calcite 615-eZZV {"table_name","client"} {"date_dim","tcp:localhost:43544"}
2025-04-19T00:16:15.820391 1 37424 3 6 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 7 0 heavyai calcite 615-eZZV {"table_name"} {"store"}
2025-04-19T00:16:15.820425 1 37424 3 6 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store
2025-04-19T00:16:15.820522 I 37424 3 6 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 7 0 heavyai calcite 615-eZZV {"table_name","client"} {"store","tcp:localhost:43558"}
2025-04-19T00:16:15.822143 1 37424 3 7 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 8 0 heavyai calcite 615-eZZV {"table_name"} {"customer"}
2025-04-19T00:16:15.822166 1 37424 3 7 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer
2025-04-19T00:16:15.822254 I 37424 3 7 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 8 0 heavyai calcite 615-eZZV {"table_name","client"} {"customer","tcp:localhost:43570"}
2025-04-19T00:16:16.176383 I 37424 3 1 Calcite.cpp:599 Time in Thrift 8 (ms), Time in Java Calcite server 909 (ms)
2025-04-19T00:16:16.176617 1 37424 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer
2025-04-19T00:16:16.177214 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,1,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177237 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,2,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177246 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,3,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177253 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,4,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177261 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,5,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177269 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,6,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177281 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,1,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177299 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,2,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177287 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,7,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177307 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,3,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177310 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,8,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177314 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,4,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177318 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,9,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177335 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,10,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177320 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,5,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177343 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,11,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177345 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,6,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177351 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,12,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177358 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,13,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177366 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,14,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177372 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,15,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177381 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,16,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177351 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,7,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177389 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,17,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177395 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,8,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177397 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,18,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.177402 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,9,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177407 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,10,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177413 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,11,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177420 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,12,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177426 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,13,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177432 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,14,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177438 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,15,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177444 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,16,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177450 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,17,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177457 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,18,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.177761 4 37424 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,5,20,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.182349 4 37424 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,5,20,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.182398 I 37424 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_5'
2025-04-19T00:16:16.182428 3 37424 3 1 FileMgr.cpp:280 Number of Headers in Vector: 38
2025-04-19T00:16:16.182562 I 37424 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table customer took 5ms
2025-04-19T00:16:16.182572 1 37424 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: customer
2025-04-19T00:16:16.182590 1 37424 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: date_dim
2025-04-19T00:16:16.183086 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,1,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183105 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,1,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183109 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,2,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183120 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,2,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183128 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,3,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183130 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,3,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183136 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,4,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183146 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,4,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183152 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,5,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183154 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,5,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183160 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,6,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183162 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,6,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183167 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,7,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183169 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,7,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183175 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,8,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183177 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,8,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183182 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,9,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183185 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,9,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183190 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,10,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183192 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,10,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183197 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,11,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183200 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,11,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183204 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,12,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183207 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,12,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183212 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,13,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183214 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,13,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183219 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,14,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183221 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,14,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183227 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,15,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183229 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,15,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183234 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,16,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183237 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,16,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183244 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,17,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183248 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,17,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183251 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,18,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183256 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,18,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183259 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,19,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183263 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,19,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183266 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,20,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183271 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,20,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183274 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,21,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183278 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,21,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183281 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,22,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183291 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,22,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183298 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,23,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183298 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,23,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183306 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,24,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183311 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,24,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183313 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,25,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183319 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,25,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183320 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,26,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183326 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,26,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183328 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,27,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183334 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,27,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183336 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,8,28,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.183341 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,8,28,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.183687 4 37424 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,8,30,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.188344 4 37424 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,8,30,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.188409 I 37424 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_8'
2025-04-19T00:16:16.188430 3 37424 3 1 FileMgr.cpp:280 Number of Headers in Vector: 58
2025-04-19T00:16:16.188594 I 37424 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table date_dim took 5ms
2025-04-19T00:16:16.188603 1 37424 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: date_dim
2025-04-19T00:16:16.188617 1 37424 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store
2025-04-19T00:16:16.189101 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,1,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189116 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,2,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189132 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,1,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189149 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,2,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189137 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,3,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189158 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,3,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189162 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,4,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189166 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,4,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189169 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,5,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189174 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,5,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189182 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,6,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189175 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,6,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189190 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,7,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189196 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,7,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189207 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,8,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189216 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,9,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189198 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,8,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189223 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,10,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189230 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,9,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189236 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,11,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189239 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,10,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189243 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,12,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189247 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,11,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189255 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,12,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189249 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,13,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189263 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,13,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189269 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,14,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189271 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,14,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189275 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,15,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189279 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,15,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189281 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,16,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189286 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,16,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189292 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,17,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189292 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,17,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189300 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,18,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189305 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,19,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189305 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,18,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189320 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,19,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189327 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,20,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189313 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,20,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189335 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,21,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189341 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,21,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189343 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,22,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189347 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,22,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189350 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,23,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189353 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,23,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189358 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,24,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189365 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,25,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189359 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,24,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189373 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,26,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189380 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,25,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189387 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,26,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189387 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,27,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189401 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,28,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189409 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,29,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.189395 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,27,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189422 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,28,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189428 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,29,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.189761 4 37424 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,16,31,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.194327 4 37424 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,16,31,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.194368 I 37424 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_16'
2025-04-19T00:16:16.194388 3 37424 3 1 FileMgr.cpp:280 Number of Headers in Vector: 60
2025-04-19T00:16:16.194550 I 37424 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table store took 5ms
2025-04-19T00:16:16.194559 1 37424 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store
2025-04-19T00:16:16.194574 1 37424 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_returns
2025-04-19T00:16:16.195027 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,1,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195040 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,1,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195053 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,2,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195043 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,2,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195060 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,3,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195064 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,3,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195066 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,4,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195071 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,4,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195073 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,5,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195090 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,6,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195097 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,7,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195082 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,5,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195103 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,8,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195106 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,6,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195109 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,9,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195114 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,7,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195116 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,10,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195121 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,8,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195128 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,9,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195137 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,10,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195150 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,11,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195122 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,11,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195158 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,12,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195162 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,12,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195166 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,13,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195169 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,13,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195172 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,14,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195175 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,14,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195180 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,15,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195188 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,16,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195195 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,17,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195181 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,15,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195203 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,18,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195209 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,16,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195211 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,19,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195216 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,17,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195218 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,20,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.195222 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,18,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195228 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,19,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195234 4 37424 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,20,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.195530 4 37424 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,17,22,0, Page id: 0 Epoch: 1
2025-04-19T00:16:16.200146 4 37424 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,17,22,0, Page id: -1 Epoch: 1
2025-04-19T00:16:16.200181 I 37424 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_17'
2025-04-19T00:16:16.200198 3 37424 3 1 FileMgr.cpp:280 Number of Headers in Vector: 42
2025-04-19T00:16:16.200314 I 37424 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table store_returns took 5ms
2025-04-19T00:16:16.200323 1 37424 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store_returns
2025-04-19T00:16:16.200422 W 37424 3 1 CudaMgr.cpp:604 Could not find CUDA installation path: environment variables CUDA_HOME or CUDA_DIR are not defined
2025-04-19T00:16:16.200521 W 37424 3 1 Execute.cpp:313 File /libdevice.10.bc does not exist; support for some UDF functions might not be available.
2025-04-19T00:16:16.211514 W 37424 3 1 Execute.cpp:400 Source of rt_libdevice_module LLVM module is unavailable. The module will be unavailable.
2025-04-19T00:16:16.211540 I 37424 3 1 QueryDispatchQueue.h:63 Dispatching query with 0 queries in the queue.
2025-04-19T00:16:16.211575 I 37424 0 0 QueryDispatchQueue.h:100 Worker 3 running query and returning control. There are now 1 workers are running and 0 queries in the queue.
2025-04-19T00:16:16.211597 1 37424 3 8 DBHandler.cpp:6167 Table Schema Locks:
1 5 
1 8 
1 16 
1 17 
2025-04-19T00:16:16.211613 1 37424 3 8 DBHandler.cpp:6168 Table Data Locks:
1 5 
1 8 
1 16 
1 17 
2025-04-19T00:16:16.222076 W 37424 3 8 Execute.cpp:400 Source of rt_libdevice_module LLVM module is unavailable. The module will be unavailable.
2025-04-19T00:16:16.222144 2 37424 3 8 RelAlgDag.cpp:3339 Parsing query RA JSON: {
  "rels": [
    {
      "id": "0",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "sr_returned_date_sk",
        "sr_return_time_sk",
        "sr_item_sk",
        "sr_customer_sk",
        "sr_cdemo_sk",
        "sr_hdemo_sk",
        "sr_addr_sk",
        "sr_store_sk",
        "sr_reason_sk",
        "sr_ticket_number",
        "sr_return_quantity",
        "sr_return_amt",
        "sr_return_tax",
        "sr_return_amt_inc_tax",
        "sr_fee",
        "sr_return_ship_cost",
        "sr_refunded_cash",
        "sr_reversed_charge",
        "sr_store_credit",
        "sr_net_loss",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_returns"
      ],
      "inputs": []
    },
    {
      "id": "1",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "d_date_sk",
        "d_date_id",
        "d_date",
        "d_month_seq",
        "d_week_seq",
        "d_quarter_seq",
        "d_year",
        "d_dow",
        "d_moy",
        "d_dom",
        "d_qoy",
        "d_fy_year",
        "d_fy_quarter_seq",
        "d_fy_week_seq",
        "d_day_name",
        "d_quarter_name",
        "d_holiday",
        "d_weekend",
        "d_following_holiday",
        "d_first_dom",
        "d_last_dom",
        "d_same_day_ly",
        "d_same_day_lq",
        "d_current_day",
        "d_current_week",
        "d_current_month",
        "d_current_quarter",
        "d_current_year",
        "rowid"
      ],
      "table": [
        "heavyai",
        "date_dim"
      ],
      "inputs": []
    },
    {
      "id": "2",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 6
          },
          {
            "literal": 2000,
            "type": "DECIMAL",
            "target_type": "INTEGER",
            "scale": 0,
            "precision": 4,
            "type_scale": 0,
            "type_precision": 10
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "3",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 0
          },
          {
            "input": 21
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "inner",
      "inputs": [
        "0",
        "2"
      ]
    },
    {
      "id": "4",
      "relOp": "LogicalProject",
      "fields": [
        "ctr_customer_sk",
        "ctr_store_sk",
        "sr_fee"
      ],
      "exprs": [
        {
          "input": 3
        },
        {
          "input": 7
        },
        {
          "input": 14
        }
      ]
    },
    {
      "id": "5",
      "relOp": "LogicalAggregate",
      "fields": [
        "ctr_customer_sk",
        "ctr_store_sk",
        "ctr_total_return"
      ],
      "group": [
        0,
        1
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            2
          ]
        }
      ]
    },
    {
      "id": "6",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "s_store_sk",
        "s_store_id",
        "s_rec_start_date",
        "s_rec_end_date",
        "s_closed_date_sk",
        "s_store_name",
        "s_number_employees",
        "s_floor_space",
        "s_hours",
        "s_manager",
        "s_market_id",
        "s_geography_class",
        "s_market_desc",
        "s_market_manager",
        "s_division_id",
        "s_division_name",
        "s_company_id",
        "s_company_name",
        "s_street_number",
        "s_street_name",
        "s_street_type",
        "s_suite_number",
        "s_city",
        "s_county",
        "s_state",
        "s_zip",
        "s_country",
        "s_gmt_offset",
        "s_tax_percentage",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store"
      ],
      "inputs": []
    },
    {
      "id": "7",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 24
          },
          {
            "literal": "TN",
            "type": "CHAR",
            "target_type": "VARCHAR",
            "scale": -2147483648,
            "precision": 50,
            "type_scale": -2147483648,
            "type_precision": 50
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "8",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 3
          },
          {
            "input": 1
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "inner",
      "inputs": [
        "5",
        "7"
      ]
    },
    {
      "id": "9",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "c_customer_sk",
        "c_customer_id",
        "c_current_cdemo_sk",
        "c_current_hdemo_sk",
        "c_current_addr_sk",
        "c_first_shipto_date_sk",
        "c_first_sales_date_sk",
        "c_salutation",
        "c_first_name",
        "c_last_name",
        "c_preferred_cust_flag",
        "c_birth_day",
        "c_birth_month",
        "c_birth_year",
        "c_birth_country",
        "c_login",
        "c_email_address",
        "c_last_review_date_sk",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer"
      ],
      "inputs": []
    },
    {
      "id": "10",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 0
          },
          {
            "input": 33
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "inner",
      "inputs": [
        "8",
        "9"
      ]
    },
    {
      "id": "11",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "sr_returned_date_sk",
        "sr_return_time_sk",
        "sr_item_sk",
        "sr_customer_sk",
        "sr_cdemo_sk",
        "sr_hdemo_sk",
        "sr_addr_sk",
        "sr_store_sk",
        "sr_reason_sk",
        "sr_ticket_number",
        "sr_return_quantity",
        "sr_return_amt",
        "sr_return_tax",
        "sr_return_amt_inc_tax",
        "sr_fee",
        "sr_return_ship_cost",
        "sr_refunded_cash",
        "sr_reversed_charge",
        "sr_store_credit",
        "sr_net_loss",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_returns"
      ],
      "inputs": []
    },
    {
      "id": "12",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "d_date_sk",
        "d_date_id",
        "d_date",
        "d_month_seq",
        "d_week_seq",
        "d_quarter_seq",
        "d_year",
        "d_dow",
        "d_moy",
        "d_dom",
        "d_qoy",
        "d_fy_year",
        "d_fy_quarter_seq",
        "d_fy_week_seq",
        "d_day_name",
        "d_quarter_name",
        "d_holiday",
        "d_weekend",
        "d_following_holiday",
        "d_first_dom",
        "d_last_dom",
        "d_same_day_ly",
        "d_same_day_lq",
        "d_current_day",
        "d_current_week",
        "d_current_month",
        "d_current_quarter",
        "d_current_year",
        "rowid"
      ],
      "table": [
        "heavyai",
        "date_dim"
      ],
      "inputs": []
    },
    {
      "id": "13",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 6
          },
          {
            "literal": 2000,
            "type": "DECIMAL",
            "target_type": "INTEGER",
            "scale": 0,
            "precision": 4,
            "type_scale": 0,
            "type_precision": 10
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "14",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 0
          },
          {
            "input": 21
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "inner",
      "inputs": [
        "11",
        "13"
      ]
    },
    {
      "id": "15",
      "relOp": "LogicalProject",
      "fields": [
        "ctr_customer_sk",
        "ctr_store_sk",
        "sr_fee"
      ],
      "exprs": [
        {
          "input": 3
        },
        {
          "input": 7
        },
        {
          "input": 14
        }
      ]
    },
    {
      "id": "16",
      "relOp": "LogicalAggregate",
      "fields": [
        "ctr_customer_sk",
        "ctr_store_sk",
        "ctr_total_return"
      ],
      "group": [
        0,
        1
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            2
          ]
        }
      ]
    },
    {
      "id": "17",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "IS NOT NULL",
        "operands": [
          {
            "input": 1
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": false
        }
      }
    },
    {
      "id": "18",
      "relOp": "LogicalProject",
      "fields": [
        "ctr_store_sk",
        "ctr_total_return"
      ],
      "exprs": [
        {
          "input": 1
        },
        {
          "input": 2
        }
      ]
    },
    {
      "id": "19",
      "relOp": "LogicalAggregate",
      "fields": [
        "ctr_store_sk",
        "$f1"
      ],
      "group": [
        0
      ],
      "aggs": [
        {
          "agg": "AVG",
          "type": {
            "type": "DOUBLE",
            "nullable": false
          },
          "distinct": false,
          "operands": [
            1
          ]
        }
      ]
    },
    {
      "id": "20",
      "relOp": "LogicalJoin",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 1
              },
              {
                "input": 52
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": ">",
            "operands": [
              {
                "input": 2
              },
              {
                "op": "*",
                "operands": [
                  {
                    "input": 53
                  },
                  {
                    "literal": 12,
                    "type": "DECIMAL",
                    "target_type": "DECIMAL",
                    "scale": 1,
                    "precision": 2,
                    "type_scale": 1,
                    "type_precision": 2
                  }
                ],
                "type": {
                  "type": "DOUBLE",
                  "nullable": true
                }
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      },
      "joinType": "inner",
      "inputs": [
        "10",
        "19"
      ]
    },
    {
      "id": "21",
      "relOp": "LogicalProject",
      "fields": [
        "ctr_customer_sk",
        "ctr_store_sk",
        "ctr_total_return",
        "s_store_sk",
        "s_store_id",
        "s_rec_start_date",
        "s_rec_end_date",
        "s_closed_date_sk",
        "s_store_name",
        "s_number_employees",
        "s_floor_space",
        "s_hours",
        "s_manager",
        "s_market_id",
        "s_geography_class",
        "s_market_desc",
        "s_market_manager",
        "s_division_id",
        "s_division_name",
        "s_company_id",
        "s_company_name",
        "s_street_number",
        "s_street_name",
        "s_street_type",
        "s_suite_number",
        "s_city",
        "s_county",
        "s_state",
        "s_zip",
        "s_country",
        "s_gmt_offset",
        "s_tax_percentage",
        "rowid",
        "c_customer_sk",
        "c_customer_id",
        "c_current_cdemo_sk",
        "c_current_hdemo_sk",
        "c_current_addr_sk",
        "c_first_shipto_date_sk",
        "c_first_sales_date_sk",
        "c_salutation",
        "c_first_name",
        "c_last_name",
        "c_preferred_cust_flag",
        "c_birth_day",
        "c_birth_month",
        "c_birth_year",
        "c_birth_country",
        "c_login",
        "c_email_address",
        "c_last_review_date_sk",
        "rowid0",
        "ctr_store_sk0",
        "$f1"
      ],
      "exprs": [
        {
          "input": 0
        },
        {
          "input": 1
        },
        {
          "input": 2
        },
        {
          "input": 3
        },
        {
          "input": 4
        },
        {
          "input": 5
        },
        {
          "input": 6
        },
        {
          "input": 7
        },
        {
          "input": 8
        },
        {
          "input": 9
        },
        {
          "input": 10
        },
        {
          "input": 11
        },
        {
          "input": 12
        },
        {
          "input": 13
        },
        {
          "input": 14
        },
        {
          "input": 15
        },
        {
          "input": 16
        },
        {
          "input": 17
        },
        {
          "input": 18
        },
        {
          "input": 19
        },
        {
          "input": 20
        },
        {
          "input": 21
        },
        {
          "input": 22
        },
        {
          "input": 23
        },
        {
          "input": 24
        },
        {
          "input": 25
        },
        {
          "input": 26
        },
        {
          "input": 27
        },
        {
          "input": 28
        },
        {
          "input": 29
        },
        {
          "input": 30
        },
        {
          "input": 31
        },
        {
          "input": 32
        },
        {
          "input": 33
        },
        {
          "input": 34
        },
        {
          "input": 35
        },
        {
          "input": 36
        },
        {
          "input": 37
        },
        {
          "input": 38
        },
        {
          "input": 39
        },
        {
          "input": 40
        },
        {
          "input": 41
        },
        {
          "input": 42
        },
        {
          "input": 43
        },
        {
          "input": 44
        },
        {
          "input": 45
        },
        {
          "input": 46
        },
        {
          "input": 47
        },
        {
          "input": 48
        },
        {
          "input": 49
        },
        {
          "input": 50
        },
        {
          "input": 51
        },
        {
          "input": 52
        },
        {
          "op": "CAST",
          "operands": [
            {
              "input": 53
            }
          ],
          "type": {
            "type": "DOUBLE",
            "nullable": true
          }
        }
      ]
    },
    {
      "id": "22",
      "relOp": "LogicalProject",
      "fields": [
        "c_customer_id"
      ],
      "exprs": [
        {
          "input": 34
        }
      ]
    },
    {
      "id": "23",
      "relOp": "LogicalSort",
      "collation": [
        {
          "field": 0,
          "direction": "ASCENDING",
          "nulls": "LAST"
        }
      ],
      "fetch": {
        "literal": 100,
        "type": "DECIMAL",
        "target_type": "INTEGER",
        "scale": 0,
        "precision": 3,
        "type_scale": 0,
        "type_precision": 10
      }
    }
  ]
}
2025-04-19T00:16:16.222685 I 37424 3 8 RelAlgOptimizer.cpp:828 RelProject(RexInput(input_node=RelFilter(RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), [&RelScan(date_dim, ["d_date_sk", "d_date_id", "d_date", "d_month_seq", "d_week_seq", "d_quarter_seq", "d_year", "d_dow", "d_moy", "d_dom", "d_qoy", "d_fy_y... eliminated 28 columns.
2025-04-19T00:16:16.222930 I 37424 3 8 RelAlgOptimizer.cpp:828 RelProject(RexInput(input_node=RelFilter(RexOperator(0, operands=RexInput(store.s_state) RexLiteral(TN type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), [&RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "... eliminated 29 columns.
2025-04-19T00:16:16.223130 I 37424 3 8 RelAlgOptimizer.cpp:828 RelProject(RexInput(input_node=RelFilter(RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), [&RelScan(date_dim, ["d_date_sk", "d_date_id", "d_date", "d_month_seq", "d_week_seq", "d_quarter_seq", "d_year", "d_dow", "d_moy", "d_dom", "d_qoy", "d_fy_y... eliminated 28 columns.
2025-04-19T00:16:16.227578 I 37424 3 8 RelAlgOptimizer.cpp:828 RelProject(RexInput(input_node=RelJoin([&RelJoin([&RelAggregate(2, agg_exprs=[&RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2])], fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"][&RelProject(RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) , ["ctr_customer_sk", "ctr_store_sk", "sr_fee"])]), &RelProject(RexInput(input_node=RelFilter(RexOperator(0, operands=RexInput(store.s_state) RexLiteral(TN type=TEXT(50,214748364... eliminated 53 columns.
2025-04-19T00:16:16.227677 I 37424 3 8 measure.h:77 Timer start                  executeRelAlgQuery                  executeRelAlgQuery:  573
2025-04-19T00:16:16.227686 I 37424 3 8 measure.h:77 Timer start           executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612
2025-04-19T00:16:16.229427 1 37424 3 8 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_24 # Strings: 100000 Hash table size: 262144 Fill rate: 38.147% Collisions: 12838
2025-04-19T00:16:16.229450 I 37424 3 8 Catalog.cpp:2035 Time to load Dictionary 1_24 was 1ms
2025-04-19T00:16:16.229592 1 37424 3 8 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_106 # Strings: 1 Hash table size: 256 Fill rate: 0.390625% Collisions: 0
2025-04-19T00:16:16.229618 I 37424 3 8 Catalog.cpp:2035 Time to load Dictionary 1_106 was 0ms
2025-04-19T00:16:16.229743 I 37424 3 8 measure.h:77 Timer start                    executeRelAlgSeq                    executeRelAlgSeq:  895
2025-04-19T00:16:16.229752 1 37424 3 8 RelAlgExecutor.cpp:945 Executing query step 0 / 6
2025-04-19T00:16:16.229759 I 37424 3 8 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:16:16.229792 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 2
2025-04-19T00:16:16.229803 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=2
2025-04-19T00:16:16.229828 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 input_col_descs_unique.size()=2 source_used_inputs.size()=0
2025-04-19T00:16:16.229840 3 37424 3 8 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(8),nest_level(0)))
2025-04-19T00:16:16.229845 3 37424 3 8 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(0))))
2025-04-19T00:16:16.229882 3 37424 3 8 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0) = 1
2025-04-19T00:16:16.229907 I 37424 3 8 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:16:16.229916 3 37424 3 8 RelAlgExecutor.cpp:3692 body->getId()=28 body->toString()=RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 it==leaf_results_.end()=true
2025-04-19T00:16:16.229944 1 37424 3 8 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:16:16.229952 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 1895055608413782929
	Table/Col/Levels: ((db_id: 1, table_id: 8), 1, 0) ((db_id: 1, table_id: 8), 7, 0) 
	Simple Quals: (= (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 2000) ) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:16.229966 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:16.229985 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:16.230028 1 37424 3 8 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:16:16.230937 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:16.230954 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:16.231017 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:16.231027 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 4 bytes
2025-04-19T00:16:16.231329 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8, i8* %literals, i16 0
  %5 = bitcast i8* %4 to i32*
  %literal_0 = load i32, i32* %5, align 4
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %8 = sext i32 %pos_start to i64
  %9 = icmp slt i64 %8, %row_count
  br i1 %9, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %10 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %19, %.loop.preheader
  %pos = phi i64 [ %8, %.loop.preheader ], [ %20, %19 ]
  %11 = call i32 @row_func_hoisted_literals(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_0)
  %12 = lshr i64 %pos, 15
  %13 = and i64 %12, 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %15 = call i1 @check_interrupt()
  %16 = select i1 %15, i32 10, i32 %11
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %17 = phi i32 [ %16, %.interrupt_check ], [ %11, %.for.body ]
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %.error_exit, label %19

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %17, i32* %error_code)
  ret void

19:                                               ; preds = %.error_check
  %20 = add nsw i64 %pos, %10
  %21 = icmp slt i64 %20, %row_count
  br i1 %21, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %19
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %22 = phi i64 [ %.pre.result, %._crit_edge ], [ %7, %.entry ]
  %23 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %24 = call i64 @agg_sum_shared(i64* %23, i64 %22)
  call void @sync_threadblock()
  %25 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %25, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_0) #33 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i64* %out, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i64* %out, i32 %arg_literal_0) #33 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  br i1 %4, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %5 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:16:16.232101 1 37424 3 8 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:16:16.244633 1 37424 3 8 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.075918
2025-04-19T00:16:16.341288 1 37424 3 8 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 20.5573
2025-04-19T00:16:16.342144 1 37424 3 8 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 20.8365
2025-04-19T00:16:16.342251 1 37424 3 8 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 20.8665
2025-04-19T00:16:16.358112 1 37424 3 8 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 50 registers, 160 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:16:16.358140 1 37424 3 8 NvidiaKernel.cpp:188 Generated GPU binary code size: 455968 bytes
2025-04-19T00:16:16.369649 1 37424 3 8 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:16:16.369855 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 139 ms
2025-04-19T00:16:16.369945 1 37424 3 8 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:16:16.369952 1 37424 3 8 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:16.370036 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:16.370069 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:16.370143 I 37424 3 9 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:16.370154 I 37424 3 9 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:16.370190 I 37424 3 9 BufferMgr.cpp:309 ALLOCATION slab of 8388608 pages (4294967296B) created in 0 ms CPU_MGR:0
2025-04-19T00:16:16.370197 1 37424 3 9 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,1,0,
2025-04-19T00:16:16.370478 1 37424 3 9 CudaMgr.cpp:35 CUDA Error (2): out of memory
2025-04-19T00:16:16.370486 1 37424 3 9 CudaMgr.cpp:36  0# CudaMgr_Namespace::CudaErrorException::CudaErrorException(cudaError_enum) in /opt/heavyai/bin/heavydb
 1# 0x0000000001CE9716 in /opt/heavyai/bin/heavydb
 2# Buffer_Namespace::GpuCudaBufferMgr::addSlab(unsigned long) in /opt/heavyai/bin/heavydb
 3# Buffer_Namespace::BufferMgr::findFreeBuffer(unsigned long) in /opt/heavyai/bin/heavydb
 4# Buffer_Namespace::BufferMgr::reserveBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>&, unsigned long) in /opt/heavyai/bin/heavydb
 5# Buffer_Namespace::Buffer::reserve(unsigned long) in /opt/heavyai/bin/heavydb
 6# Buffer_Namespace::Buffer::Buffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 7# Buffer_Namespace::GpuCudaBuffer::GpuCudaBuffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, CudaMgr_Namespace::CudaMgr*, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 8# Buffer_Namespace::GpuCudaBufferMgr::allocateBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 9# Buffer_Namespace::BufferMgr::createBuffer(std::vector<int, std::allocator<int> > const&, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
10# Buffer_Namespace::BufferMgr::getBuffer(std::vector<int, std::allocator<int> > const&, unsigned long) in /opt/heavyai/bin/heavydb
11# Data_Namespace::DataMgr::getChunkBuffer(std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long) in /opt/heavyai/bin/heavydb
12# Chunk_NS::Chunk::getChunkBuffer(Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
13# Chunk_NS::Chunk::getChunk(ColumnDescriptor const*, Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long, bool) in /opt/heavyai/bin/heavydb
14# ColumnFetcher::getOneTableColumnFragment(shared::TableKey const&, int, int, std::map<shared::TableKey, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*, std::less<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*> > > const&, std::__cxx11::list<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::__cxx11::list<ChunkIter, std::allocator<ChunkIter> >&, Data_Namespace::MemoryLevel, int, DeviceAllocator*) const in /opt/heavyai/bin/heavydb
15# Executor::fetchChunks(ColumnFetcher const&, RelAlgExecutionUnit const&, int, Data_Namespace::MemoryLevel, std::map<shared::TableKey, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*, std::less<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*> > > const&, std::vector<FragmentsPerTable, std::allocator<FragmentsPerTable> > const&, std::__cxx11::list<ChunkIter, std::allocator<ChunkIter> >&, std::__cxx11::list<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, DeviceAllocator*, unsigned long, bool) in /opt/heavyai/bin/heavydb
16# ExecutionKernel::runImpl(Executor*, unsigned long, SharedKernelContext&) in /opt/heavyai/bin/heavydb
17# ExecutionKernel::run(Executor*, unsigned long, SharedKernelContext&) in /opt/heavyai/bin/heavydb
18# 0x00000000024EC270 in /opt/heavyai/bin/heavydb
19# tbb::detail::r1::task_dispatcher::execute_and_wait(tbb::detail::d1::task*, tbb::detail::d1::wait_context&, tbb::detail::d1::task_group_context&) in /opt/heavyai/bin/heavydb
20# 0x00000000024B4E16 in /opt/heavyai/bin/heavydb
21# tbb::detail::r1::task_arena_impl::execute(tbb::detail::d1::task_arena_base&, tbb::detail::d1::delegate_base&) in /opt/heavyai/bin/heavydb
22# Executor::launchKernelsImpl(SharedKernelContext&, std::vector<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> >, std::allocator<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> > > >&&, ExecutorDeviceType, unsigned long) in /opt/heavyai/bin/heavydb
23# Executor::launchKernelsViaResourceMgr(SharedKernelContext&, std::vector<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> >, std::allocator<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> > > >&&, ExecutorDeviceType, std::vector<InputDescriptor, std::allocator<InputDescriptor> > const&, QueryMemoryDescriptor const&) in /opt/heavyai/bin/heavydb
24# Executor::executeWorkUnitImpl(unsigned long&, bool, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, std::shared_ptr<RowSetMemoryOwner>, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
25# Executor::executeWorkUnit(unsigned long&, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
26# RelAlgExecutor::getFilteredCountAll(RelAlgExecutionUnit const&, bool, CompilationOptions const&, ExecutionOptions const&) in /opt/heavyai/bin/heavydb
27# RelAlgExecutor::executeWorkUnit(RelAlgExecutor::WorkUnit const&, std::vector<TargetMetaInfo, std::allocator<TargetMetaInfo> > const&, bool, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, std::optional<unsigned long>) in /opt/heavyai/bin/heavydb
28# RelAlgExecutor::executeCompound(RelCompound const*, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
29# RelAlgExecutor::executeRelAlgStep(RaExecutionSequence const&, unsigned long, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
30# RelAlgExecutor::executeRelAlgSeq(RaExecutionSequence const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, bool) in /opt/heavyai/bin/heavydb
31# RelAlgExecutor::executeRelAlgQueryNoRetry(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
32# RelAlgExecutor::executeRelAlgQuery(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
33# DBHandler::execute_rel_alg(ExecutionResult&, query_state::QueryStateProxy, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, ExecutorDeviceType, int, int, bool, bool, ExplainInfo const&, std::optional<unsigned long>) const in /opt/heavyai/bin/heavydb
34# 0x000000000215E287 in /opt/heavyai/bin/heavydb
35# 0x000000000215EA14 in /opt/heavyai/bin/heavydb
36# 0x000000000215F87B in /opt/heavyai/bin/heavydb
37# 0x00007392E0C99EE8 in /lib/x86_64-linux-gnu/libc.so.6
38# 0x00000000020F3DF3 in /opt/heavyai/bin/heavydb
39# QueryDispatchQueue::worker(unsigned long) in /opt/heavyai/bin/heavydb
40# 0x000000000A62E230 in /opt/heavyai/bin/heavydb
41# 0x00007392E0C94AC3 in /lib/x86_64-linux-gnu/libc.so.6
42# 0x00007392E0D26850 in /lib/x86_64-linux-gnu/libc.so.6
2025-04-19T00:16:16.417103 1 37424 3 9 BufferMgr.h:55 Failed to allocate 3672899584 bytes with condition FailedToCreateSlab
2025-04-19T00:16:16.417110 1 37424 3 9 BufferMgr.h:56  0# OutOfMemory::OutOfMemory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) in /opt/heavyai/bin/heavydb
 1# FailedToCreateSlab::FailedToCreateSlab(unsigned long) in /opt/heavyai/bin/heavydb
 2# 0x0000000001BCAFF3 in /opt/heavyai/bin/heavydb
 3# Buffer_Namespace::BufferMgr::findFreeBuffer(unsigned long) in /opt/heavyai/bin/heavydb
 4# Buffer_Namespace::BufferMgr::reserveBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>&, unsigned long) in /opt/heavyai/bin/heavydb
 5# Buffer_Namespace::Buffer::reserve(unsigned long) in /opt/heavyai/bin/heavydb
 6# Buffer_Namespace::Buffer::Buffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 7# Buffer_Namespace::GpuCudaBuffer::GpuCudaBuffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, CudaMgr_Namespace::CudaMgr*, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 8# Buffer_Namespace::GpuCudaBufferMgr::allocateBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 9# Buffer_Namespace::BufferMgr::createBuffer(std::vector<int, std::allocator<int> > const&, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
10# Buffer_Namespace::BufferMgr::getBuffer(std::vector<int, std::allocator<int> > const&, unsigned long) in /opt/heavyai/bin/heavydb
11# Data_Namespace::DataMgr::getChunkBuffer(std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long) in /opt/heavyai/bin/heavydb
12# Chunk_NS::Chunk::getChunkBuffer(Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
13# Chunk_NS::Chunk::getChunk(ColumnDescriptor const*, Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long, bool) in /opt/heavyai/bin/heavydb
14# ColumnFetcher::getOneTableColumnFragment(shared::TableKey const&, int, int, std::map<shared::TableKey, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*, std::less<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*> > > const&, std::__cxx11::list<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::__cxx11::list<ChunkIter, std::allocator<ChunkIter> >&, Data_Namespace::MemoryLevel, int, DeviceAllocator*) const in /opt/heavyai/bin/heavydb
15# Executor::fetchChunks(ColumnFetcher const&, RelAlgExecutionUnit const&, int, Data_Namespace::MemoryLevel, std::map<shared::TableKey, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*, std::less<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const*> > > const&, std::vector<FragmentsPerTable, std::allocator<FragmentsPerTable> > const&, std::__cxx11::list<ChunkIter, std::allocator<ChunkIter> >&, std::__cxx11::list<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, DeviceAllocator*, unsigned long, bool) in /opt/heavyai/bin/heavydb
16# ExecutionKernel::runImpl(Executor*, unsigned long, SharedKernelContext&) in /opt/heavyai/bin/heavydb
17# ExecutionKernel::run(Executor*, unsigned long, SharedKernelContext&) in /opt/heavyai/bin/heavydb
18# 0x00000000024EC270 in /opt/heavyai/bin/heavydb
19# tbb::detail::r1::task_dispatcher::execute_and_wait(tbb::detail::d1::task*, tbb::detail::d1::wait_context&, tbb::detail::d1::task_group_context&) in /opt/heavyai/bin/heavydb
20# 0x00000000024B4E16 in /opt/heavyai/bin/heavydb
21# tbb::detail::r1::task_arena_impl::execute(tbb::detail::d1::task_arena_base&, tbb::detail::d1::delegate_base&) in /opt/heavyai/bin/heavydb
22# Executor::launchKernelsImpl(SharedKernelContext&, std::vector<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> >, std::allocator<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> > > >&&, ExecutorDeviceType, unsigned long) in /opt/heavyai/bin/heavydb
23# Executor::launchKernelsViaResourceMgr(SharedKernelContext&, std::vector<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> >, std::allocator<std::unique_ptr<ExecutionKernel, std::default_delete<ExecutionKernel> > > >&&, ExecutorDeviceType, std::vector<InputDescriptor, std::allocator<InputDescriptor> > const&, QueryMemoryDescriptor const&) in /opt/heavyai/bin/heavydb
24# Executor::executeWorkUnitImpl(unsigned long&, bool, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, std::shared_ptr<RowSetMemoryOwner>, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
25# Executor::executeWorkUnit(unsigned long&, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
26# RelAlgExecutor::getFilteredCountAll(RelAlgExecutionUnit const&, bool, CompilationOptions const&, ExecutionOptions const&) in /opt/heavyai/bin/heavydb
27# RelAlgExecutor::executeWorkUnit(RelAlgExecutor::WorkUnit const&, std::vector<TargetMetaInfo, std::allocator<TargetMetaInfo> > const&, bool, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, std::optional<unsigned long>) in /opt/heavyai/bin/heavydb
28# RelAlgExecutor::executeCompound(RelCompound const*, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
29# RelAlgExecutor::executeRelAlgStep(RaExecutionSequence const&, unsigned long, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
30# RelAlgExecutor::executeRelAlgSeq(RaExecutionSequence const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, bool) in /opt/heavyai/bin/heavydb
31# RelAlgExecutor::executeRelAlgQueryNoRetry(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
32# RelAlgExecutor::executeRelAlgQuery(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
33# DBHandler::execute_rel_alg(ExecutionResult&, query_state::QueryStateProxy, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, ExecutorDeviceType, int, int, bool, bool, ExplainInfo const&, std::optional<unsigned long>) const in /opt/heavyai/bin/heavydb
34# 0x000000000215E287 in /opt/heavyai/bin/heavydb
35# 0x000000000215EA14 in /opt/heavyai/bin/heavydb
36# 0x000000000215F87B in /opt/heavyai/bin/heavydb
37# 0x00007392E0C99EE8 in /lib/x86_64-linux-gnu/libc.so.6
38# 0x00000000020F3DF3 in /opt/heavyai/bin/heavydb
39# QueryDispatchQueue::worker(unsigned long) in /opt/heavyai/bin/heavydb
40# 0x000000000A62E230 in /opt/heavyai/bin/heavydb
41# 0x00007392E0C94AC3 in /lib/x86_64-linux-gnu/libc.so.6
42# 0x00007392E0D26850 in /lib/x86_64-linux-gnu/libc.so.6
2025-04-19T00:16:16.462712 I 37424 3 9 BufferMgr.cpp:322 ALLOCATION Attempted slab of 7173632 pages (3672899584B) failed GPU_MGR:0
2025-04-19T00:16:16.463014 I 37424 3 9 BufferMgr.cpp:309 ALLOCATION slab of 3586816 pages (1836449792B) created in 0 ms GPU_MGR:0
2025-04-19T00:16:16.463028 1 37424 3 9 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,7,0,
2025-04-19T00:16:16.463041 1 37424 3 9 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 292196, chunk key:  key: 1,8,7,0,
2025-04-19T00:16:16.463279 I 37424 3 9 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 93 ms
2025-04-19T00:16:16.463323 I 37424 3 9 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:16:16.463337 I 37424 3 9 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:16.463387 1 37424 3 9 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.009824 ms
2025-04-19T00:16:16.463397 1 37424 3 9 GpuInterrupt.cpp:26 Registered module 0x739278494a70 on device 0
2025-04-19T00:16:16.463513 1 37424 3 9 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:16:16.463521 1 37424 3 9 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:16.463525 1 37424 3 9 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:16.463622 1 37424 3 9 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:16:16.463701 1 37424 3 9 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:16.463715 1 37424 3 9 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:16.463720 I 37424 3 9 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:16:16.463730 I 37424 3 9 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:16:16.463741 I 37424 3 9 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 93 ms
2025-04-19T00:16:16.463786 1 37424 3 8 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 366
2025-04-19T00:16:16.464368 3 37424 3 8 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:16:16.464448 3 37424 3 8 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i64*
  %row_ptr_loaded = load i64, i64* %0, align 8
  %is_key_empty = icmp eq i64 %row_ptr_loaded, 9223372036854775807
  ret i1 %is_key_empty
}
2025-04-19T00:16:16.464477 3 37424 3 8 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_start = getelementptr i8, i8* %this_row_ptr, i32 0
  %that_targets_start = getelementptr i8, i8* %that_row_ptr, i32 0
  %count_dest = bitcast i8* %this_targets_start to i64*
  %0 = bitcast i8* %that_targets_start to i64*
  %that_targets_start_loaded = load i64, i64* %0, align 8
  %1 = call i64 @agg_sum(i64* %count_dest, i64 %that_targets_start_loaded)
  ret i32 0
}
2025-04-19T00:16:16.464507 3 37424 3 8 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %entry_idx_64 = sext i32 %that_entry_idx to i64
  %row_off_in_bytes = mul i64 %entry_idx_64, 8
  %this_row_ptr = getelementptr i8, i8* %this_buff, i64 %row_off_in_bytes
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %row_off_in_bytes
  %0 = call i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:16:16.467273 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 237 ms
2025-04-19T00:16:16.467298 1 37424 3 8 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 366
2025-04-19T00:16:16.467319 1 37424 3 8 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:16:16.467325 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 1895055608413782929
	Table/Col/Levels: ((db_id: 1, table_id: 8), 1, 0) ((db_id: 1, table_id: 8), 7, 0) 
	Simple Quals: (= (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 2000) ) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 366
	Bump Allocator: False
2025-04-19T00:16:16.467337 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:16.467350 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:16.468090 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:16.468102 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:16.468156 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:16.468166 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 4 bytes
2025-04-19T00:16:16.468420 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8, i8* %literals, i16 0
  %5 = bitcast i8* %4 to i32*
  %literal_0 = load i32, i32* %5, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %7 = call i32 @pos_start_impl(i32* %row_index_resume)
  %8 = call i32 @pos_step_impl()
  %9 = call i32 @group_buff_idx_impl()
  %10 = sext i32 %7 to i64
  %11 = getelementptr i64*, i64** %group_by_buffers, i32 %9
  %col_buffer = load i64*, i64** %11, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %12 = icmp slt i64 %10, %row_count
  br i1 %12, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %13 = sext i32 %8 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %10, %.loop.preheader ], [ %23, %filter_match ], [ %23, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %14 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_0)
  %15 = lshr i64 %pos, 15
  %16 = and i64 %15, 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %18 = call i1 @check_interrupt()
  %19 = select i1 %18, i32 10, i32 %14
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %20 = phi i32 [ %19, %.interrupt_check ], [ %14, %.forbody ]
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %.error_exit, label %22

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %20, i32* %error_code)
  ret void

22:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %23 = add i64 %pos, %13
  %24 = icmp slt i64 %23, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %25 = icmp ne i32 %crt_matched1, 0
  br i1 %25, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %22
  %26 = load i32, i32* %old_total_matched, align 4
  %27 = add i32 %26, %crt_matched1
  %limit_not_reached = icmp slt i32 %27, %6
  %28 = and i1 %24, %limit_not_reached
  br i1 %28, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %22
  br i1 %24, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  br i1 %4, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %5 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %5, i32* %old_total_matched, align 4
  %6 = load i32, i32* %max_matched, align 4
  %7 = load i32, i32* %old_total_matched, align 4
  %8 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %6, i32 %7, i64 %pos, i32 1)
  %9 = icmp ne i64* %8, null
  br i1 %9, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %10 = trunc i64 %pos to i32
  %11 = sub i32 0, %10
  ret i32 %11
}

End of IR
2025-04-19T00:16:16.468619 1 37424 3 8 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:16:16.479908 1 37424 3 8 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.080458
2025-04-19T00:16:16.547273 1 37424 3 8 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.332
2025-04-19T00:16:16.548042 1 37424 3 8 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.5735
2025-04-19T00:16:16.548136 1 37424 3 8 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 15.6007
2025-04-19T00:16:16.564646 1 37424 3 8 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 184 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:16:16.564669 1 37424 3 8 NvidiaKernel.cpp:188 Generated GPU binary code size: 456288 bytes
2025-04-19T00:16:16.565103 1 37424 3 8 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:16:16.565310 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 97 ms
2025-04-19T00:16:16.565401 1 37424 3 8 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:16:16.565413 1 37424 3 8 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Target group by indices: 0
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 366
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:16.565493 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:16.565539 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:16.565574 I 37424 3 10 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:16.565583 I 37424 3 10 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:16.565597 I 37424 3 10 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:16.565607 2 37424 3 10 ExecutionKernel.cpp:303 total_num_input_rows=73049
2025-04-19T00:16:16.565627 I 37424 3 10 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:16:16.565634 2 37424 3 10 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(8),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(0)))) ra_exe_unit.scan_limit=366 num_rows=((73049)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=73049 query_exe_context->query_mem_desc_.getEntryCount()=366 device_id=0 outer_table_key=(db_id: 1, table_id: 8) scan_limit=366 start_rowid=0 num_tables=1
2025-04-19T00:16:16.565646 I 37424 3 10 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:16.565685 1 37424 3 10 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.011456 ms
2025-04-19T00:16:16.565695 1 37424 3 10 GpuInterrupt.cpp:26 Registered module 0x7392786d7a80 on device 0
2025-04-19T00:16:16.566476 1 37424 3 10 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:16:16.566491 1 37424 3 10 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:16.566497 1 37424 3 10 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:16.566568 1 37424 3 10 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:16:16.566649 1 37424 3 10 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:16.566663 1 37424 3 10 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:16.566668 I 37424 3 10 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 1 ms
2025-04-19T00:16:16.566689 2 37424 3 10 Execute.cpp:4139 results->rowCount()=366
2025-04-19T00:16:16.566694 I 37424 3 10 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 1 ms
2025-04-19T00:16:16.566708 I 37424 3 10 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 1 ms
2025-04-19T00:16:16.566729 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 99 ms
2025-04-19T00:16:16.566746 I 37424 3 8 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 336 ms
2025-04-19T00:16:16.566757 3 37424 3 8 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-28, ...) exec_desc.getResult().getDataPtr()->rowCount()=366
2025-04-19T00:16:16.566766 I 37424 3 8 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 337 ms
2025-04-19T00:16:16.566788 1 37424 3 8 RelAlgExecutor.cpp:945 Executing query step 1 / 6
2025-04-19T00:16:16.566794 I 37424 3 8 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:16:16.566813 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 2
2025-04-19T00:16:16.566818 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=2
2025-04-19T00:16:16.566843 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 input_col_descs_unique.size()=2 source_used_inputs.size()=0
2025-04-19T00:16:16.566854 3 37424 3 8 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(8),nest_level(0)))
2025-04-19T00:16:16.566859 3 37424 3 8 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(0))))
2025-04-19T00:16:16.566879 3 37424 3 8 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0) = 1
2025-04-19T00:16:16.566908 I 37424 3 8 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:16:16.566917 3 37424 3 8 RelAlgExecutor.cpp:3692 body->getId()=31 body->toString()=RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 it==leaf_results_.end()=true
2025-04-19T00:16:16.566931 1 37424 3 8 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:16:16.566938 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 1895055608413782929
	Table/Col/Levels: ((db_id: 1, table_id: 8), 1, 0) ((db_id: 1, table_id: 8), 7, 0) 
	Simple Quals: (= (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 2000) ) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:16.566952 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:16.566961 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:16.566992 1 37424 3 8 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:16:16.567737 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:16.567751 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:16.567814 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:16.567827 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 4 bytes
2025-04-19T00:16:16.568078 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8, i8* %literals, i16 0
  %5 = bitcast i8* %4 to i32*
  %literal_0 = load i32, i32* %5, align 4
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %8 = sext i32 %pos_start to i64
  %9 = icmp slt i64 %8, %row_count
  br i1 %9, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %10 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %19, %.loop.preheader
  %pos = phi i64 [ %8, %.loop.preheader ], [ %20, %19 ]
  %11 = call i32 @row_func_hoisted_literals(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_0)
  %12 = lshr i64 %pos, 15
  %13 = and i64 %12, 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %15 = call i1 @check_interrupt()
  %16 = select i1 %15, i32 10, i32 %11
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %17 = phi i32 [ %16, %.interrupt_check ], [ %11, %.for.body ]
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %.error_exit, label %19

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %17, i32* %error_code)
  ret void

19:                                               ; preds = %.error_check
  %20 = add nsw i64 %pos, %10
  %21 = icmp slt i64 %20, %row_count
  br i1 %21, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %19
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %22 = phi i64 [ %.pre.result, %._crit_edge ], [ %7, %.entry ]
  %23 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %24 = call i64 @agg_sum_shared(i64* %23, i64 %22)
  call void @sync_threadblock()
  %25 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %25, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_0) #33 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i64* %out, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i64* %out, i32 %arg_literal_0) #33 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  br i1 %4, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %5 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:16:16.568225 1 37424 3 8 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:16:16.568464 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:16:16.568501 1 37424 3 8 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:16:16.568507 1 37424 3 8 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:16.568572 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:16.568602 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:16.568615 I 37424 3 11 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:16.568623 I 37424 3 11 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:16.568634 I 37424 3 11 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:16.568652 I 37424 3 11 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:16:16.568662 I 37424 3 11 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:16.568692 1 37424 3 11 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.009856 ms
2025-04-19T00:16:16.568700 1 37424 3 11 GpuInterrupt.cpp:26 Registered module 0x739278494a70 on device 0
2025-04-19T00:16:16.568826 1 37424 3 11 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:16:16.568836 1 37424 3 11 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:16.568841 1 37424 3 11 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:16.568936 1 37424 3 11 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:16:16.569013 1 37424 3 11 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:16.569026 1 37424 3 11 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:16.569031 I 37424 3 11 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:16:16.569040 I 37424 3 11 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:16:16.569049 I 37424 3 11 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:16:16.569065 1 37424 3 8 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 366
2025-04-19T00:16:16.569093 1 37424 3 8 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:16:16.569112 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 2 ms
2025-04-19T00:16:16.569123 1 37424 3 8 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 366
2025-04-19T00:16:16.569137 1 37424 3 8 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:16:16.569142 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 1895055608413782929
	Table/Col/Levels: ((db_id: 1, table_id: 8), 1, 0) ((db_id: 1, table_id: 8), 7, 0) 
	Simple Quals: (= (ColumnVar (db_id: 1, table_id: 8, column_id: 7), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 2000) ) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 1, table_id: 8, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 366
	Bump Allocator: False
2025-04-19T00:16:16.569157 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:16.569166 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:16.569825 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:16.569836 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:16.569881 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:16.569890 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 4 bytes
2025-04-19T00:16:16.570132 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8, i8* %literals, i16 0
  %5 = bitcast i8* %4 to i32*
  %literal_0 = load i32, i32* %5, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %7 = call i32 @pos_start_impl(i32* %row_index_resume)
  %8 = call i32 @pos_step_impl()
  %9 = call i32 @group_buff_idx_impl()
  %10 = sext i32 %7 to i64
  %11 = getelementptr i64*, i64** %group_by_buffers, i32 %9
  %col_buffer = load i64*, i64** %11, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %12 = icmp slt i64 %10, %row_count
  br i1 %12, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %13 = sext i32 %8 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %10, %.loop.preheader ], [ %23, %filter_match ], [ %23, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %14 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_0)
  %15 = lshr i64 %pos, 15
  %16 = and i64 %15, 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %18 = call i1 @check_interrupt()
  %19 = select i1 %18, i32 10, i32 %14
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %20 = phi i32 [ %19, %.interrupt_check ], [ %14, %.forbody ]
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %.error_exit, label %22

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %20, i32* %error_code)
  ret void

22:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %23 = add i64 %pos, %13
  %24 = icmp slt i64 %23, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %25 = icmp ne i32 %crt_matched1, 0
  br i1 %25, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %22
  %26 = load i32, i32* %old_total_matched, align 4
  %27 = add i32 %26, %crt_matched1
  %limit_not_reached = icmp slt i32 %27, %6
  %28 = and i1 %24, %limit_not_reached
  br i1 %28, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %22
  br i1 %24, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  br i1 %4, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %5 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %5, i32* %old_total_matched, align 4
  %6 = load i32, i32* %max_matched, align 4
  %7 = load i32, i32* %old_total_matched, align 4
  %8 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %6, i32 %7, i64 %pos, i32 1)
  %9 = icmp ne i64* %8, null
  br i1 %9, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %10 = trunc i64 %pos to i32
  %11 = sub i32 0, %10
  ret i32 %11
}

End of IR
2025-04-19T00:16:16.570304 1 37424 3 8 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:16:16.570540 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:16:16.570577 1 37424 3 8 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:16:16.570582 1 37424 3 8 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Target group by indices: 0
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 366
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:16.571269 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:16.571301 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:16.571313 I 37424 3 12 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:16.571326 I 37424 3 12 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:16.571337 I 37424 3 12 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:16.571345 2 37424 3 12 ExecutionKernel.cpp:303 total_num_input_rows=73049
2025-04-19T00:16:16.571361 I 37424 3 12 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:16:16.571367 2 37424 3 12 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(8),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(8),nest_level(0))) InputColDescriptor(col_id(7),InputDescriptor(db_id(1), table_id(8),nest_level(0)))) ra_exe_unit.scan_limit=366 num_rows=((73049)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=73049 query_exe_context->query_mem_desc_.getEntryCount()=366 device_id=0 outer_table_key=(db_id: 1, table_id: 8) scan_limit=366 start_rowid=0 num_tables=1
2025-04-19T00:16:16.571377 I 37424 3 12 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:16.571406 1 37424 3 12 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.009216 ms
2025-04-19T00:16:16.571413 1 37424 3 12 GpuInterrupt.cpp:26 Registered module 0x7392786d7a80 on device 0
2025-04-19T00:16:16.571599 1 37424 3 12 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:16:16.571607 1 37424 3 12 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:16.571611 1 37424 3 12 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:16.571683 1 37424 3 12 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:16:16.571765 1 37424 3 12 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:16.571789 1 37424 3 12 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:16.571796 I 37424 3 12 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:16:16.571815 2 37424 3 12 Execute.cpp:4139 results->rowCount()=366
2025-04-19T00:16:16.571820 I 37424 3 12 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 0 ms
2025-04-19T00:16:16.571831 I 37424 3 12 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:16:16.571847 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 2 ms
2025-04-19T00:16:16.571858 I 37424 3 8 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 4 ms
2025-04-19T00:16:16.571867 3 37424 3 8 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-31, ...) exec_desc.getResult().getDataPtr()->rowCount()=366
2025-04-19T00:16:16.571873 I 37424 3 8 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 5 ms
2025-04-19T00:16:16.571877 1 37424 3 8 RelAlgExecutor.cpp:945 Executing query step 2 / 6
2025-04-19T00:16:16.571883 I 37424 3 8 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:16:16.571903 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:16:16.571907 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:16:16.571931 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=3 source_used_inputs.size()=2
2025-04-19T00:16:16.571945 3 37424 3 8 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(17),nest_level(0)) InputDescriptor(db_id(0), table_id(-31),nest_level(1)))
2025-04-19T00:16:16.571950 3 37424 3 8 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-31),nest_level(1))))
2025-04-19T00:16:16.571979 2 37424 3 8 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:16:16.571984 2 37424 3 8 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:16:16.571989 1 37424 3 8 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:16:16.571994 1 37424 3 8 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:16:16.571999 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 0
2025-04-19T00:16:16.572006 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 to nest level 1
2025-04-19T00:16:16.572019 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:16:16.572023 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:16:16.572036 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=3 source_used_inputs.size()=2
2025-04-19T00:16:16.572053 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 0
2025-04-19T00:16:16.572059 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 to nest level 1
2025-04-19T00:16:16.572069 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:16:16.572074 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:16:16.572086 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=3 source_used_inputs.size()=2
2025-04-19T00:16:16.572102 3 37424 3 8 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1) = 5
2025-04-19T00:16:16.572156 2 37424 3 8 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 10482659139755165154 (access path: 0|1|), outer join col info: 16239555413968657717 (access path: 4|)
2025-04-19T00:16:16.572170 I 37424 3 8 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:16:16.572180 3 37424 3 8 RelAlgExecutor.cpp:3692 body->getId()=32 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:16:16.572209 1 37424 3 8 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:16:16.572213 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 6532317496897202081
	Table/Col/Levels: ((db_id: 1, table_id: 17), 1, 0) ((db_id: 1, table_id: 17), 4, 0) ((db_id: 1, table_id: 17), 8, 0) ((db_id: 1, table_id: 17), 15, 0) ((db_id: 0, table_id: -31), 0, 1) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 17, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 17, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 17, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 17, column_id: 4), rte: 0, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 17, column_id: 8), rte: 0, which_row: 3, varno: 2) , (SUM (ColumnVar (db_id: 1, table_id: 17, column_id: 15), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:16.572236 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:16.572245 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:16.572327 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:16:16.572336 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:16:16.572354 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 6532317496897202081
	Table/Col/Levels: ((db_id: 1, table_id: 17), 1, 0) ((db_id: 1, table_id: 17), 4, 0) ((db_id: 1, table_id: 17), 8, 0) ((db_id: 1, table_id: 17), 15, 0) ((db_id: 0, table_id: -31), 0, 1) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 17, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:16.572367 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:16.572376 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:16.573072 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:16.573086 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:16.573192 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:16.573269 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:16:16.573403 1 37424 3 13 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 366, # entries stored in the payload buffer: 366, hash table size : 1464 Bytes
2025-04-19T00:16:16.576721 1 37424 3 8 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 2049558762663185812)
2025-04-19T00:16:16.576753 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 3 ms
2025-04-19T00:16:16.576763 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 3 ms
2025-04-19T00:16:16.576846 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:16.576861 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:16:16.577143 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %10 = sext i32 %pos_start to i64
  %11 = icmp slt i64 %10, %row_count
  br i1 %11, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %12 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %22, %.loop.preheader
  %pos = phi i64 [ %10, %.loop.preheader ], [ %23, %22 ]
  %13 = load i64*, i64** %out, align 8
  %14 = call i32 @row_func(i64* %13, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr)
  %15 = lshr i64 %pos, 15
  %16 = and i64 %15, 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %18 = call i1 @check_interrupt()
  %19 = select i1 %18, i32 10, i32 %14
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %20 = phi i32 [ %19, %.interrupt_check ], [ %14, %.for.body ]
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %.error_exit, label %22

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %20, i32* %error_code)
  ret void

22:                                               ; preds = %.error_check
  %23 = add nsw i64 %pos, %12
  %24 = icmp slt i64 %23, %row_count
  br i1 %24, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %22
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_, %loop_done_false
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = ptrtoint i64* %join_hash_tables to i64
  %3 = sext i32 %1 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %2, i64 %3, i64 2451545, i64 2451910, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %6 = load i1, i1* %remaining_outer_cond_match, align 1
  %7 = and i1 %5, %6
  br i1 %7, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %8 = call i32 @filter_func(i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %out, i1* %loop_done)
  %9 = load i1, i1* %loop_done, align 1
  br i1 %9, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %8

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func(i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %out, i1* %loop_done) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = alloca i64, i32 2, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = getelementptr i64, i64* %0, i32 0
  store i64 %3, i64* %4, align 8
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = getelementptr i64, i64* %0, i32 1
  store i64 %7, i64* %8, align 8
  %9 = bitcast i64* %out to i8*
  %10 = bitcast i64* %0 to i8*
  call void @linear_probabilistic_count(i8* %9, i32 268435456, i8* %10, i32 16)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:16:16.577402 1 37424 3 8 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:16:16.588737 1 37424 3 8 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.08374
2025-04-19T00:16:16.651582 1 37424 3 8 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.9973
2025-04-19T00:16:16.652486 1 37424 3 8 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 16.2845
2025-04-19T00:16:16.652583 1 37424 3 8 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 16.3119
2025-04-19T00:16:16.669501 1 37424 3 8 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 57 registers, 184 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:16:16.669527 1 37424 3 8 NvidiaKernel.cpp:188 Generated GPU binary code size: 458720 bytes
2025-04-19T00:16:16.669986 1 37424 3 8 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:16:16.670193 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 97 ms
2025-04-19T00:16:16.670252 1 37424 3 8 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:16:16.670258 1 37424 3 8 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Estimator
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	Empty	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:16.670337 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:16.670368 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:16.670387 I 37424 3 14 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:16.670396 I 37424 3 14 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:16.670418 1 37424 3 14 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,1,0,
2025-04-19T00:16:16.670427 1 37424 3 14 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,1,0,
2025-04-19T00:16:16.671182 1 37424 3 14 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,4,0,
2025-04-19T00:16:16.671193 1 37424 3 14 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,4,0,
2025-04-19T00:16:16.671786 1 37424 3 14 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,8,0,
2025-04-19T00:16:16.671796 1 37424 3 14 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,8,0,
2025-04-19T00:16:16.672378 1 37424 3 14 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,15,0,
2025-04-19T00:16:16.672937 I 37424 3 14 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 2 ms
2025-04-19T00:16:16.672958 I 37424 3 14 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:16:16.672968 I 37424 3 14 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:16.673015 1 37424 3 14 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.015104 ms
2025-04-19T00:16:16.673025 1 37424 3 14 GpuInterrupt.cpp:26 Registered module 0x7392786d3c80 on device 0
2025-04-19T00:16:16.674584 1 37424 3 14 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 1 ms
2025-04-19T00:16:16.674595 1 37424 3 14 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:16.674600 1 37424 3 14 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:16.674750 1 37424 3 14 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:16:16.801217 I 37424 3 14 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 128 ms
2025-04-19T00:16:16.801250 I 37424 3 14 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 128 ms
2025-04-19T00:16:16.801268 I 37424 3 14 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 130 ms
2025-04-19T00:16:16.801303 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 228 ms
2025-04-19T00:16:16.874223 1 37424 3 8 RelAlgExecutor.cpp:3926 CardinalityEstimationRequired, Use ndv_estimation: 49996, cardinality for estimated_groups_buffer_entry_guess: 99992
2025-04-19T00:16:16.874250 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 6532317496897202081
	Table/Col/Levels: ((db_id: 1, table_id: 17), 1, 0) ((db_id: 1, table_id: 17), 4, 0) ((db_id: 1, table_id: 17), 8, 0) ((db_id: 1, table_id: 17), 15, 0) ((db_id: 0, table_id: -31), 0, 1) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 17, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -31, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 17, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 17, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 17, column_id: 4), rte: 0, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 17, column_id: 8), rte: 0, which_row: 3, varno: 2) , (SUM (ColumnVar (db_id: 1, table_id: 17, column_id: 15), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:16.874293 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:16.874312 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:16.875056 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:16.875070 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:16.875158 1 37424 3 8 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 2049558762663185812)
2025-04-19T00:16:16.875170 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:16.875221 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:16:16.875347 1 37424 3 15 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 366, # entries stored in the payload buffer: 366, hash table size : 1464 Bytes
2025-04-19T00:16:16.875542 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:16:16.875570 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:16.875738 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:16.875750 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:16:16.876033 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !27

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !27
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %10 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %11 = call i32 @pos_start_impl(i32* %row_index_resume)
  %12 = call i32 @pos_step_impl()
  %13 = call i32 @group_buff_idx_impl()
  %14 = sext i32 %11 to i64
  %15 = getelementptr i64*, i64** %group_by_buffers, i32 %13
  %col_buffer = load i64*, i64** %15, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %16 = icmp slt i64 %14, %row_count
  br i1 %16, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %17 = sext i32 %12 to i64
  br label %.forbody

.forbody:                                         ; preds = %26, %.loop.preheader
  %pos = phi i64 [ %14, %.loop.preheader ], [ %27, %26 ]
  %18 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr)
  %19 = lshr i64 %pos, 15
  %20 = and i64 %19, 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %22 = call i1 @check_interrupt()
  %23 = select i1 %22, i32 10, i32 %18
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %24 = phi i32 [ %23, %.interrupt_check ], [ %18, %.forbody ]
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %.error_exit, label %26

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %24, i32* %error_code)
  ret void

26:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %27 = add i64 %pos, %17
  %28 = icmp slt i64 %27, %row_count
  br i1 %28, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %26
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_, %loop_done_false
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = ptrtoint i64* %join_hash_tables to i64
  %3 = sext i32 %1 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %2, i64 %3, i64 2451545, i64 2451910, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %6 = load i1, i1* %remaining_outer_cond_match, align 1
  %7 = and i1 %5, %6
  br i1 %7, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %8 = call i32 @filter_func(i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %group_by_buff, i1* %loop_done, i8* %col_buf3)
  %9 = load i1, i1* %loop_done, align 1
  br i1 %9, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %8

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func(i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %group_by_buff, i1* %loop_done, i8* %col_buf3) #34 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = alloca i32, i32 2, align 4
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = getelementptr i32, i32* %0, i32 0
  store i32 %2, i32* %3, align 4
  %4 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %5 = trunc i64 %4 to i32
  %6 = getelementptr i32, i32* %0, i32 1
  store i32 %5, i32* %6, align 4
  %7 = bitcast i32* %0 to i64*
  %8 = call i64* @get_group_value(i64* %group_by_buff, i32 99992, i64* %7, i32 2, i32 4, i32 2)
  %9 = icmp ne i64* %8, null
  br i1 %9, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %10 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %11 = trunc i64 %10 to i32
  %12 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %11, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr = getelementptr i64, i64* %8, i64 0
  %13 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr, i64 %12, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %14 = trunc i64 %pos to i32
  %15 = sub i32 0, %14
  ret i32 %15
}

End of IR
2025-04-19T00:16:16.876260 1 37424 3 8 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:16:16.889060 1 37424 3 8 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.077314
2025-04-19T00:16:16.950199 1 37424 3 8 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.9522
2025-04-19T00:16:16.950964 1 37424 3 8 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.179
2025-04-19T00:16:16.951061 1 37424 3 8 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 15.2062
2025-04-19T00:16:16.966917 1 37424 3 8 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 224 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:16:16.966938 1 37424 3 8 NvidiaKernel.cpp:188 Generated GPU binary code size: 473440 bytes
2025-04-19T00:16:16.967392 1 37424 3 8 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:16:16.967663 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 93 ms
2025-04-19T00:16:16.967719 1 37424 3 8 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:16:16.967725 1 37424 3 8 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 2
	Target group by indices: 0,1,-1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 8 , 8
	col_to_slot_map=[[0], [1], [2]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 99992
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:16.967889 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:16.967923 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:16.967942 I 37424 3 16 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:16.967952 I 37424 3 16 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:16.967971 1 37424 3 16 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,15,0,
2025-04-19T00:16:16.968103 I 37424 3 16 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:16.968133 I 37424 3 16 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:16:16.968151 2 37424 3 16 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(17),nest_level(0)) InputDescriptor(db_id(0), table_id(-31),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-31),nest_level(1)))) ra_exe_unit.scan_limit=0 num_rows=((287867 366)) frag_offsets=((0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=99992 device_id=0 outer_table_key=(db_id: 1, table_id: 17) scan_limit=0 start_rowid=0 num_tables=2
2025-04-19T00:16:16.968166 I 37424 3 16 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:16.968280 1 37424 3 16 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.012416 ms
2025-04-19T00:16:16.968289 1 37424 3 16 GpuInterrupt.cpp:26 Registered module 0x7392780c74c0 on device 0
2025-04-19T00:16:16.968496 1 37424 3 16 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:16:16.968504 1 37424 3 16 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:16.968510 1 37424 3 16 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:16.968803 1 37424 3 16 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:16:16.969794 1 37424 3 16 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:16.969812 1 37424 3 16 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:16.969817 I 37424 3 16 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 1 ms
2025-04-19T00:16:16.970342 3 37424 3 16 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:16:16.970420 3 37424 3 16 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i32*
  %row_ptr_loaded = load i32, i32* %0, align 4
  %is_key_empty = icmp eq i32 %row_ptr_loaded, 2147483647
  ret i1 %is_key_empty
}
2025-04-19T00:16:16.970448 3 37424 3 16 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_targets_ptr, i8* %that_targets_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %target_1_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 0
  %target_1_first_slot1 = getelementptr i8, i8* %that_targets_ptr, i32 0
  %target_2_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 0
  %target_2_first_slot2 = getelementptr i8, i8* %that_targets_ptr, i32 0
  %sum_dest = bitcast i8* %target_2_first_slot to i64*
  %0 = bitcast i8* %target_2_first_slot2 to i64*
  %target_2_first_slot_loaded = load i64, i64* %0, align 8
  %1 = call i64 @agg_sum_skip_val(i64* %sum_dest, i64 %target_2_first_slot_loaded, i64 -9223372036854775808)
  ret i32 0
}
2025-04-19T00:16:16.970476 3 37424 3 16 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %that_entry_idx_64 = sext i32 %that_entry_idx to i64
  %that_row_off_in_bytes = mul i64 %that_entry_idx_64, 16
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %that_row_off_in_bytes
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_ptr_out = alloca i64*, align 8
  %this_is_empty_out = alloca i8, align 1
  call void @get_group_value_reduction_rt(i8* %this_buff, i8* %that_row_ptr, i32 2, i8* %this_qmd_handle, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i64 16, i64** %this_targets_ptr_out, i8* %this_is_empty_out)
  %this_targets_ptr_i64 = load i64*, i64** %this_targets_ptr_out, align 8
  %this_is_empty = load i8, i8* %this_is_empty_out, align 1
  %this_is_empty_bool = trunc i8 %this_is_empty to i1
  br i1 %this_is_empty_bool, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 0

.do_reduction2:                                   ; preds = %.do_reduction
  %this_targets_ptr = bitcast i64* %this_targets_ptr_i64 to i8*
  %that_targets_ptr = getelementptr i8, i8* %that_row_ptr, i32 8
  %0 = call i32 @reduce_one_entry(i8* %this_targets_ptr, i8* %that_targets_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:16:16.973522 2 37424 3 16 Execute.cpp:4139 results->rowCount()=49997
2025-04-19T00:16:16.974273 I 37424 3 16 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 6 ms
2025-04-19T00:16:16.974291 I 37424 3 16 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 6 ms
2025-04-19T00:16:16.974334 1 37424 3 8 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:16:16.974360 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 100 ms
2025-04-19T00:16:16.974386 1 37424 3 8 Execute.cpp:5202 Put estimated cardinality to the cache
2025-04-19T00:16:16.974420 I 37424 3 8 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 402 ms
2025-04-19T00:16:16.974434 3 37424 3 8 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-32, ...) exec_desc.getResult().getDataPtr()->rowCount()=49997
2025-04-19T00:16:16.974808 I 37424 3 8 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 402 ms
2025-04-19T00:16:16.974817 1 37424 3 8 RelAlgExecutor.cpp:945 Executing query step 3 / 6
2025-04-19T00:16:16.974826 I 37424 3 8 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:16:16.974849 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:16:16.974856 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , agg_exps=RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=2) RexRef(1) , 1, , fields=["ctr_store_sk", "$f1"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:16:16.974930 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , agg_exps=RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=2) RexRef(1) , 1, , fields=["ctr_store_sk", "$f1"], is_agg=1 input_col_descs_unique.size()=2 source_used_inputs.size()=0
2025-04-19T00:16:16.974972 3 37424 3 8 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(0), table_id(-32),nest_level(0)))
2025-04-19T00:16:16.974978 3 37424 3 8 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-32),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-32),nest_level(0))))
2025-04-19T00:16:16.974993 3 37424 3 8 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , agg_exps=RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=2) RexRef(1) , 1, , fields=["ctr_store_sk", "$f1"], is_agg=1) = 3
2025-04-19T00:16:16.975080 2 37424 3 8 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 10482659139755165154 (access path: 0|1|), outer join col info: 16239555413968657717 (access path: 4|)
2025-04-19T00:16:16.975093 I 37424 3 8 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:16:16.975103 3 37424 3 8 RelAlgExecutor.cpp:3692 body->getId()=33 body->toString()=RelCompound, filter_expr=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , agg_exps=RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=2) RexRef(1) , 1, , fields=["ctr_store_sk", "$f1"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:16:16.975155 1 37424 3 8 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:16:16.975160 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 13485080808518995491
	Table/Col/Levels: ((db_id: 0, table_id: -32), 1, 0) ((db_id: 0, table_id: -32), 2, 0) 
	Quals: (NOT (IS NULL (ColumnVar (db_id: 0, table_id: -32, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) ) 
	Group By: (ColumnVar (db_id: 0, table_id: -32, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 0, table_id: -32, column_id: 1), rte: 0, which_row: 3, varno: 1) , (AVG (ColumnVar (db_id: 0, table_id: -32, column_id: 2), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:16.975174 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:16.975183 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:16.977664 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:16.977678 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:16.977755 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:16.977767 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:16:16.978025 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %4 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %5 = call i32 @pos_start_impl(i32* %row_index_resume)
  %6 = call i32 @pos_step_impl()
  %7 = call i32 @group_buff_idx_impl()
  %8 = sext i32 %5 to i64
  %9 = getelementptr i64*, i64** %group_by_buffers, i32 %7
  %col_buffer = load i64*, i64** %9, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %10 = icmp slt i64 %8, %row_count
  br i1 %10, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %11 = sext i32 %6 to i64
  br label %.forbody

.forbody:                                         ; preds = %20, %.loop.preheader
  %pos = phi i64 [ %8, %.loop.preheader ], [ %21, %20 ]
  %12 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i64* %join_hash_tables, i8* %row_func_mgr)
  %13 = lshr i64 %pos, 15
  %14 = and i64 %13, 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %16 = call i1 @check_interrupt()
  %17 = select i1 %16, i32 10, i32 %12
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %18 = phi i32 [ %17, %.interrupt_check ], [ %12, %.forbody ]
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %.error_exit, label %20

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %18, i32* %error_code)
  ret void

20:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %21 = add i64 %pos, %11
  %22 = icmp slt i64 %21, %row_count
  br i1 %22, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %20
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %0 = call i32 @filter_func(i8* %col_buf0, i64 %pos, i64* %group_by_buff, i8* %col_buf1)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i8* %col_buf0, i64 %pos, i64* %group_by_buff, i8* %col_buf1) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = icmp eq i32 %1, -2147483648
  %3 = xor i1 %2, true
  %4 = and i1 true, %3
  br i1 %4, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %5 = call i64 @translate_null_key_int32_t(i32 %1, i32 -2147483648, i64 11)
  %6 = sext i32 %1 to i64
  %7 = call i64* @get_group_value_fast(i64* %group_by_buff, i64 %5, i64 1, i64 0, i32 4)
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %9 = trunc i64 %8 to i32
  %agg_col_ptr = getelementptr i64, i64* %7, i64 0
  %10 = sext i32 %9 to i64
  call void @agg_id_shared(i64* %agg_col_ptr, i64 %10)
  %11 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 8, i64 %pos)
  %agg_col_ptr1 = getelementptr i64, i64* %7, i64 1
  %12 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr1, i64 %11, i64 -9223372036854775808)
  %agg_col_ptr2 = getelementptr i64, i64* %7, i64 2
  %13 = call i64 @agg_count_skip_val_shared(i64* %agg_col_ptr2, i64 %11, i64 -9223372036854775808)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:16:16.978220 1 37424 3 8 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:16:16.989398 1 37424 3 8 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.084787
2025-04-19T00:16:17.050646 1 37424 3 8 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.2498
2025-04-19T00:16:17.051425 1 37424 3 8 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.4936
2025-04-19T00:16:17.051523 1 37424 3 8 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 15.5216
2025-04-19T00:16:17.067912 1 37424 3 8 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 50 registers, 160 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:16:17.067935 1 37424 3 8 NvidiaKernel.cpp:188 Generated GPU binary code size: 459872 bytes
2025-04-19T00:16:17.068403 1 37424 3 8 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:16:17.068611 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 93 ms
2025-04-19T00:16:17.068661 1 37424 3 8 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:16:17.068666 1 37424 3 8 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Perfect Hash
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	1 | 8 , 8
	2 | 8 , 8
	col_to_slot_map=[[0], [1, 2]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: True
	Lazy Init Groups (GPU): True
	Entry Count: 11
	Min Val (perfect hash only): 1
	Max Val (perfect hash only): 10
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:17.068745 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:17.068783 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:17.068804 I 37424 3 4949 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:17.068816 I 37424 3 4949 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:17.068829 I 37424 3 4949 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:17.071992 I 37424 3 4949 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 3 ms
2025-04-19T00:16:17.072249 I 37424 3 4949 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 3 ms
2025-04-19T00:16:17.072408 I 37424 3 4949 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:16:17.072416 2 37424 3 4949 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-32),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-32),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-32),nest_level(0)))) ra_exe_unit.scan_limit=0 num_rows=((49997)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=11 device_id=0 outer_table_key=(db_id: 0, table_id: -32) scan_limit=0 start_rowid=0 num_tables=1
2025-04-19T00:16:17.072431 I 37424 3 4949 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:17.072476 1 37424 3 4949 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.013632 ms
2025-04-19T00:16:17.072486 1 37424 3 4949 GpuInterrupt.cpp:26 Registered module 0x7392541a6380 on device 0
2025-04-19T00:16:17.072897 1 37424 3 4949 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:16:17.072917 1 37424 3 4949 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:17.072923 1 37424 3 4949 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:17.073007 1 37424 3 4949 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:16:17.073096 1 37424 3 4949 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:17.073109 1 37424 3 4949 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:17.073114 I 37424 3 4949 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:16:17.073689 3 37424 3 4949 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:16:17.073764 3 37424 3 4949 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i64*
  %row_ptr_loaded = load i64, i64* %0, align 8
  %is_key_empty = icmp eq i64 %row_ptr_loaded, 9223372036854775807
  ret i1 %is_key_empty
}
2025-04-19T00:16:17.073809 3 37424 3 4949 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %this_row_ptr, i8* %that_row_ptr, i32 8, i1 false)
  %this_targets_start = getelementptr i8, i8* %this_row_ptr, i32 8
  %that_targets_start = getelementptr i8, i8* %that_row_ptr, i32 8
  %0 = bitcast i8* %that_targets_start to i64*
  %that_targets_start_loaded = load i64, i64* %0, align 8
  call void @write_projection_int64(i8* %this_targets_start, i64 %that_targets_start_loaded, i64 0)
  %this_target_1_first_slot = getelementptr i8, i8* %this_targets_start, i32 8
  %that_target_1_first_slot = getelementptr i8, i8* %that_targets_start, i32 8
  %this_target_1_second_slot = getelementptr i8, i8* %this_target_1_first_slot, i32 8
  %that_target_1_second_slot = getelementptr i8, i8* %that_target_1_first_slot, i32 8
  %count_dest = bitcast i8* %this_target_1_second_slot to i64*
  %1 = bitcast i8* %that_target_1_second_slot to i64*
  %that_target_1_second_slot_loaded = load i64, i64* %1, align 8
  %2 = call i64 @agg_sum(i64* %count_dest, i64 %that_target_1_second_slot_loaded)
  %sum_dest = bitcast i8* %this_target_1_first_slot to i64*
  %3 = bitcast i8* %that_target_1_first_slot to i64*
  %that_target_1_first_slot_loaded = load i64, i64* %3, align 8
  %4 = call i64 @agg_sum_skip_val(i64* %sum_dest, i64 %that_target_1_first_slot_loaded, i64 0)
  ret i32 0
}
2025-04-19T00:16:17.073858 3 37424 3 4949 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %entry_idx_64 = sext i32 %that_entry_idx to i64
  %row_off_in_bytes = mul i64 %entry_idx_64, 32
  %this_row_ptr = getelementptr i8, i8* %this_buff, i64 %row_off_in_bytes
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %row_off_in_bytes
  %0 = call i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:16:17.077103 2 37424 3 4949 Execute.cpp:4139 results->rowCount()=6
2025-04-19T00:16:17.077125 I 37424 3 4949 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 4 ms
2025-04-19T00:16:17.077172 I 37424 3 4949 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 8 ms
2025-04-19T00:16:17.077223 1 37424 3 8 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:16:17.077240 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 102 ms
2025-04-19T00:16:17.077256 I 37424 3 8 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 102 ms
2025-04-19T00:16:17.077267 3 37424 3 8 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-33, ...) exec_desc.getResult().getDataPtr()->rowCount()=6
2025-04-19T00:16:17.077276 I 37424 3 8 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 102 ms
2025-04-19T00:16:17.077282 1 37424 3 8 RelAlgExecutor.cpp:945 Executing query step 4 / 6
2025-04-19T00:16:17.077288 I 37424 3 8 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:16:17.077308 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 2
2025-04-19T00:16:17.077313 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(store.s_state) RexLiteral(TN type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(store.s_store_sk) , agg_exps=, scalar_sources=RexInput(store.s_store_sk) , 0, , fields=["s_store_sk"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=2
2025-04-19T00:16:17.077338 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(store.s_state) RexLiteral(TN type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(store.s_store_sk) , agg_exps=, scalar_sources=RexInput(store.s_store_sk) , 0, , fields=["s_store_sk"], is_agg=0 input_col_descs_unique.size()=2 source_used_inputs.size()=0
2025-04-19T00:16:17.077349 3 37424 3 8 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(16),nest_level(0)))
2025-04-19T00:16:17.077354 3 37424 3 8 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(0))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(0))))
2025-04-19T00:16:17.077386 3 37424 3 8 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(0, operands=RexInput(store.s_state) RexLiteral(TN type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(store.s_store_sk) , agg_exps=, scalar_sources=RexInput(store.s_store_sk) , 0, , fields=["s_store_sk"], is_agg=0) = 1
2025-04-19T00:16:17.077420 I 37424 3 8 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:16:17.077429 3 37424 3 8 RelAlgExecutor.cpp:3692 body->getId()=30 body->toString()=RelCompound, filter_expr=RexOperator(0, operands=RexInput(store.s_state) RexLiteral(TN type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(store.s_store_sk) , agg_exps=, scalar_sources=RexInput(store.s_store_sk) , 0, , fields=["s_store_sk"], is_agg=0 it==leaf_results_.end()=true
2025-04-19T00:16:17.077444 1 37424 3 8 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:16:17.077450 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 7871203563697083969
	Table/Col/Levels: ((db_id: 1, table_id: 16), 1, 0) ((db_id: 1, table_id: 16), 25, 0) 
	Quals: (= (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) (CAST VARCHAR(2,0) DICT(106) (Const TN) ) ) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:17.077464 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:17.077474 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:17.077520 1 37424 3 8 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:16:17.078155 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:17.078167 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:17.078219 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:17.078229 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 4 bytes
2025-04-19T00:16:17.078467 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8, i8* %literals, i16 0
  %5 = bitcast i8* %4 to i32*
  %literal_0 = load i32, i32* %5, align 4
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %8 = sext i32 %pos_start to i64
  %9 = icmp slt i64 %8, %row_count
  br i1 %9, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %10 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %19, %.loop.preheader
  %pos = phi i64 [ %8, %.loop.preheader ], [ %20, %19 ]
  %11 = call i32 @row_func_hoisted_literals(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_0)
  %12 = lshr i64 %pos, 15
  %13 = and i64 %12, 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %15 = call i1 @check_interrupt()
  %16 = select i1 %15, i32 10, i32 %11
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %17 = phi i32 [ %16, %.interrupt_check ], [ %11, %.for.body ]
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %.error_exit, label %19

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %17, i32* %error_code)
  ret void

19:                                               ; preds = %.error_check
  %20 = add nsw i64 %pos, %10
  %21 = icmp slt i64 %20, %row_count
  br i1 %21, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %19
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %22 = phi i64 [ %.pre.result, %._crit_edge ], [ %7, %.entry ]
  %23 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %24 = call i64 @agg_sum_shared(i64* %23, i64 %22)
  call void @sync_threadblock()
  %25 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %25, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_0) #33 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i64* %out, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i64* %out, i32 %arg_literal_0) #33 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  br i1 %4, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %5 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:16:17.078615 1 37424 3 8 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:16:17.078865 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:16:17.078896 1 37424 3 8 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:16:17.078901 1 37424 3 8 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:17.078955 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:17.078974 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:17.078989 I 37424 3 4950 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:17.078998 I 37424 3 4950 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:17.079009 1 37424 3 4950 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,1,0,
2025-04-19T00:16:17.079029 1 37424 3 4950 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,25,0,
2025-04-19T00:16:17.079036 1 37424 3 4950 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,25,0,
2025-04-19T00:16:17.079062 I 37424 3 4950 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:17.079082 I 37424 3 4950 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:16:17.079094 I 37424 3 4950 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:17.079125 1 37424 3 4950 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.008192 ms
2025-04-19T00:16:17.079133 1 37424 3 4950 GpuInterrupt.cpp:26 Registered module 0x739278494a70 on device 0
2025-04-19T00:16:17.079245 1 37424 3 4950 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:16:17.079252 1 37424 3 4950 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:17.079257 1 37424 3 4950 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:17.079324 1 37424 3 4950 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:16:17.079405 1 37424 3 4950 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:17.079418 1 37424 3 4950 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:17.079423 I 37424 3 4950 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:16:17.079432 I 37424 3 4950 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:16:17.079442 I 37424 3 4950 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:16:17.079455 1 37424 3 8 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 12
2025-04-19T00:16:17.079480 1 37424 3 8 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:16:17.079493 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 2 ms
2025-04-19T00:16:17.079503 1 37424 3 8 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 12
2025-04-19T00:16:17.079518 1 37424 3 8 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:16:17.079528 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 7871203563697083969
	Table/Col/Levels: ((db_id: 1, table_id: 16), 1, 0) ((db_id: 1, table_id: 16), 25, 0) 
	Quals: (= (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) (CAST VARCHAR(2,0) DICT(106) (Const TN) ) ) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 12
	Bump Allocator: False
2025-04-19T00:16:17.079539 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:17.079548 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:17.080320 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:17.080338 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:17.080395 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:17.080406 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 4 bytes
2025-04-19T00:16:17.080718 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8, i8* %literals, i16 0
  %5 = bitcast i8* %4 to i32*
  %literal_0 = load i32, i32* %5, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %6 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %7 = call i32 @pos_start_impl(i32* %row_index_resume)
  %8 = call i32 @pos_step_impl()
  %9 = call i32 @group_buff_idx_impl()
  %10 = sext i32 %7 to i64
  %11 = getelementptr i64*, i64** %group_by_buffers, i32 %9
  %col_buffer = load i64*, i64** %11, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %12 = icmp slt i64 %10, %row_count
  br i1 %12, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %13 = sext i32 %8 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %10, %.loop.preheader ], [ %23, %filter_match ], [ %23, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %14 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_0)
  %15 = lshr i64 %pos, 15
  %16 = and i64 %15, 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %18 = call i1 @check_interrupt()
  %19 = select i1 %18, i32 10, i32 %14
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %20 = phi i32 [ %19, %.interrupt_check ], [ %14, %.forbody ]
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %.error_exit, label %22

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %20, i32* %error_code)
  ret void

22:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %23 = add i64 %pos, %13
  %24 = icmp slt i64 %23, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %25 = icmp ne i32 %crt_matched1, 0
  br i1 %25, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %22
  %26 = load i32, i32* %old_total_matched, align 4
  %27 = add i32 %26, %crt_matched1
  %limit_not_reached = icmp slt i32 %27, %6
  %28 = and i1 %24, %limit_not_reached
  br i1 %28, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %22
  br i1 %24, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf1, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  br i1 %4, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %5 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %5, i32* %old_total_matched, align 4
  %6 = load i32, i32* %max_matched, align 4
  %7 = load i32, i32* %old_total_matched, align 4
  %8 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %6, i32 %7, i64 %pos, i32 1)
  %9 = icmp ne i64* %8, null
  br i1 %9, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %10 = trunc i64 %pos to i32
  %11 = sub i32 0, %10
  ret i32 %11
}

End of IR
2025-04-19T00:16:17.080916 1 37424 3 8 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:16:17.081162 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:16:17.081192 1 37424 3 8 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:16:17.081197 1 37424 3 8 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Target group by indices: 0
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 12
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:17.081246 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:17.081263 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:17.081280 I 37424 3 4951 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:17.081288 I 37424 3 4951 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:17.081299 I 37424 3 4951 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:17.081308 2 37424 3 4951 ExecutionKernel.cpp:303 total_num_input_rows=12
2025-04-19T00:16:17.081323 I 37424 3 4951 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:16:17.081331 2 37424 3 4951 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(16),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(0))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(0)))) ra_exe_unit.scan_limit=12 num_rows=((12)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=12 query_exe_context->query_mem_desc_.getEntryCount()=12 device_id=0 outer_table_key=(db_id: 1, table_id: 16) scan_limit=12 start_rowid=0 num_tables=1
2025-04-19T00:16:17.081341 I 37424 3 4951 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:17.081372 1 37424 3 4951 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.010368 ms
2025-04-19T00:16:17.081380 1 37424 3 4951 GpuInterrupt.cpp:26 Registered module 0x7392786d7a80 on device 0
2025-04-19T00:16:17.081568 1 37424 3 4951 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:16:17.081577 1 37424 3 4951 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:17.081582 1 37424 3 4951 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:17.081649 1 37424 3 4951 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:16:17.081726 1 37424 3 4951 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:17.081740 1 37424 3 4951 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:17.081745 I 37424 3 4951 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:16:17.081764 2 37424 3 4951 Execute.cpp:4139 results->rowCount()=12
2025-04-19T00:16:17.081778 I 37424 3 4951 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 0 ms
2025-04-19T00:16:17.081796 I 37424 3 4951 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:16:17.081812 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 2 ms
2025-04-19T00:16:17.081824 I 37424 3 8 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 4 ms
2025-04-19T00:16:17.081834 3 37424 3 8 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-30, ...) exec_desc.getResult().getDataPtr()->rowCount()=12
2025-04-19T00:16:17.081840 I 37424 3 8 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 4 ms
2025-04-19T00:16:17.081846 1 37424 3 8 RelAlgExecutor.cpp:945 Executing query step 5 / 6
2025-04-19T00:16:17.081852 I 37424 3 8 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:16:17.081866 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:16:17.081871 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:16:17.081895 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=3 source_used_inputs.size()=2
2025-04-19T00:16:17.081909 3 37424 3 8 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(17),nest_level(0)) InputDescriptor(db_id(0), table_id(-28),nest_level(1)))
2025-04-19T00:16:17.081914 3 37424 3 8 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-28),nest_level(1))))
2025-04-19T00:16:17.081943 2 37424 3 8 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:16:17.081948 2 37424 3 8 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:16:17.081953 1 37424 3 8 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:16:17.081959 1 37424 3 8 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:16:17.081964 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 0
2025-04-19T00:16:17.081971 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 to nest level 1
2025-04-19T00:16:17.081985 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:16:17.081989 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:16:17.082002 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=3 source_used_inputs.size()=2
2025-04-19T00:16:17.082019 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 0
2025-04-19T00:16:17.082025 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(date_dim.d_year) RexLiteral(2000 type=DECIMAL(4,0) target_type=INT(10,0)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(date_dim.d_date_sk) , agg_exps=, scalar_sources=RexInput(date_dim.d_date_sk) , 0, , fields=["d_date_sk"], is_agg=0 to nest level 1
2025-04-19T00:16:17.082036 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 3
2025-04-19T00:16:17.082041 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=3
2025-04-19T00:16:17.082053 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 input_col_descs_unique.size()=3 source_used_inputs.size()=2
2025-04-19T00:16:17.082069 3 37424 3 8 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1) = 5
2025-04-19T00:16:17.082126 2 37424 3 8 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 633895424304136072 (access path: 0|1|), outer join col info: 16239555413968657717 (access path: 4|)
2025-04-19T00:16:17.082140 I 37424 3 8 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:16:17.082150 3 37424 3 8 RelAlgExecutor.cpp:3692 body->getId()=29 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:16:17.082180 1 37424 3 8 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:16:17.082189 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 6532317496897202081
	Table/Col/Levels: ((db_id: 1, table_id: 17), 1, 0) ((db_id: 1, table_id: 17), 4, 0) ((db_id: 1, table_id: 17), 8, 0) ((db_id: 1, table_id: 17), 15, 0) ((db_id: 0, table_id: -28), 0, 1) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 17, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -28, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 17, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 17, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 17, column_id: 4), rte: 0, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 17, column_id: 8), rte: 0, which_row: 3, varno: 2) , (SUM (ColumnVar (db_id: 1, table_id: 17, column_id: 15), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:17.082208 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:17.082217 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:17.082271 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:16:17.082280 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:16:17.082293 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 6532317496897202081
	Table/Col/Levels: ((db_id: 1, table_id: 17), 1, 0) ((db_id: 1, table_id: 17), 4, 0) ((db_id: 1, table_id: 17), 8, 0) ((db_id: 1, table_id: 17), 15, 0) ((db_id: 0, table_id: -28), 0, 1) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 17, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -28, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:17.082307 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:17.082315 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:17.082950 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:17.082964 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:17.083050 1 37424 3 8 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 2049558762663185812)
2025-04-19T00:16:17.083063 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:17.083119 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:16:17.083202 1 37424 3 4952 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 366, # entries stored in the payload buffer: 366, hash table size : 1464 Bytes
2025-04-19T00:16:17.083390 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:16:17.083400 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:17.083456 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:17.083467 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:16:17.083700 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %10 = sext i32 %pos_start to i64
  %11 = icmp slt i64 %10, %row_count
  br i1 %11, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %12 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %22, %.loop.preheader
  %pos = phi i64 [ %10, %.loop.preheader ], [ %23, %22 ]
  %13 = load i64*, i64** %out, align 8
  %14 = call i32 @row_func(i64* %13, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr)
  %15 = lshr i64 %pos, 15
  %16 = and i64 %15, 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %18 = call i1 @check_interrupt()
  %19 = select i1 %18, i32 10, i32 %14
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %20 = phi i32 [ %19, %.interrupt_check ], [ %14, %.for.body ]
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %.error_exit, label %22

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %20, i32* %error_code)
  ret void

22:                                               ; preds = %.error_check
  %23 = add nsw i64 %pos, %12
  %24 = icmp slt i64 %23, %row_count
  br i1 %24, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %22
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_, %loop_done_false
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = ptrtoint i64* %join_hash_tables to i64
  %3 = sext i32 %1 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %2, i64 %3, i64 2451545, i64 2451910, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %6 = load i1, i1* %remaining_outer_cond_match, align 1
  %7 = and i1 %5, %6
  br i1 %7, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %8 = call i32 @filter_func(i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %out, i1* %loop_done)
  %9 = load i1, i1* %loop_done, align 1
  br i1 %9, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %8

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func(i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %out, i1* %loop_done) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = alloca i64, i32 2, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = getelementptr i64, i64* %0, i32 0
  store i64 %3, i64* %4, align 8
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = getelementptr i64, i64* %0, i32 1
  store i64 %7, i64* %8, align 8
  %9 = bitcast i64* %out to i8*
  %10 = bitcast i64* %0 to i8*
  call void @linear_probabilistic_count(i8* %9, i32 268435456, i8* %10, i32 16)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:16:17.083884 1 37424 3 8 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:16:17.084125 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:16:17.084153 1 37424 3 8 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:16:17.084158 1 37424 3 8 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Estimator
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	Empty	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:17.084199 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:17.084215 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:17.084228 I 37424 3 4953 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:17.084236 I 37424 3 4953 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:17.084256 I 37424 3 4953 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:17.084270 I 37424 3 4953 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:16:17.084280 I 37424 3 4953 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:17.084311 1 37424 3 4953 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.010432 ms
2025-04-19T00:16:17.084318 1 37424 3 4953 GpuInterrupt.cpp:26 Registered module 0x7392786d3c80 on device 0
2025-04-19T00:16:17.085962 1 37424 3 4953 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 1 ms
2025-04-19T00:16:17.085973 1 37424 3 4953 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:17.085982 1 37424 3 4953 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:17.086130 1 37424 3 4953 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:16:17.216459 I 37424 3 4953 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 132 ms
2025-04-19T00:16:17.216489 I 37424 3 4953 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 132 ms
2025-04-19T00:16:17.216505 I 37424 3 4953 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 132 ms
2025-04-19T00:16:17.216540 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 134 ms
2025-04-19T00:16:17.291450 1 37424 3 8 RelAlgExecutor.cpp:3926 CardinalityEstimationRequired, Use ndv_estimation: 49996, cardinality for estimated_groups_buffer_entry_guess: 99992
2025-04-19T00:16:17.291476 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 6532317496897202081
	Table/Col/Levels: ((db_id: 1, table_id: 17), 1, 0) ((db_id: 1, table_id: 17), 4, 0) ((db_id: 1, table_id: 17), 8, 0) ((db_id: 1, table_id: 17), 15, 0) ((db_id: 0, table_id: -28), 0, 1) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 1, table_id: 17, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -28, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 17, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 17, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 17, column_id: 4), rte: 0, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 17, column_id: 8), rte: 0, which_row: 3, varno: 2) , (SUM (ColumnVar (db_id: 1, table_id: 17, column_id: 15), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:17.291512 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:17.291531 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:17.292366 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:17.292381 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:17.292473 1 37424 3 8 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 2049558762663185812)
2025-04-19T00:16:17.292486 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:17.292548 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:16:17.292756 1 37424 3 4954 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 366, # entries stored in the payload buffer: 366, hash table size : 1464 Bytes
2025-04-19T00:16:17.293019 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:16:17.293035 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:16:17.293284 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:17.293297 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:16:17.293576 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !27

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !27
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %10 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %11 = call i32 @pos_start_impl(i32* %row_index_resume)
  %12 = call i32 @pos_step_impl()
  %13 = call i32 @group_buff_idx_impl()
  %14 = sext i32 %11 to i64
  %15 = getelementptr i64*, i64** %group_by_buffers, i32 %13
  %col_buffer = load i64*, i64** %15, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %16 = icmp slt i64 %14, %row_count
  br i1 %16, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %17 = sext i32 %12 to i64
  br label %.forbody

.forbody:                                         ; preds = %26, %.loop.preheader
  %pos = phi i64 [ %14, %.loop.preheader ], [ %27, %26 ]
  %18 = call i32 @row_func(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr)
  %19 = lshr i64 %pos, 15
  %20 = and i64 %19, 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %22 = call i1 @check_interrupt()
  %23 = select i1 %22, i32 10, i32 %18
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %24 = phi i32 [ %23, %.interrupt_check ], [ %18, %.forbody ]
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %.error_exit, label %26

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %24, i32* %error_code)
  ret void

26:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %27 = add i64 %pos, %17
  %28 = icmp slt i64 %27, %row_count
  br i1 %28, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %26
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_, %loop_done_false
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = ptrtoint i64* %join_hash_tables to i64
  %3 = sext i32 %1 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %2, i64 %3, i64 2451545, i64 2451910, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %6 = load i1, i1* %remaining_outer_cond_match, align 1
  %7 = and i1 %5, %6
  br i1 %7, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_
  store i1 true, i1* %loop_done, align 1
  %8 = call i32 @filter_func(i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %group_by_buff, i1* %loop_done, i8* %col_buf3)
  %9 = load i1, i1* %loop_done, align 1
  br i1 %9, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %8

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func(i8* %col_buf1, i64 %pos, i8* %col_buf2, i64* %group_by_buff, i1* %loop_done, i8* %col_buf3) #34 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = alloca i32, i32 2, align 4
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = getelementptr i32, i32* %0, i32 0
  store i32 %2, i32* %3, align 4
  %4 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %5 = trunc i64 %4 to i32
  %6 = getelementptr i32, i32* %0, i32 1
  store i32 %5, i32* %6, align 4
  %7 = bitcast i32* %0 to i64*
  %8 = call i64* @get_group_value(i64* %group_by_buff, i32 99992, i64* %7, i32 2, i32 4, i32 2)
  %9 = icmp ne i64* %8, null
  br i1 %9, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %10 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %11 = trunc i64 %10 to i32
  %12 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %11, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr = getelementptr i64, i64* %8, i64 0
  %13 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr, i64 %12, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %14 = trunc i64 %pos to i32
  %15 = sub i32 0, %14
  ret i32 %15
}

End of IR
2025-04-19T00:16:17.293795 1 37424 3 8 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:16:17.294076 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 2 ms
2025-04-19T00:16:17.294114 1 37424 3 8 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:16:17.294119 1 37424 3 8 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 2
	Target group by indices: 0,1,-1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 8 , 8
	col_to_slot_map=[[0], [1], [2]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 99992
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:17.294192 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:17.294217 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:17.294235 I 37424 3 4955 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:17.294243 I 37424 3 4955 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:17.294269 I 37424 3 4955 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:17.294293 I 37424 3 4955 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:16:17.294299 2 37424 3 4955 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(17),nest_level(0)) InputDescriptor(db_id(0), table_id(-28),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(17),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-28),nest_level(1)))) ra_exe_unit.scan_limit=0 num_rows=((287867 366)) frag_offsets=((0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=99992 device_id=0 outer_table_key=(db_id: 1, table_id: 17) scan_limit=0 start_rowid=0 num_tables=2
2025-04-19T00:16:17.294311 I 37424 3 4955 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:17.294359 1 37424 3 4955 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.015296 ms
2025-04-19T00:16:17.294368 1 37424 3 4955 GpuInterrupt.cpp:26 Registered module 0x7392780c74c0 on device 0
2025-04-19T00:16:17.294569 1 37424 3 4955 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:16:17.294576 1 37424 3 4955 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:17.294582 1 37424 3 4955 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:17.294875 1 37424 3 4955 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:16:17.295875 1 37424 3 4955 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:17.295894 1 37424 3 4955 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 1 ms
2025-04-19T00:16:17.295899 I 37424 3 4955 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 1 ms
2025-04-19T00:16:17.295939 1 37424 3 4955 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:16:17.295953 2 37424 3 4955 Execute.cpp:4139 results->rowCount()=49997
2025-04-19T00:16:17.296341 I 37424 3 4955 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 2 ms
2025-04-19T00:16:17.296357 I 37424 3 4955 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 2 ms
2025-04-19T00:16:17.296421 1 37424 3 8 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:16:17.296442 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 4 ms
2025-04-19T00:16:17.296463 1 37424 3 8 Execute.cpp:5202 Put estimated cardinality to the cache
2025-04-19T00:16:17.296477 I 37424 3 8 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 214 ms
2025-04-19T00:16:17.296488 3 37424 3 8 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-29, ...) exec_desc.getResult().getDataPtr()->rowCount()=49997
2025-04-19T00:16:17.296746 I 37424 3 8 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 214 ms
2025-04-19T00:16:17.296754 1 37424 3 8 RelAlgExecutor.cpp:945 Executing query step 6 / 6
2025-04-19T00:16:17.296762 I 37424 3 8 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:16:17.296797 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 1
2025-04-19T00:16:17.296807 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(customer.c_customer_id) , ["c_customer_id"]) input_col_descs_unique.size()=0 source_used_inputs.size()=1
2025-04-19T00:16:17.296830 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(customer.c_customer_id) , ["c_customer_id"]) input_col_descs_unique.size()=1 source_used_inputs.size()=8
2025-04-19T00:16:17.296843 3 37424 3 8 RelAlgExecutor.cpp:4896 input_descs=(InputDescriptor(db_id(0), table_id(-29),nest_level(0)) InputDescriptor(db_id(0), table_id(-30),nest_level(1)) InputDescriptor(db_id(1), table_id(5),nest_level(2)) InputDescriptor(db_id(0), table_id(-33),nest_level(3)))
2025-04-19T00:16:17.296851 3 37424 3 8 RelAlgExecutor.cpp:4897 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-29),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-29),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-29),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-30),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(2),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-33),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-33),nest_level(3))))
2025-04-19T00:16:17.296930 2 37424 3 8 FromTableReordering.cpp:508 Table reordering starting with nest level 2
2025-04-19T00:16:17.296937 2 37424 3 8 FromTableReordering.cpp:529 Table reordering picked start nest level 2 with cost 100
2025-04-19T00:16:17.296942 1 37424 3 8 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 2
2025-04-19T00:16:17.296947 1 37424 3 8 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 0
2025-04-19T00:16:17.296952 1 37424 3 8 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 1
2025-04-19T00:16:17.296956 1 37424 3 8 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 3
2025-04-19T00:16:17.296962 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 0
2025-04-19T00:16:17.296970 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 to nest level 1
2025-04-19T00:16:17.296987 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(store.s_state) RexLiteral(TN type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(store.s_store_sk) , agg_exps=, scalar_sources=RexInput(store.s_store_sk) , 0, , fields=["s_store_sk"], is_agg=0 to nest level 2
2025-04-19T00:16:17.297000 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , agg_exps=RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=2) RexRef(1) , 1, , fields=["ctr_store_sk", "$f1"], is_agg=1 to nest level 3
2025-04-19T00:16:17.297044 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 1
2025-04-19T00:16:17.297048 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(customer.c_customer_id) , ["c_customer_id"]) input_col_descs_unique.size()=0 source_used_inputs.size()=1
2025-04-19T00:16:17.297060 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(customer.c_customer_id) , ["c_customer_id"]) input_col_descs_unique.size()=1 source_used_inputs.size()=8
2025-04-19T00:16:17.297069 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 0
2025-04-19T00:16:17.297076 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1 to nest level 1
2025-04-19T00:16:17.297087 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(store.s_state) RexLiteral(TN type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(store.s_store_sk) , agg_exps=, scalar_sources=RexInput(store.s_store_sk) , 0, , fields=["s_store_sk"], is_agg=0 to nest level 2
2025-04-19T00:16:17.297097 1 37424 3 8 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(17, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) , type=(type=BOOLEAN, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , agg_exps=RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[1]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[2]) , scalar_sources=RexInput(store_returns.sr_customer_sk) RexInput(store_returns.sr_store_sk) RexInput(store_returns.sr_fee) RexRef(1) RexRef(2) , 2, , fields=["ctr_customer_sk", "ctr_store_sk", "ctr_total_return"], is_agg=1, in_index=2) RexRef(1) , 1, , fields=["ctr_store_sk", "$f1"], is_agg=1 to nest level 3
2025-04-19T00:16:17.297134 3 37424 3 8 RelAlgExecutor.cpp:1684 used_inputs.size() = 1
2025-04-19T00:16:17.297139 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(customer.c_customer_id) , ["c_customer_id"]) input_col_descs_unique.size()=0 source_used_inputs.size()=1
2025-04-19T00:16:17.297148 3 37424 3 8 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexInput(customer.c_customer_id) , ["c_customer_id"]) input_col_descs_unique.size()=1 source_used_inputs.size()=8
2025-04-19T00:16:17.297170 3 37424 3 8 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelProject(RexInput(customer.c_customer_id) , ["c_customer_id"])) = 1
2025-04-19T00:16:17.297221 2 37424 3 8 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5033272201295403410 (access path: 2|3|4|0|1|), outer join col info: 3620652483703970491 (access path: 11|)
2025-04-19T00:16:17.297245 2 37424 3 8 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 11598888961894161822 (access path: 6|7|), outer join col info: 11538310818991949051 (access path: 2|3|4|0|1|)
2025-04-19T00:16:17.297317 2 37424 3 8 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 14262484882435757503 (access path: 5|2|3|4|0|1|), outer join col info: 8308474836898124419 (access path: 2|3|4|0|1|)
2025-04-19T00:16:17.297338 I 37424 3 8 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:16:17.297348 3 37424 3 8 RelAlgExecutor.cpp:3692 body->getId()=23 body->toString()=RelProject(RexInput(customer.c_customer_id) , ["c_customer_id"]) it==leaf_results_.end()=true
2025-04-19T00:16:17.297360 1 37424 3 8 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:16:17.297366 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 14557775742875624826
	Table/Col/Levels: ((db_id: 1, table_id: 5), 1, 0) ((db_id: 1, table_id: 5), 2, 0) ((db_id: 0, table_id: -29), 0, 1) ((db_id: 0, table_id: -29), 1, 1) ((db_id: 0, table_id: -29), 2, 1) ((db_id: 0, table_id: -30), 0, 2) ((db_id: 0, table_id: -33), 0, 3) ((db_id: 0, table_id: -33), 1, 3) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 0, table_id: -29, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -29, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 0, table_id: -29, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -33, column_id: 0), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (> (CAST DOUBLE(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -29, column_id: 2), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) (* (ColumnVar (db_id: 0, table_id: -33, column_id: 1), rte: 3 DOUBLE, type: (type=DOUBLE, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1.200000) ) ) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:16:17.297395 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:17.297406 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:17.297432 1 37424 3 8 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:16:17.298109 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:17.298123 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:17.299763 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:17.302567 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 2 ms
2025-04-19T00:16:17.302766 1 37424 3 11222 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 99995, # entries stored in the payload buffer: 49997, hash table size : 399980 Bytes
2025-04-19T00:16:17.303026 1 37424 3 8 PerfectJoinHashTable.cpp:666 RHS/Inner hash join values detected to not be unique, falling back to One-to-Many hash layout.
2025-04-19T00:16:17.303075 1 37424 3 11223 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToMany, # hash entries: 99995, # entries stored in the payload buffer: 49997, hash table size : 999948 Bytes
2025-04-19T00:16:17.303670 1 37424 3 8 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 13064282805301700036)
2025-04-19T00:16:17.303683 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToMany in 3 ms
2025-04-19T00:16:17.303693 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:17.303730 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:17.303752 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:16:17.303824 1 37424 3 11224 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 12, # entries stored in the payload buffer: 12, hash table size : 48 Bytes
2025-04-19T00:16:17.303971 1 37424 3 8 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 15974074135519258280)
2025-04-19T00:16:17.303984 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:16:17.303989 2 37424 3 8 HashJoin.cpp:379 Built GPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 2451639 2451640 2451737 2451738 2451739 2451740 2451741 2451742 2451743 2451744 2451745 2451746 2451747 2451748 2451749 2451750 2451751 2451752 2451753 2451754 2451755 2451756 2451757 2451758 2451759 2451760 2451761 2451762 2451763 2451764 2451765 2451766 2451767 2451768 2451705 2451706 2451707 2451708 2451709 2451710 2451711 2451712 2451713 2451714 2451715 2451716 2451717 2451718 2451719 2451720 2451721 2451722 2451723 2451724 2451725 2451726 2451727 2451728 2451729 2451730 2451731 2451732 2451733 2451734 2451735 2451736 2451801 2451802 2451803 2451804 2451805 2451806 2451807 2451808 2451809 2451810 2451811 2451812 2451813 2451814 2451815 2451816 2451817 2451818 2451819 2451820 2451821 2451822 2451823 2451824 2451825 2451826 2451827 2451828 2451829 2451830 2451831 2451832 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 |
2025-04-19T00:16:17.304015 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:17.304048 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:17.304138 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:16:17.304209 1 37424 3 11225 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 10, # entries stored in the payload buffer: 6, hash table size : 40 Bytes
2025-04-19T00:16:17.304375 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:16:17.304383 2 37424 3 8 HashJoin.cpp:379 Built GPU hash table: | perfectOneToOne | payloads 0 1 * 2 * * 3 4 * 5 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 |
2025-04-19T00:16:17.304407 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 6 ms
2025-04-19T00:16:17.304532 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:17.304544 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 8 bytes
2025-04-19T00:16:17.304996 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %literals, i16 0
  %17 = bitcast i8* %16 to double*
  %literal_0 = load double, double* %17, align 8
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %18 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %20 = sext i32 %pos_start to i64
  %21 = icmp slt i64 %20, %row_count
  br i1 %21, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %22 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %31, %.loop.preheader
  %pos = phi i64 [ %20, %.loop.preheader ], [ %32, %31 ]
  %23 = call i32 @row_func_hoisted_literals(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i64* %join_hash_tables, i8* %row_func_mgr, double %literal_0)
  %24 = lshr i64 %pos, 15
  %25 = and i64 %24, 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %27 = call i1 @check_interrupt()
  %28 = select i1 %27, i32 10, i32 %23
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %29 = phi i32 [ %28, %.interrupt_check ], [ %23, %.for.body ]
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %.error_exit, label %31

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %29, i32* %error_code)
  ret void

31:                                               ; preds = %.error_check
  %32 = add nsw i64 %pos, %22
  %33 = icmp slt i64 %32, %row_count
  br i1 %33, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %31
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %34 = phi i64 [ %.pre.result, %._crit_edge ], [ %19, %.entry ]
  %35 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %36 = call i64 @agg_sum_shared(i64* %35, i64 %34)
  call void @sync_threadblock()
  %37 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %37, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i64* %join_hash_tables, i8* %row_func_mgr, double %arg_literal_0) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_head_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = load i64, i64* %join_hash_tables, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %0, i64 %3, i64 6, i64 100000, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %6 = add i64 %0, 399980
  %7 = call i64 @hash_join_idx_nullable(i64 %6, i64 %3, i64 6, i64 100000, i64 -2147483648)
  %8 = select i1 %5, i64 %7, i64 0
  %9 = add i64 %0, 799960
  %10 = inttoptr i64 %9 to i32*
  %11 = getelementptr i32, i32* %10, i64 %4
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %ub_iter_counter_ = getelementptr i32, i32* %11, i64 %ub_iter_counter_val_
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %8
  br i1 %have_more_inner_rows, label %singleton_true_, label %exit

ub_iter_advance_:                                 ; preds = %singleton_true_1, %loop_done_false, %singleton_true_
  %12 = add i64 %ub_iter_counter_val_, 1
  store i64 %12, i64* %ub_iter_counter_ptr_, align 8
  br label %ub_iter_head_

singleton_true_:                                  ; preds = %ub_iter_head_
  %13 = load i32, i32* %ub_iter_counter_, align 4
  %14 = sext i32 %13 to i64
  %15 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %14)
  %16 = trunc i64 %15 to i32
  %17 = getelementptr i64, i64* %join_hash_tables, i64 1
  %18 = load i64, i64* %17, align 8
  %19 = sext i32 %16 to i64
  %20 = call i64 @hash_join_idx_nullable(i64 %18, i64 %19, i64 1, i64 12, i64 -2147483648)
  %21 = icmp sge i64 %20, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %22 = load i1, i1* %remaining_outer_cond_match, align 1
  %23 = and i1 %21, %22
  br i1 %23, label %singleton_true_1, label %ub_iter_advance_

singleton_true_1:                                 ; preds = %singleton_true_
  %24 = getelementptr i64, i64* %join_hash_tables, i64 2
  %25 = load i64, i64* %24, align 8
  %26 = sext i32 %16 to i64
  %27 = call i64 @hash_join_idx_nullable(i64 %25, i64 %26, i64 1, i64 10, i64 -2147483648)
  %28 = icmp sge i64 %27, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %29 = load i1, i1* %remaining_outer_cond_match2, align 1
  %30 = and i1 %28, %29
  br i1 %30, label %loop_body, label %ub_iter_advance_

loop_body:                                        ; preds = %singleton_true_1
  store i1 true, i1* %loop_done, align 1
  %31 = call i32 @filter_func_hoisted_literals(i32* %ub_iter_counter_, i8* %col_buf4, i8* %col_buf7, i64 %27, i64* %out, i1* %loop_done, double %arg_literal_0)
  %32 = load i1, i1* %loop_done, align 1
  br i1 %32, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %31

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i32* %ub_iter_counter_, i8* %col_buf4, i8* %col_buf7, i64 %extra0, i64* %out, i1* %loop_done, double %arg_literal_0) #33 {
entry:
  %0 = load i32, i32* %ub_iter_counter_, align 4
  %1 = sext i32 %0 to i64
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 8, i64 %1)
  %3 = call double @cast_int64_t_to_double_scaled_nullable(i64 %2, i64 -9223372036854775808, double 0x10000000000000, double 1.000000e+02)
  %4 = call double @fixed_width_double_decode(i8* %col_buf7, i64 %extra0)
  %5 = call double @mul_double_nullable_lhs(double %4, double %arg_literal_0, double 0x10000000000000)
  %6 = call i8 @gt_double_nullable(double %3, double %5, double 0x10000000000000, i8 -128)
  %7 = icmp sgt i8 %6, 0
  %8 = and i1 true, %7
  br i1 %8, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %9 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:16:17.305369 1 37424 3 8 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:16:17.319410 1 37424 3 8 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.085905
2025-04-19T00:16:17.387521 1 37424 3 8 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.4561
2025-04-19T00:16:17.388282 1 37424 3 8 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.6908
2025-04-19T00:16:17.388384 1 37424 3 8 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 15.719
2025-04-19T00:16:17.404493 1 37424 3 8 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 224 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:16:17.404523 1 37424 3 8 NvidiaKernel.cpp:188 Generated GPU binary code size: 460704 bytes
2025-04-19T00:16:17.404997 1 37424 3 8 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:16:17.405251 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 107 ms
2025-04-19T00:16:17.405314 1 37424 3 8 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:16:17.405320 1 37424 3 8 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:17.405424 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:17.405456 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:17.405491 I 37424 3 11226 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:17.405503 I 37424 3 11226 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:17.405517 1 37424 3 11226 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,1,0,
2025-04-19T00:16:17.405531 1 37424 3 11226 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,1,0,
2025-04-19T00:16:17.405838 1 37424 3 11226 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,2,0,
2025-04-19T00:16:17.406416 I 37424 3 11226 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:17.406443 I 37424 3 11226 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:16:17.406455 I 37424 3 11226 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:17.406493 1 37424 3 11226 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.006144 ms
2025-04-19T00:16:17.406503 1 37424 3 11226 GpuInterrupt.cpp:26 Registered module 0x739278727a20 on device 0
2025-04-19T00:16:17.406625 1 37424 3 11226 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:16:17.406633 1 37424 3 11226 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:17.406638 1 37424 3 11226 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:17.406860 1 37424 3 11226 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:16:17.406946 1 37424 3 11226 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:17.406959 1 37424 3 11226 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:17.406964 I 37424 3 11226 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:16:17.406974 I 37424 3 11226 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:16:17.406992 I 37424 3 11226 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 1 ms
2025-04-19T00:16:17.407012 1 37424 3 8 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 18894
2025-04-19T00:16:17.407048 1 37424 3 8 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:16:17.407068 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 109 ms
2025-04-19T00:16:17.407091 1 37424 3 8 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 18894
2025-04-19T00:16:17.407135 1 37424 3 8 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:16:17.407141 1 37424 3 8 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 14557775742875624826
	Table/Col/Levels: ((db_id: 1, table_id: 5), 1, 0) ((db_id: 1, table_id: 5), 2, 0) ((db_id: 0, table_id: -29), 0, 1) ((db_id: 0, table_id: -29), 1, 1) ((db_id: 0, table_id: -29), 2, 1) ((db_id: 0, table_id: -30), 0, 2) ((db_id: 0, table_id: -33), 0, 3) ((db_id: 0, table_id: -33), 1, 3) 
	Join Quals: 		0 INNER(= (ColumnVar (db_id: 0, table_id: -29, column_id: 0), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		1 INNER(= (ColumnVar (db_id: 0, table_id: -30, column_id: 0), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -29, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 0, table_id: -29, column_id: 1), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 0, table_id: -33, column_id: 0), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (> (CAST DOUBLE(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -29, column_id: 2), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) (* (ColumnVar (db_id: 0, table_id: -33, column_id: 1), rte: 3 DOUBLE, type: (type=DOUBLE, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 1.200000) ) ) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 1, table_id: 5, column_id: 2), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=24, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 24), uses_flatbuffer=0)) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 1 
	  Algorithm: Streaming Top N
	  Limit: 100
	  Offset: 0
	Scan Limit: 18894
	Bump Allocator: False
2025-04-19T00:16:17.407166 I 37424 3 8 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:16:17.407179 I 37424 3 8 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:16:17.407905 I 37424 3 8 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:16:17.407920 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:17.409750 1 37424 3 8 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToMany(key: 13064282805301700036)
2025-04-19T00:16:17.409768 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:17.412565 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 2 ms
2025-04-19T00:16:17.412761 1 37424 3 11227 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToMany, # hash entries: 99995, # entries stored in the payload buffer: 49997, hash table size : 999948 Bytes
2025-04-19T00:16:17.413247 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToMany in 3 ms
2025-04-19T00:16:17.413263 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:17.413295 1 37424 3 8 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 15974074135519258280)
2025-04-19T00:16:17.413306 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:17.413322 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:16:17.413386 1 37424 3 11228 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 12, # entries stored in the payload buffer: 12, hash table size : 48 Bytes
2025-04-19T00:16:17.413549 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:16:17.413557 2 37424 3 8 HashJoin.cpp:379 Built GPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 2451639 2451640 2451737 2451738 2451739 2451740 2451741 2451742 2451743 2451744 2451745 2451746 2451747 2451748 2451749 2451750 2451751 2451752 2451753 2451754 2451755 2451756 2451757 2451758 2451759 2451760 2451761 2451762 2451763 2451764 2451765 2451766 2451767 2451768 2451705 2451706 2451707 2451708 2451709 2451710 2451711 2451712 2451713 2451714 2451715 2451716 2451717 2451718 2451719 2451720 2451721 2451722 2451723 2451724 2451725 2451726 2451727 2451728 2451729 2451730 2451731 2451732 2451733 2451734 2451735 2451736 2451801 2451802 2451803 2451804 2451805 2451806 2451807 2451808 2451809 2451810 2451811 2451812 2451813 2451814 2451815 2451816 2451817 2451818 2451819 2451820 2451821 2451822 2451823 2451824 2451825 2451826 2451827 2451828 2451829 2451830 2451831 2451832 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 |
2025-04-19T00:16:17.413583 1 37424 3 8 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:16:17.413616 I 37424 3 8 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:16:17.413713 I 37424 3 8 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:16:17.413781 1 37424 3 11229 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 10, # entries stored in the payload buffer: 6, hash table size : 40 Bytes
2025-04-19T00:16:17.413938 1 37424 3 8 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:16:17.413946 2 37424 3 8 HashJoin.cpp:379 Built GPU hash table: | perfectOneToOne | payloads 0 1 * 2 * * 3 4 * 5 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 |
2025-04-19T00:16:17.413976 I 37424 3 8 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 6 ms
2025-04-19T00:16:17.414201 1 37424 3 8 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:16:17.414213 1 37424 3 8 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 8 bytes
2025-04-19T00:16:17.414683 3 37424 3 8 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %literals, i16 0
  %17 = bitcast i8* %16 to double*
  %literal_0 = load double, double* %17, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %18 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %19 = call i32 @pos_start_impl(i32* %row_index_resume)
  %20 = call i32 @pos_step_impl()
  %21 = call i32 @group_buff_idx_impl()
  %22 = sext i32 %19 to i64
  %23 = getelementptr i64*, i64** %group_by_buffers, i32 %21
  %col_buffer = load i64*, i64** %23, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %24 = icmp slt i64 %22, %row_count
  br i1 %24, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %25 = sext i32 %20 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %22, %.loop.preheader ], [ %35, %filter_match ], [ %35, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %26 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i64* %join_hash_tables, i8* %row_func_mgr, double %literal_0)
  %27 = lshr i64 %pos, 15
  %28 = and i64 %27, 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %30 = call i1 @check_interrupt()
  %31 = select i1 %30, i32 10, i32 %26
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %32 = phi i32 [ %31, %.interrupt_check ], [ %26, %.forbody ]
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %.error_exit, label %34

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %32, i32* %error_code)
  ret void

34:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %35 = add i64 %pos, %25
  %36 = icmp slt i64 %35, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %37 = icmp ne i32 %crt_matched1, 0
  br i1 %37, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %34
  %38 = load i32, i32* %old_total_matched, align 4
  %39 = add i32 %38, %crt_matched1
  %limit_not_reached = icmp slt i32 %39, %18
  %40 = and i1 %36, %limit_not_reached
  br i1 %40, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %34
  br i1 %36, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i64* %join_hash_tables, i8* %row_func_mgr, double %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_head_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = load i64, i64* %join_hash_tables, align 8
  %1 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = call i64 @hash_join_idx_nullable(i64 %0, i64 %3, i64 6, i64 100000, i64 -2147483648)
  %5 = icmp sge i64 %4, 0
  %6 = add i64 %0, 399980
  %7 = call i64 @hash_join_idx_nullable(i64 %6, i64 %3, i64 6, i64 100000, i64 -2147483648)
  %8 = select i1 %5, i64 %7, i64 0
  %9 = add i64 %0, 799960
  %10 = inttoptr i64 %9 to i32*
  %11 = getelementptr i32, i32* %10, i64 %4
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %ub_iter_counter_ = getelementptr i32, i32* %11, i64 %ub_iter_counter_val_
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %8
  br i1 %have_more_inner_rows, label %singleton_true_, label %exit

ub_iter_advance_:                                 ; preds = %singleton_true_1, %loop_done_false, %singleton_true_
  %12 = add i64 %ub_iter_counter_val_, 1
  store i64 %12, i64* %ub_iter_counter_ptr_, align 8
  br label %ub_iter_head_

singleton_true_:                                  ; preds = %ub_iter_head_
  %13 = load i32, i32* %ub_iter_counter_, align 4
  %14 = sext i32 %13 to i64
  %15 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %14)
  %16 = trunc i64 %15 to i32
  %17 = getelementptr i64, i64* %join_hash_tables, i64 1
  %18 = load i64, i64* %17, align 8
  %19 = sext i32 %16 to i64
  %20 = call i64 @hash_join_idx_nullable(i64 %18, i64 %19, i64 1, i64 12, i64 -2147483648)
  %21 = icmp sge i64 %20, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %22 = load i1, i1* %remaining_outer_cond_match, align 1
  %23 = and i1 %21, %22
  br i1 %23, label %singleton_true_1, label %ub_iter_advance_

singleton_true_1:                                 ; preds = %singleton_true_
  %24 = getelementptr i64, i64* %join_hash_tables, i64 2
  %25 = load i64, i64* %24, align 8
  %26 = sext i32 %16 to i64
  %27 = call i64 @hash_join_idx_nullable(i64 %25, i64 %26, i64 1, i64 10, i64 -2147483648)
  %28 = icmp sge i64 %27, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %29 = load i1, i1* %remaining_outer_cond_match2, align 1
  %30 = and i1 %28, %29
  br i1 %30, label %loop_body, label %ub_iter_advance_

loop_body:                                        ; preds = %singleton_true_1
  store i1 true, i1* %loop_done, align 1
  %31 = call i32 @filter_func_hoisted_literals(i32* %ub_iter_counter_, i8* %col_buf4, i8* %col_buf7, i64 %27, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i1* %loop_done, double %arg_literal_0)
  %32 = load i1, i1* %loop_done, align 1
  br i1 %32, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %31

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i32* %ub_iter_counter_, i8* %col_buf4, i8* %col_buf7, i64 %extra0, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i1* %loop_done, double %arg_literal_0) #34 {
entry:
  %0 = load i32, i32* %ub_iter_counter_, align 4
  %1 = sext i32 %0 to i64
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 8, i64 %1)
  %3 = call double @cast_int64_t_to_double_scaled_nullable(i64 %2, i64 -9223372036854775808, double 0x10000000000000, double 1.000000e+02)
  %4 = call double @fixed_width_double_decode(i8* %col_buf7, i64 %extra0)
  %5 = call double @mul_double_nullable_lhs(double %4, double %arg_literal_0, double 0x10000000000000)
  %6 = call i8 @gt_double_nullable(double %3, double %5, double 0x10000000000000, i8 -128)
  %7 = icmp sgt i8 %6, 0
  %8 = and i1 true, %7
  br i1 %8, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %9 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %9, i32* %old_total_matched, align 4
  %10 = load i32, i32* %max_matched, align 4
  %11 = load i32, i32* %old_total_matched, align 4
  %12 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %10, i32 %11, i64 %pos, i32 2)
  %13 = icmp ne i64* %12, null
  br i1 %13, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %agg_col_ptr = getelementptr i64, i64* %12, i64 0
  call void @agg_id_shared(i64* %agg_col_ptr, i64 %pos)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %14 = trunc i64 %pos to i32
  %15 = sub i32 0, %14
  ret i32 %15
}

End of IR
2025-04-19T00:16:17.415096 1 37424 3 8 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:16:17.429982 1 37424 3 8 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.085346
2025-04-19T00:16:17.490573 1 37424 3 8 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.928
2025-04-19T00:16:17.491348 1 37424 3 8 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.1629
2025-04-19T00:16:17.491454 1 37424 3 8 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 15.1911
2025-04-19T00:16:17.506897 1 37424 3 8 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 272 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:16:17.506916 1 37424 3 8 NvidiaKernel.cpp:188 Generated GPU binary code size: 461664 bytes
2025-04-19T00:16:17.507386 1 37424 3 8 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:16:17.507671 I 37424 3 8 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 100 ms
2025-04-19T00:16:17.507733 1 37424 3 8 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:16:17.507739 1 37424 3 8 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 18894
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:16:17.507841 1 37424 3 8 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:16:17.507876 1 37424 3 8 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:16:17.507895 I 37424 3 11230 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:16:17.507905 I 37424 3 11230 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:16:17.508311 I 37424 3 11230 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:16:17.508328 2 37424 3 11230 ExecutionKernel.cpp:303 total_num_input_rows=150015
2025-04-19T00:16:17.508350 I 37424 3 11230 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:16:17.508357 2 37424 3 11230 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(5),nest_level(0)) InputDescriptor(db_id(0), table_id(-29),nest_level(1)) InputDescriptor(db_id(0), table_id(-30),nest_level(2)) InputDescriptor(db_id(0), table_id(-33),nest_level(3))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(1), table_id(5),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-29),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-29),nest_level(1))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-29),nest_level(1))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-30),nest_level(2))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-33),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-33),nest_level(3)))) ra_exe_unit.scan_limit=18894 num_rows=((100000 49997 12 6)) frag_offsets=((0 0 0 0)) query_exe_context->query_buffers_->num_rows_=600060 query_exe_context->query_mem_desc_.getEntryCount()=18894 device_id=0 outer_table_key=(db_id: 1, table_id: 5) scan_limit=18894 start_rowid=0 num_tables=4
2025-04-19T00:16:17.508376 I 37424 3 11230 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:16:17.508415 1 37424 3 11230 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.007168 ms
2025-04-19T00:16:17.508425 1 37424 3 11230 GpuInterrupt.cpp:26 Registered module 0x73927b189240 on device 0
2025-04-19T00:16:17.508631 1 37424 3 11230 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:16:17.508639 1 37424 3 11230 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:16:17.508644 1 37424 3 11230 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:16:17.508848 1 37424 3 11230 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:16:17.509128 1 37424 3 11230 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:16:17.509143 1 37424 3 11230 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:16:17.509148 I 37424 3 11230 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:16:17.509169 2 37424 3 11230 Execute.cpp:4139 results->rowCount()=18894
2025-04-19T00:16:17.509175 I 37424 3 11230 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 0 ms
2025-04-19T00:16:17.509193 I 37424 3 11230 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 1 ms
2025-04-19T00:16:17.509215 I 37424 3 8 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 102 ms
2025-04-19T00:16:17.509243 I 37424 3 8 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 211 ms
2025-04-19T00:16:17.520238 I 37424 3 8 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 223 ms
2025-04-19T00:16:17.520250 I 37424 3 8 measure.h:84 Timer end                      executeRelAlgSeq                    executeRelAlgSeq:  895 elapsed 1290 ms
2025-04-19T00:16:17.520293 1 37424 3 8 GpuInterrupt.cpp:227 Reset interrupt flag for CPU execution kernel on Executor 3
2025-04-19T00:16:17.520299 I 37424 3 8 measure.h:84 Timer end             executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612 elapsed 1292 ms
2025-04-19T00:16:17.520305 I 37424 3 8 measure.h:84 Timer end                    executeRelAlgQuery                  executeRelAlgQuery:  573 elapsed 1292 ms
2025-04-19T00:16:17.520312 I 37424 3 8 RelAlgExecutor.cpp:572 DEBUG_TIMER thread_id(8)
1292ms total duration for executeRelAlgQuery
  1292ms start(0ms) executeRelAlgQueryNoRetry RelAlgExecutor.cpp:613
    2ms start(0ms) Query pre-execution steps RelAlgExecutor.cpp:614
    1290ms start(2ms) executeRelAlgSeq RelAlgExecutor.cpp:896
      337ms start(2ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        336ms start(2ms) executeCompound RelAlgExecutor.cpp:2282
          336ms start(2ms) executeWorkUnit RelAlgExecutor.cpp:3652
            139ms start(2ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(3ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              138ms start(3ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                0ms start(3ms) initializeNVPTXBackend NativeCodegen.cpp:1546
                137ms start(4ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(4ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(4ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(8ms) generatePTX NativeCodegen.cpp:1507
                  113ms start(16ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(9)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                93ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(93ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(93ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(93ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(9)
            3ms start(236ms) collectAllDeviceResults Execute.cpp:2630
              3ms start(236ms) reduceMultiDeviceResults Execute.cpp:1528
                3ms start(236ms) reduceMultiDeviceResultSets Execute.cpp:1602
                  2ms start(236ms) generateNativeCPUCode NativeCodegen.cpp:441
                    1ms start(236ms) optimize_ir NativeCodegen.cpp:312
                    1ms start(238ms) create_execution_engine NativeCodegen.cpp:421
            97ms start(239ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(240ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              96ms start(240ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                96ms start(240ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(240ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(240ms) optimize_ir NativeCodegen.cpp:312
                  7ms start(244ms) generatePTX NativeCodegen.cpp:1507
                  84ms start(252ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(10)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                1ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  1ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(1ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(1ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(1ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(10)
            0ms start(339ms) resultsUnion Execute.cpp:1499
      5ms start(339ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        5ms start(339ms) executeCompound RelAlgExecutor.cpp:2282
          4ms start(339ms) executeWorkUnit RelAlgExecutor.cpp:3652
            1ms start(339ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(340ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(340ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(11)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(11)
            0ms start(341ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(341ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(341ms) reduceMultiDeviceResultSets Execute.cpp:1602
            1ms start(341ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(342ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(342ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(12)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(12)
            0ms start(344ms) resultsUnion Execute.cpp:1499
      402ms start(344ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        402ms start(344ms) executeCompound RelAlgExecutor.cpp:2282
          402ms start(344ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(344ms) compileWorkUnit NativeCodegen.cpp:2852
            97ms start(344ms) compileWorkUnit NativeCodegen.cpp:2852
              3ms start(345ms) getInstance HashJoin.cpp:297
                0ms start(345ms) synthesize_metadata InputMetadata.cpp:362
                3ms start(345ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(345ms) getOneColumnFragment ColumnFetcher.cpp:82
                    0ms start(345ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(13)
                      3ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        3ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          3ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(3ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(13)
              0ms start(349ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              92ms start(349ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                92ms start(349ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(349ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(349ms) optimize_ir NativeCodegen.cpp:312
                  7ms start(353ms) generatePTX NativeCodegen.cpp:1507
                  80ms start(360ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(14)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                2ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(2ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                128ms start(2ms) executePlanWithoutGroupBy Execute.cpp:3764
                  128ms start(2ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(14)
            0ms start(573ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(573ms) reduceMultiDeviceResults Execute.cpp:1528
            93ms start(646ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(647ms) getInstance HashJoin.cpp:297
                0ms start(647ms) synthesize_metadata InputMetadata.cpp:362
                0ms start(647ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(647ms) getOneColumnFragment ColumnFetcher.cpp:82
                    0ms start(647ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(15)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(15)
              0ms start(648ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              91ms start(648ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                91ms start(648ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(648ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  4ms start(648ms) optimize_ir NativeCodegen.cpp:312
                  7ms start(653ms) generatePTX NativeCodegen.cpp:1507
                  77ms start(661ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(16)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                6ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  1ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  3ms start(1ms) getRowSet QueryExecutionContext.cpp:161
                    3ms start(1ms) reduceMultiDeviceResults Execute.cpp:1528
                      3ms start(1ms) reduceMultiDeviceResultSets Execute.cpp:1602
                        2ms start(2ms) generateNativeCPUCode NativeCodegen.cpp:441
                          1ms start(2ms) optimize_ir NativeCodegen.cpp:312
                          1ms start(4ms) create_execution_engine NativeCodegen.cpp:421
              End thread(16)
            0ms start(746ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(746ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(746ms) reduceMultiDeviceResultSets Execute.cpp:1602
      102ms start(747ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        102ms start(747ms) executeCompound RelAlgExecutor.cpp:2282
          102ms start(747ms) executeWorkUnit RelAlgExecutor.cpp:3652
            93ms start(747ms) compileWorkUnit NativeCodegen.cpp:2852
              1ms start(747ms) synthesize_metadata InputMetadata.cpp:362
              0ms start(750ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              90ms start(750ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                90ms start(750ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(750ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(750ms) optimize_ir NativeCodegen.cpp:312
                  7ms start(754ms) generatePTX NativeCodegen.cpp:1507
                  78ms start(761ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(4949)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                3ms start(0ms) fetchChunks Execute.cpp:3380
                  3ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(3ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                4ms start(3ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(3ms) launchGpuCode QueryExecutionContext.cpp:227
                  3ms start(4ms) getRowSet QueryExecutionContext.cpp:161
                    3ms start(4ms) reduceMultiDeviceResults Execute.cpp:1528
                      3ms start(4ms) reduceMultiDeviceResultSets Execute.cpp:1602
                        3ms start(5ms) generateNativeCPUCode NativeCodegen.cpp:441
                          2ms start(5ms) optimize_ir NativeCodegen.cpp:312
                          0ms start(7ms) create_execution_engine NativeCodegen.cpp:421
              End thread(4949)
            0ms start(849ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(849ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(849ms) reduceMultiDeviceResultSets Execute.cpp:1602
      4ms start(849ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        4ms start(849ms) executeCompound RelAlgExecutor.cpp:2282
          4ms start(849ms) executeWorkUnit RelAlgExecutor.cpp:3652
            1ms start(849ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(850ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(850ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(4950)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(4950)
            0ms start(851ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(851ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(851ms) reduceMultiDeviceResultSets Execute.cpp:1602
            1ms start(851ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(852ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(853ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(4951)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(4951)
            0ms start(854ms) resultsUnion Execute.cpp:1499
      214ms start(854ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        214ms start(854ms) executeCompound RelAlgExecutor.cpp:2282
          214ms start(854ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(854ms) compileWorkUnit NativeCodegen.cpp:2852
            1ms start(854ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(855ms) getInstance HashJoin.cpp:297
                0ms start(855ms) synthesize_metadata InputMetadata.cpp:362
                0ms start(855ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(855ms) getOneColumnFragment ColumnFetcher.cpp:82
                    0ms start(855ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(4952)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(4952)
              0ms start(855ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(856ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(4953)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                132ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  132ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(4953)
            0ms start(988ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(988ms) reduceMultiDeviceResults Execute.cpp:1528
            2ms start(1063ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1064ms) getInstance HashJoin.cpp:297
                0ms start(1064ms) synthesize_metadata InputMetadata.cpp:362
                0ms start(1064ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1064ms) getOneColumnFragment ColumnFetcher.cpp:82
                    0ms start(1064ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(4954)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(4954)
              0ms start(1065ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(1065ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(4955)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                2ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  1ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(1ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(1ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(1ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(4955)
            0ms start(1068ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1068ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(1068ms) reduceMultiDeviceResultSets Execute.cpp:1602
      223ms start(1069ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        223ms start(1069ms) executeSort RelAlgExecutor.cpp:3227
          211ms start(1069ms) executeWorkUnit RelAlgExecutor.cpp:3652
            107ms start(1069ms) compileWorkUnit NativeCodegen.cpp:2852
              5ms start(1070ms) getInstance HashJoin.cpp:297
                1ms start(1070ms) synthesize_metadata InputMetadata.cpp:362
                3ms start(1072ms) reify PerfectJoinHashTable.cpp:400
                  2ms start(1072ms) getOneColumnFragment ColumnFetcher.cpp:82
                    2ms start(1072ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(11222)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(11222)
                    New thread(11223)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(11223)
              0ms start(1076ms) getInstance HashJoin.cpp:297
                0ms start(1076ms) synthesize_metadata InputMetadata.cpp:362
                0ms start(1076ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1076ms) getOneColumnFragment ColumnFetcher.cpp:82
                    0ms start(1076ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(11224)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(11224)
              0ms start(1076ms) getInstance HashJoin.cpp:297
                0ms start(1076ms) synthesize_metadata InputMetadata.cpp:362
                0ms start(1076ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1076ms) getOneColumnFragment ColumnFetcher.cpp:82
                    0ms start(1076ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(11225)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(11225)
              0ms start(1076ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              99ms start(1077ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                99ms start(1077ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1077ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  4ms start(1077ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1083ms) generatePTX NativeCodegen.cpp:1507
                  85ms start(1091ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(11226)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(11226)
            0ms start(1179ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1179ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(1179ms) reduceMultiDeviceResultSets Execute.cpp:1602
            100ms start(1179ms) compileWorkUnit NativeCodegen.cpp:2852
              5ms start(1180ms) getInstance HashJoin.cpp:297
                1ms start(1180ms) synthesize_metadata InputMetadata.cpp:362
                3ms start(1182ms) reify PerfectJoinHashTable.cpp:400
                  2ms start(1182ms) getOneColumnFragment ColumnFetcher.cpp:82
                    2ms start(1182ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(11227)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(11227)
              0ms start(1185ms) getInstance HashJoin.cpp:297
                0ms start(1185ms) synthesize_metadata InputMetadata.cpp:362
                0ms start(1185ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1185ms) getOneColumnFragment ColumnFetcher.cpp:82
                    0ms start(1185ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(11228)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(11228)
              0ms start(1185ms) getInstance HashJoin.cpp:297
                0ms start(1185ms) synthesize_metadata InputMetadata.cpp:362
                0ms start(1185ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(1185ms) getOneColumnFragment ColumnFetcher.cpp:82
                    0ms start(1185ms) ColumnarResults ColumnarResults.cpp:275
                    New thread(11229)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(11229)
              0ms start(1186ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              92ms start(1187ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                92ms start(1187ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1187ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  5ms start(1187ms) optimize_ir NativeCodegen.cpp:312
                  8ms start(1193ms) generatePTX NativeCodegen.cpp:1507
                  77ms start(1202ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(11230)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(1ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(1ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(1ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(11230)
            0ms start(1281ms) resultsUnion Execute.cpp:1499
          10ms start(1281ms) sort ResultSet.cpp:782
            0ms start(1281ms) initPermutationBuffer ResultSet.cpp:861
            0ms start(1281ms) createComparator ResultSet.h:881
            10ms start(1281ms) topPermutation ResultSet.cpp:1318
2025-04-19T00:16:17.520505 I 37424 3 8 DBHandler.cpp:6148 Cache size information {"query_resultset": 0 bytes, "hash_tables": 0 bytes, "chunk_metadata": 0 bytes, "query_plan_dag": 288 bytes, "compiled_GPU code": 3226656 bytes, "string_dictionary": 1574400 bytes}
2025-04-19T00:16:17.520511 1 37424 3 8 DBHandler.cpp:6221 jsonlog { "name": "CPU Memory Info", "TotalMB": 15841.9, "FreeMB": 9381.92, "ProcessMB": 373.711, "VirtualMB": 22068.1, "ProcessPlusSwapMB": 192.727, "ProcessSharedMB": 180.984, "FragmentationPercent": 42 }
2025-04-19T00:16:17.521229 I 37424 3 1 DBHandler.cpp:1303 DEBUG_TIMER thread_id(1)
2263ms total duration for sql_execute
2025-04-19T00:16:17.521270 1 37424 3 1 DBHandler.cpp:1349 Table Schema Locks:
2025-04-19T00:16:17.521276 1 37424 3 1 DBHandler.cpp:1350 Table Data Locks:
2025-04-19T00:16:17.521406 I 37424 3 1 DBHandler.cpp:1300 stdlog sql_execute 2 2263 heavyai admin 603-gDni {"query_str","client","nonce","execution_time_ms","total_time_ms"} {"with customer_total_return as (select sr_customer_sk as ctr_customer_sk ,sr_store_sk as ctr_store_sk ,sum(SR_FEE) as ctr_total_return from store_returns ,date_dim where sr_returned_date_sk = d_date_sk and d_year =2000 group by sr_customer_sk ,sr_store_sk) select  c_customer_id from customer_total_return ctr1 ,store ,customer where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2 from customer_total_return ctr2 where ctr1.ctr_store_sk = ctr2.ctr_store_sk) and s_store_sk = ctr1.ctr_store_sk and s_state = 'TN' and ctr1.ctr_customer_sk = c_customer_sk order by c_customer_id limit 100;","tcp:localhost:59132","","2234","2263"}
2025-04-19T00:16:17.521420 1 37424 3 1 DBHandler.cpp:1300 stacked_times sql_execute 2 total time 2264 ms
  parse_to_ra 127073809072128 - total time 942 ms
    processCalciteRequest 127073809072128 - total time 918 ms
      processImpl 127073809072128 - total time 917 ms
  execute_rel_alg 127074605989888 - total time 1309 ms
  convertRows 127073809072128 - total time 0 ms

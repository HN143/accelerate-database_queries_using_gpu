2025-04-19T00:18:17.048796 I 38957 0 0 CommandLineOptions.cpp:1887  Max import threads 32
2025-04-19T00:18:17.048881 I 38957 0 0 CommandLineOptions.cpp:1896  Min CPU buffer pool slab size (in bytes) 268435456
2025-04-19T00:18:17.048889 I 38957 0 0 CommandLineOptions.cpp:1898  Max CPU buffer pool slab size (in bytes) 4294967296
2025-04-19T00:18:17.048894 I 38957 0 0 CommandLineOptions.cpp:1900  Min GPU buffer pool slab size (in bytes) 268435456
2025-04-19T00:18:17.048898 I 38957 0 0 CommandLineOptions.cpp:1902  Max GPU buffer pool slab size (in bytes) 4294967296
2025-04-19T00:18:17.048902 I 38957 0 0 CommandLineOptions.cpp:1904  calcite JVM max memory (in MB) 1024
2025-04-19T00:18:17.048905 I 38957 0 0 CommandLineOptions.cpp:1905  HeavyDB Server Port 6274
2025-04-19T00:18:17.048910 I 38957 0 0 CommandLineOptions.cpp:1906  HeavyDB Calcite Port 6279
2025-04-19T00:18:17.048914 I 38957 0 0 CommandLineOptions.cpp:1907  Enable Calcite view optimize true
2025-04-19T00:18:17.048918 I 38957 0 0 CommandLineOptions.cpp:1909  Allow Local Auth Fallback: enabled
2025-04-19T00:18:17.048922 I 38957 0 0 CommandLineOptions.cpp:1911  ParallelTop min threshold: 100000
2025-04-19T00:18:17.048926 I 38957 0 0 CommandLineOptions.cpp:1912  ParallelTop watchdog max: 20000000
2025-04-19T00:18:17.048930 I 38957 0 0 CommandLineOptions.cpp:1914  Enable Data Recycler: enabled
2025-04-19T00:18:17.048934 I 38957 0 0 CommandLineOptions.cpp:1917  	 Use hashtable cache: enabled
2025-04-19T00:18:17.048938 I 38957 0 0 CommandLineOptions.cpp:1920  		 Total amount of bytes that hashtable cache keeps: 4096 MB.
2025-04-19T00:18:17.048941 I 38957 0 0 CommandLineOptions.cpp:1922  		 Per-hashtable size limit: 2048 MB.
2025-04-19T00:18:17.048946 I 38957 0 0 CommandLineOptions.cpp:1925  	 Use query resultset cache: enabled
2025-04-19T00:18:17.048949 I 38957 0 0 CommandLineOptions.cpp:1928  		 Total amount of bytes that query resultset cache keeps: 4096 MB.
2025-04-19T00:18:17.048953 I 38957 0 0 CommandLineOptions.cpp:1930  		 Per-query resultset size limit: 2048 MB.
2025-04-19T00:18:17.048957 I 38957 0 0 CommandLineOptions.cpp:1933  		 Use auto query resultset caching: disabled
2025-04-19T00:18:17.048960 I 38957 0 0 CommandLineOptions.cpp:1940  		 Use query step skipping: enabled
2025-04-19T00:18:17.048964 I 38957 0 0 CommandLineOptions.cpp:1942  	 Use chunk metadata cache: enabled
2025-04-19T00:18:17.048968 I 38957 0 0 CommandLineOptions.cpp:1945 Executor Resource Manager: enabled
2025-04-19T00:18:17.048972 I 38957 0 0 CommandLineOptions.cpp:1948 	CPU kernel concurrency: enabled
2025-04-19T00:18:17.048976 I 38957 0 0 CommandLineOptions.cpp:1951 	CPU-GPU kernel concurrency: enabled
2025-04-19T00:18:17.048980 I 38957 0 0 CommandLineOptions.cpp:1958 	CPU result set reserved ratio of CPU buffer pool size: 0.8
2025-04-19T00:18:17.048986 I 38957 0 0 CommandLineOptions.cpp:1961 	Per-query max CPU threads ratio: 0.9
2025-04-19T00:18:17.048991 I 38957 0 0 CommandLineOptions.cpp:1963 	Per-query max CPU result memory ratio of allocated total: 0.8
2025-04-19T00:18:17.048996 I 38957 0 0 CommandLineOptions.cpp:1965 	Allow concurrent CPU thread/slot oversubscription: disabled
2025-04-19T00:18:17.048998 I 38957 0 0 CommandLineOptions.cpp:1969 	Allow concurrent CPU result memory oversubscription: disabled
2025-04-19T00:18:17.049002 I 38957 0 0 CommandLineOptions.cpp:1974 	Per-query Max available resource utilization ratio: 0.8
2025-04-19T00:18:17.049007 I 38957 0 0 CommandLineOptions.cpp:1985 Runtime UDF/UDTF Registration Policy:  ALLOWED for superusers only
2025-04-19T00:18:17.049018 1 38957 0 0 CommandLineOptions.cpp:1237 taking [/var/lib/heavyai/storage/heavydb_pid.lck] read+write lock until process exit
2025-04-19T00:18:17.049075 I 38957 0 0 CommandLineOptions.cpp:1318 HeavyDB started with data directory at '/var/lib/heavyai/storage'
2025-04-19T00:18:17.049081 I 38957 0 0 CommandLineOptions.cpp:1323  Server read-only mode is false (--read-only)
2025-04-19T00:18:17.049085 I 38957 0 0 CommandLineOptions.cpp:1340  Threading layer: TBB
2025-04-19T00:18:17.049089 I 38957 0 0 CommandLineOptions.cpp:1344  Watchdog is set to true
2025-04-19T00:18:17.049098 I 38957 0 0 CommandLineOptions.cpp:1345  Dynamic Watchdog is set to false
2025-04-19T00:18:17.049102 I 38957 0 0 CommandLineOptions.cpp:1349  Runtime query interrupt is set to true
2025-04-19T00:18:17.049106 I 38957 0 0 CommandLineOptions.cpp:1351  A frequency of checking pending query interrupt request is set to 1000 (in ms.)
2025-04-19T00:18:17.049110 I 38957 0 0 CommandLineOptions.cpp:1353  A frequency of checking running query interrupt request is set to 0.1 (0.0 ~ 1.0)
2025-04-19T00:18:17.049115 I 38957 0 0 CommandLineOptions.cpp:1356  Non-kernel time query interrupt is set to true
2025-04-19T00:18:17.049119 I 38957 0 0 CommandLineOptions.cpp:1359  Debug Timer is set to true
2025-04-19T00:18:17.049123 I 38957 0 0 CommandLineOptions.cpp:1360  LogUserId is set to false
2025-04-19T00:18:17.049127 I 38957 0 0 CommandLineOptions.cpp:1361  Maximum idle session duration 60
2025-04-19T00:18:17.049129 I 38957 0 0 CommandLineOptions.cpp:1362  Maximum active session duration 43200
2025-04-19T00:18:17.049134 I 38957 0 0 CommandLineOptions.cpp:1363  Maximum number of sessions -1
2025-04-19T00:18:17.049138 I 38957 0 0 CommandLineOptions.cpp:1365 Legacy delimited import is set to true
2025-04-19T00:18:17.049142 I 38957 0 0 CommandLineOptions.cpp:1367 Legacy parquet import is set to false
2025-04-19T00:18:17.049146 I 38957 0 0 CommandLineOptions.cpp:1369 FSI regex parsed import is set to true
2025-04-19T00:18:17.049149 I 38957 0 0 CommandLineOptions.cpp:1371 Allowed import paths is set to ["/"]
2025-04-19T00:18:17.049153 I 38957 0 0 CommandLineOptions.cpp:1372 Allowed export paths is set to ["/"]
2025-04-19T00:18:17.049182 I 38957 0 0 DdlUtils.cpp:874 Parsed allowed-import-paths: (/var/lib/heavyai/storage/import /)
2025-04-19T00:18:17.049191 I 38957 0 0 DdlUtils.cpp:874 Parsed allowed-export-paths: (/var/lib/heavyai/storage/export /)
2025-04-19T00:18:17.049206 I 38957 0 0 CommandLineOptions.cpp:1394 FSI has been enabled as a side effect of enabling non-legacy import.
2025-04-19T00:18:17.049212 I 38957 0 0 CommandLineOptions.cpp:1517 Disk cache enabled for foreign tables only
2025-04-19T00:18:17.049217 I 38957 0 0 CommandLineOptions.cpp:1564 Vacuum Min Selectivity: 0.1
2025-04-19T00:18:17.049222 I 38957 0 0 CommandLineOptions.cpp:1566 Enable system tables is set to true
2025-04-19T00:18:17.049226 I 38957 0 0 CommandLineOptions.cpp:1575 Enable FSI is set to true
2025-04-19T00:18:17.049230 I 38957 0 0 CommandLineOptions.cpp:1576 Enable logs system tables set to false
2025-04-19T00:18:17.049234 I 38957 0 0 CommandLineOptions.cpp:1583 Maximum number of logs system table files set to 100
2025-04-19T00:18:17.049239 I 38957 0 0 HeavyDB.cpp:388 HeavyDB starting up
2025-04-19T00:18:17.049261 I 38957 0 0 HeavyDB.cpp:392 Initializing TBB with 32 threads.
2025-04-19T00:18:17.049831 I 38957 0 0 HeavyDB.cpp:397 TBB max concurrency: 32 threads.
2025-04-19T00:18:17.050936 1 38957 0 0 HeavyDB.cpp:327 heartbeat thread starting
2025-04-19T00:18:17.051033 I 38957 0 0 DBHandler.cpp:244 HeavyDB Server 7.1.0-20231018-69d8a78a07
2025-04-19T00:18:17.112358 I 38957 0 0 CudaMgr.cpp:515 Using 1 Gpus.
2025-04-19T00:18:17.112387 1 38957 0 0 CudaMgr.cpp:517 Device: 0
2025-04-19T00:18:17.112392 1 38957 0 0 CudaMgr.cpp:518 UUID: 8c8b4619-0dfc-3e11-b9db-9f2b8cd9a4b5
2025-04-19T00:18:17.112398 1 38957 0 0 CudaMgr.cpp:519 Clock (khz): 1500000
2025-04-19T00:18:17.112402 1 38957 0 0 CudaMgr.cpp:520 Compute Major: 8
2025-04-19T00:18:17.112406 1 38957 0 0 CudaMgr.cpp:521 Compute Minor: 6
2025-04-19T00:18:17.112410 1 38957 0 0 CudaMgr.cpp:522 PCI bus id: 1
2025-04-19T00:18:17.112414 1 38957 0 0 CudaMgr.cpp:523 PCI deviceId id: 0
2025-04-19T00:18:17.112418 1 38957 0 0 CudaMgr.cpp:524 Per device global memory: 3.79565 GB
2025-04-19T00:18:17.112426 1 38957 0 0 CudaMgr.cpp:526 Memory clock (khz): 6001000
2025-04-19T00:18:17.112430 1 38957 0 0 CudaMgr.cpp:527 Memory bandwidth: 96.016 GB/sec
2025-04-19T00:18:17.112435 1 38957 0 0 CudaMgr.cpp:530 Constant Memory: 65536
2025-04-19T00:18:17.112439 1 38957 0 0 CudaMgr.cpp:531 Shared memory per multiprocessor: 102400
2025-04-19T00:18:17.112449 1 38957 0 0 CudaMgr.cpp:533 Shared memory per block: 49152
2025-04-19T00:18:17.112454 1 38957 0 0 CudaMgr.cpp:534 Number of MPs: 16
2025-04-19T00:18:17.112458 1 38957 0 0 CudaMgr.cpp:535 Warp Size: 32
2025-04-19T00:18:17.112461 1 38957 0 0 CudaMgr.cpp:536 Max threads per block: 1024
2025-04-19T00:18:17.112466 1 38957 0 0 CudaMgr.cpp:537 Max registers per block: 65536
2025-04-19T00:18:17.112469 1 38957 0 0 CudaMgr.cpp:538 Max register per MP: 65536
2025-04-19T00:18:17.112473 1 38957 0 0 CudaMgr.cpp:539 Memory bus width in bits: 128
2025-04-19T00:18:17.112477 I 38957 0 0 CudaMgr.cpp:68 Warming up the GPU JIT Compiler... (this may take several seconds)
2025-04-19T00:18:17.113432 1 38957 0 0 NvidiaKernel.cpp:91 CUDA JIT time to create link: 0.940203
2025-04-19T00:18:17.206759 1 38957 0 0 NvidiaKernel.cpp:100 CUDA JIT time to add RT fatbinary: 16.6099
2025-04-19T00:18:17.207531 1 38957 0 0 NvidiaKernel.cpp:109 CUDA JIT time to add GPU table functions library: 16.8642
2025-04-19T00:18:17.210138 I 38957 0 0 CudaMgr.cpp:71 GPU JIT Compiler initialized.
2025-04-19T00:18:17.210169 I 38957 0 0 ArrowForeignStorage.cpp:880 CSV backed temporary tables has been activated. Create table `with (storage_type='CSV:path/to/file.csv');`
2025-04-19T00:18:17.210175 I 38957 0 0 ArrowForeignStorage.cpp:1058 CSV backed temporary tables has been activated. Create table `with (storage_type='CSV:path/to/file.csv');`
2025-04-19T00:18:17.210287 I 38957 0 0 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 0ms Epoch: 0 files read: 0 table location: '/var/lib/heavyai/storage/disk_cache'
2025-04-19T00:18:17.210294 3 38957 0 0 CachingFileMgr.cpp:97 Number of Headers in Vector: 0
2025-04-19T00:18:17.210315 1 38957 0 0 DataMgr.cpp:260 Detected 15841.9M of total system memory.
2025-04-19T00:18:17.210321 I 38957 0 0 DataMgr.cpp:269 Min CPU Slab Size is 256MB
2025-04-19T00:18:17.210326 I 38957 0 0 DataMgr.cpp:270 Max CPU Slab Size is 4096MB
2025-04-19T00:18:17.210330 I 38957 0 0 DataMgr.cpp:271 Max memory pool size for CPU is 12673.5MB
2025-04-19T00:18:17.210335 I 38957 0 0 DataMgr.cpp:293 Reserved GPU memory is 384MB includes render buffer allocation
2025-04-19T00:18:17.210344 I 38957 0 0 DataMgr.cpp:312 Min GPU Slab size for GPU 0 is 256MB
2025-04-19T00:18:17.210349 I 38957 0 0 DataMgr.cpp:314 Max GPU Slab size for GPU 0 is 3502.75MB
2025-04-19T00:18:17.210353 I 38957 0 0 DataMgr.cpp:316 Max memory pool size for GPU 0 is 3502.75MB
2025-04-19T00:18:17.210416 I 38957 0 0 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 0ms Epoch: 0 files read: 0 table location: '/var/lib/heavyai/storage/data/table_0_0'
2025-04-19T00:18:17.210421 3 38957 0 0 FileMgr.cpp:280 Number of Headers in Vector: 0
2025-04-19T00:18:17.210443 I 38957 0 0 DBHandler.cpp:255 Initializing Executor Resource Manager
2025-04-19T00:18:17.210447 I 38957 0 0 DBHandler.cpp:263 	Setting Executor resource pool avaiable CPU threads/slots to default value of 32.
2025-04-19T00:18:17.210463 I 38957 0 0 DBHandler.cpp:274 	Setting max per-query CPU threads to ratio of 0.9 of 32 available threads, or 28 threads.
2025-04-19T00:18:17.210472 I 38957 0 0 DBHandler.cpp:325 	Setting Executor resource pool reserved space for CPU buffer pool memory to 11.75 GB.
2025-04-19T00:18:17.210488 I 38957 0 0 DBHandler.cpp:329 	Setting Executor resource pool reserved space for GPU buffer pool memory to 3.24 GB.
2025-04-19T00:18:17.210492 I 38957 0 0 DBHandler.cpp:333 	Setting Executor resource pool reserved space for CPU result memory to 4.0 GB.
2025-04-19T00:18:17.210567 I 38957 0 0 Calcite.cpp:373 Creating Calcite Handler,  Calcite Port is 6279 base data dir is /var/lib/heavyai/storage
2025-04-19T00:18:17.210573 I 38957 0 0 Calcite.cpp:281 Running Calcite server as a daemon
2025-04-19T00:18:17.823023 I 38957 0 0 Calcite.cpp:321 Calcite server start took 600 ms 
2025-04-19T00:18:17.823067 I 38957 0 0 Calcite.cpp:322 ping took 7 ms 
2025-04-19T00:18:17.826916 1 38957 0 0 Calcite.cpp:634 [{"name":"Truncate__","annotations":[{},{},{"uses_manager":"false"}],"ret":"float","args":["float","i32"]},{"name":"area_triangle","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"ST_AsBinary__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"box_contains_point","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double","double"]},{"name":"Round__","annotations":[{},{},{"uses_manager":"false"}],"ret":"float","args":["float","i32"]},{"name":"array_first_half__f64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>"]},{"name":"array_equal__textdict","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<TextEncodingDict>","Array<TextEncodingDict>"]},{"name":"ST_YMax","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_AsWkt__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"ST_Intersects_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_point_point_squared","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"centroid_add_polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32","i32","i32","double*","double*","double*","double*","i64*","double*"]},{"name":"h3ToGeoPacked","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_AsBinary__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"perimeter_multipolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32","i1"]},{"name":"ST_Distance_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_downAp7","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Centroid_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32*","i32","i32*","i32","i32","i32","i32","double*"]},{"name":"array_equal__f32","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<float>","Array<float>"]},{"name":"ST_AsWkt__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"convert_meters_to_pixel_height","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i8*","i64","i32","i32","i32","double","double","i32","double"]},{"name":"_hex2dToGeo","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32","i32","double*"]},{"name":"tol_eq","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"ST_YMin_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ST_Centroid_Polygon","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32*","i32","i32","i32","i32","double*"]},{"name":"_square","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Log10","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_YMax_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ct_device_selection_udf_gpu__gpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_DWithin_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"round_to_digit","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"_ijkScale","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32"]},{"name":"_rotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_append__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>","double"]},{"name":"array_append__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>","i8"]},{"name":"array_append__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>","i16"]},{"name":"_geoToFaceIjk","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32*"]},{"name":"array_append__4","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>","float"]},{"name":"x_and_y_are_dependent","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32","i32"]},{"name":"ST_XMin_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"raw_array_as_scalar_same_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64*","i64"]},{"name":"ST_X_Point","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_Distance_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_append","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>","i64"]},{"name":"ST_Length_LineString_Geodesic","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"point_in_polygon_winding_number","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","i64","i64","i32","i32","i32"]},{"name":"array_first_half__t32","annotations":[{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"ST_cContains_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_cIntersects_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"udf_identity","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone"]},{"name":"_v2dMag","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double*"]},{"name":"_neighbor","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32"]},{"name":"ST_cIntersects_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"strtok_to_array__1","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["TextEncodingDict","TextEncodingNone"]},{"name":"ST_Distance_MultiLineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsText__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"reg_hex_horiz_pixel_bin_y","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"reg_hex_horiz_pixel_bin_x","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"compressed_coord","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i8*","i32"]},{"name":"ST_Distance_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"area_polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ct_device_selection_udf_both__gpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Log__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"text_encoding_dict_concat","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingNone"]},{"name":"ST_XMax","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_DWithin_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_ijkToHex2d","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","double*"]},{"name":"ST_Perimeter_MultiPolygon_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiPoint_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Contains_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsWkb__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"centroid_add_triangle","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double","double*","double*"]},{"name":"distance_point_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","i1","double"]},{"name":"ST_Contains_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ct_sleep_us__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i64"]},{"name":"array_second_half__i64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>"]},{"name":"h3ToLat","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["i64"]},{"name":"ST_Distance_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_LineString_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_second_half_impl","annotations":[{},{"uses_manager":"false"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"ST_AsWkb__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"_h3ToGeo","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","double*"]},{"name":"array_second_half__i16","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>"]},{"name":"_upAp7r","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"Point_Overlaps_Box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double","double"]},{"name":"point_dwithin_box","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","double*","i64","i32","i32","double"]},{"name":"Floor__2","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_Distance_Point_ClosedLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Floor__3","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Intersects_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiPolygon_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Floor__1","annotations":[{},{"uses_manager":"false"}],"ret":"i16","args":["i16"]},{"name":"ST_Intersects_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsBinary__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"array_append__","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>","i32"]},{"name":"_upAp7","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_AsText__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"_faceIjkToH3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i32*","i32"]},{"name":"Sinh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"barray_append","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>","i1"]},{"name":"ST_XMin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_DWithin_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_MultiPolygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsBinary__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"ST_Intersects_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_MultiLineString_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Perimeter_Polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_DWithin_Point_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"geoToH3","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["double","double","i32"]},{"name":"ST_Distance_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"array_first_half__b8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>"]},{"name":"max_distance_point_line","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"HeavyDB_Geo_PolyBoundsPtr","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["double*","i64"]},{"name":"array_second_half__b8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>"]},{"name":"_pointSquareDist","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","double*"]},{"name":"ST_DWithin_LineString_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_unitIjkToDigit","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"array_equal__i8","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i8>","Array<i8>"]},{"name":"ST_Contains_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Sin","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Distance_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_Point_MultiPoint_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"array_second_half__i32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>"]},{"name":"ST_Distance_LineString_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_point_point","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"_downAp7r","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Contains_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"tol_ge","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"ST_Distance_MultiPoint_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Contains_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_XMax_Bounds","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","i64","i32","i32"]},{"name":"ST_Intersects_MultiPolygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ln__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_Contains_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"text_encoding_none_concat","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone","TextEncodingNone"]},{"name":"distance_point_multilinestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkt__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"convert_meters_to_merc_pixel_width","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","i32","double"]},{"name":"ST_AsWkt__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"ST_Intersects_Polygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Length_LineString","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"ST_AsText__GeoPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPolygon"]},{"name":"ST_Perimeter_Polygon_Geodesic","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Contains_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"tarray_append","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>","TextEncodingDict"]},{"name":"ST_Area_Polygon","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"is_inf","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["double"]},{"name":"ST_AsText__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"ct_device_selection_udf_both__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_first_half__f32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>"]},{"name":"box_dwithin_box","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","i32","double*","i64","i32","i32","double"]},{"name":"centroid_add_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","i32","i1","double*","double*","i64*","double*"]},{"name":"Log10__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_Intersects_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"Asin","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Distance_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"rect_pixel_bin_x","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","i32"]},{"name":"rect_pixel_bin_y","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","i32"]},{"name":"ST_Intersects_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"is_inf__","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["float"]},{"name":"is_point_in_view","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","double","double","double","double"]},{"name":"is_point_size_in_merc_view","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double"]},{"name":"array_equal__f64","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<double>","Array<double>"]},{"name":"ST_Centroid_MultiPoint","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"_ijkRotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"ST_Distance_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_LineString_Linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_Point_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Contains_MultiPolygon_Point_Impl","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_AsText__GeoMultiPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPoint"]},{"name":"ST_Distance_MultiPoint_Point_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"raw_array_as_array_diff_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["i64*","i64"]},{"name":"_geoToHex2d","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32","i32*","double*"]},{"name":"_adjustOverageClassII","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32*","i32","i32","i32"]},{"name":"degrees","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_second_half__t32","annotations":[{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"approx_distance_in_meters","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["float","float","float","float"]},{"name":"raw_array_as_scalar_diff_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i64*","i64"]},{"name":"constrainLng","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_Length_MultiLineString","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32"]},{"name":"array_first_half__i32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i32>","args":["Array<i32>"]},{"name":"ST_Intersects_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_DWithin_LineString_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_posAngleRads","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Tanh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_equal__i16","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i16>","Array<i16>"]},{"name":"_isBaseCellPentagon","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_MaxDistance_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"_h3ToFaceIjk","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","i32*"]},{"name":"Log","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"is_nan","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["double"]},{"name":"ST_Perimeter_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"tol_zero_template","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i64","i64"]},{"name":"centroid_add_ring","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","i32","i32","double","double*","double*","double*","double*","i64*","double*"]},{"name":"_ijkSub","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32*","i32*"]},{"name":"ST_YMin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"array_second_half__f64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<double>","args":["Array<double>"]},{"name":"_h3ToFaceIjkWithInitializedFijk","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i64","i32*"]},{"name":"Ceil","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"polygon_contains_point","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","double","double","i32","i32","i32"]},{"name":"ST_Distance_MultiLineString_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Distance_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Centroid_LineString","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"ST_Distance_Point_LineString_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"distance_in_meters__","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["float","float","float","float"]},{"name":"Floor__","annotations":[{},{"uses_manager":"false"}],"ret":"float","args":["float"]},{"name":"box_overlaps_box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double*","i64"]},{"name":"decompress_coord","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i32"]},{"name":"isResClassIII","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"array_first_half__i64","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["Array<i64>"]},{"name":"array_append_impl","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>","float"]},{"name":"array_first_half_impl","annotations":[{},{"uses_manager":"false"}],"ret":"Array<TextEncodingDict>","args":["Array<TextEncodingDict>"]},{"name":"max_distance_point_linestring","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","i1"]},{"name":"ST_AsBinary__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"ST_Distance_MultiPolygon_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"tol_zero","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double"]},{"name":"ST_AsWkb__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"rect_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"barray_append_impl","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<bool>","args":["Array<bool>","i8"]},{"name":"ST_Distance_Polygon_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_rotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"tol","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["i32","i32"]},{"name":"_geoAzDistanceRads","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","double","double","double*"]},{"name":"_ijkAdd","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32*","i32*"]},{"name":"ST_DWithin_Point_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"convert_meters_to_pixel_width","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i8*","i64","i32","i32","i32","double","double","i32","double"]},{"name":"reg_hex_vert_pixel_bin_y","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"reg_hex_vert_pixel_bin_x","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"ST_Contains_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"_faceIjkToBaseCellCCWrot60","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"ST_Distance_MultiPoint_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"power","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double"]},{"name":"ST_AsWkb__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"area_ring","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"reg_hex_vert_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"text_encoding_dict_concat3","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingDict"]},{"name":"Atanh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"length_linestring","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i32","i32","i32","i1","i1"]},{"name":"Cos","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Sqrt","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"tol_le","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double"]},{"name":"Cot","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_DWithin_Point_Point_Geodesic","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_h3LeadingNonZeroDigit","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i64"]},{"name":"box_contains_box","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i64","double*","i64"]},{"name":"ST_DWithin_LineString_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"line_intersects_line","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double","double","double"]},{"name":"_faceIjkToBaseCell","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32*"]},{"name":"compression_unit_size","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_Distance_MultiPoint_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Area_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i32","i8*","i32","i8*","i32","i32","i32","i32"]},{"name":"ST_Intersects_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"centroid_add_segment","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double*","double*"]},{"name":"radsToDegs","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"text_encoding_dict_concat2","annotations":[{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingNone","TextEncodingDict"]},{"name":"Tan","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"_h3RotatePent60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Distance_MultiPoint_MultiPolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_faceIjkToGeo","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32","double*"]},{"name":"ln","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"_h3RotatePent60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"array_second_half__i8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>"]},{"name":"array_first_half__i8","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i8>","args":["Array<i8>"]},{"name":"ST_Contains_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"rect_pixel_bin","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"float","args":["double","double","double","i32","i32"]},{"name":"ST_Distance_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkb__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"distance_point_multipolygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_MultiPolygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ct_device_selection_udf_any","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"ST_AsText__GeoMultiPolygon__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiPolygon"]},{"name":"ST_AsWkt__GeoLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoLineString"]},{"name":"_geoToVec3d","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","double*"]},{"name":"Ceil__2","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Ceil__1","annotations":[{},{"uses_manager":"false"}],"ret":"i16","args":["i16"]},{"name":"array_second_half__f32","annotations":[{},{"uses_manager":"false"}],"ret":"Array<float>","args":["Array<float>"]},{"name":"Ceil__3","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"ST_Distance_Point_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_AsWkb__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"distance_point_line","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","double"]},{"name":"ST_Centroid_Point","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"void","args":["i8*","i32","i32","i32","i32","double*"]},{"name":"_hex2dToCoordIJK","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["double*","i32*"]},{"name":"ST_Distance_MultiPolygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32*","i64","i32*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"Round2_to_digit","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"ST_DWithin_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"ST_Intersects_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"on_segment","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double"]},{"name":"h3ToLon","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["i64"]},{"name":"ST_AsWkt__GeoPoint__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoPoint"]},{"name":"distance_in_meters","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double"]},{"name":"_baseCellIsCwOffset","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32","i32"]},{"name":"ST_DWithin_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32","double"]},{"name":"text_encoding_none_length","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["TextEncodingNone"]},{"name":"_setIJK","annotations":[{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i32*","i32","i32","i32"]},{"name":"Atan2","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double"]},{"name":"Acos","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_equal__i64","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i64>","Array<i64>"]},{"name":"ST_Y_Point","annotations":[{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i32","i32","i32"]},{"name":"_ijkMatches","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32*","i32*"]},{"name":"Cosh","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"distance_point_polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"is_nan__","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["float"]},{"name":"ST_Contains_Polygon_LineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Intersects_Point_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"text_encoding_none_copy","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["TextEncodingNone"]},{"name":"Truncate","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"text_encoding_dict_copy_from","annotations":[{},{},{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict","TextEncodingDict","i32"]},{"name":"ST_cContains_Polygon_Point","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"radians","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ST_MaxDistance_LineString_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"h3ToParent","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"_h3Rotate60ccw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]},{"name":"text_encoding_dict_copy","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingDict","args":["TextEncodingDict"]},{"name":"_ijkNormalize","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"Ceil__","annotations":[{},{"uses_manager":"false"}],"ret":"float","args":["float"]},{"name":"reg_hex_horiz_pixel_bin_packed","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i32","args":["double","double","double","double","double","double","double","double","double","double","i32","i32"]},{"name":"ST_Distance_Point_MultiLineString","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_ijkRotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i1","args":["i32*"]},{"name":"array_equal__bool","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<bool>","Array<bool>"]},{"name":"ST_Distance_MultiPoint_MultiPoint_Squared","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"convert_meters_to_merc_pixel_height","annotations":[{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["double","double","double","double","double","i32","double"]},{"name":"Round","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double","i32"]},{"name":"ST_Intersects_Polygon_Polygon","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32*","i64","double*","i64","i32","i32","i32","i32","i32"]},{"name":"array_equal__i32","annotations":[{},{},{"uses_manager":"false"}],"ret":"i1","args":["Array<i32>","Array<i32>"]},{"name":"is_point_size_in_view","annotations":[{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32","double","double","double","double","double"]},{"name":"conv_4326_900913_x","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"array_first_half__i16","annotations":[{},{"uses_manager":"false"}],"ret":"Array<i16>","args":["Array<i16>"]},{"name":"Contains_Polygon_Point_Impl","annotations":[{},{},{},{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i64","i32*","i64","double*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"conv_4326_900913_y","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Atan","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"ct_device_selection_udf_cpu__cpu_","annotations":[{},{"uses_manager":"false"}],"ret":"i32","args":["i32"]},{"name":"Floor","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"orientation","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i16","args":["double","double","double","double","double","double"]},{"name":"Truncate__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"i16","args":["i16","i32"]},{"name":"ST_Distance_Point_Point","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Truncate__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32","i32"]},{"name":"is_left","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i64","i64","i64","i64","i64"]},{"name":"Truncate__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"is_point_in_merc_view","annotations":[{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["double","double","double","double","double","double"]},{"name":"degsToRads","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Tan__","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["float"]},{"name":"ST_AsBinary__GeoMultiLineString__cpu_","annotations":[{},{"uses_manager":"true"}],"ret":"TextEncodingNone","args":["GeoMultiLineString"]},{"name":"polygon_contains_linestring","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"i1","args":["i8*","i32","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"ST_Distance_LineString_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"raw_array_as_array_same_type","annotations":[{},{},{"uses_manager":"false"}],"ret":"Array<i64>","args":["i64*","i64"]},{"name":"ST_Distance_MultiPoint_MultiPoint","annotations":[{},{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32","double"]},{"name":"_geoAzimuthRads","annotations":[{},{},{"uses_manager":"false"}],"ret":"double","args":["double*","double*"]},{"name":"strtok_to_array","annotations":[{},{},{"uses_manager":"true"}],"ret":"Array<TextEncodingDict>","args":["TextEncodingNone","TextEncodingNone"]},{"name":"pi","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":[]},{"name":"Round__1","annotations":[{},{},{"uses_manager":"false"}],"ret":"i16","args":["i16","i32"]},{"name":"ST_Distance_Point_Point_Squared","annotations":[{},{},{},{},{},{},{},{},{},{"uses_manager":"false"}],"ret":"double","args":["i8*","i64","i8*","i64","i32","i32","i32","i32","i32"]},{"name":"Exp","annotations":[{},{"uses_manager":"false"}],"ret":"double","args":["double"]},{"name":"Round__2","annotations":[{},{},{"uses_manager":"false"}],"ret":"i32","args":["i32","i32"]},{"name":"Round__3","annotations":[{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32"]},{"name":"Round__4","annotations":[{},{},{},{"uses_manager":"false"}],"ret":"i64","args":["i64","i32","i32"]},{"name":"_h3Rotate60cw","annotations":[{},{"uses_manager":"false"}],"ret":"i64","args":["i64"]}]
2025-04-19T00:18:17.880575 I 38957 0 0 DBHandler.cpp:527 Started in GPU mode.
2025-04-19T00:18:17.881161 2 38957 0 0 SysCatalog.cpp:251 reloading catalog caches for: system_catalog
2025-04-19T00:18:17.881253 I 38957 0 0 QueryEngine.h:47 Query Engine CUDA streams disabled
2025-04-19T00:18:17.881265 I 38957 0 0 DBHandler.cpp:567 Overriding default geos library with 'libgeos_c.so'
2025-04-19T00:18:17.881370 I 38957 0 0 HeavyDB.cpp:552  HeavyDB server using unencrypted connection
2025-04-19T00:18:20.567582 I 38957 1 1 DBHandler.cpp:659 stdlog_begin connect 0 0     
2025-04-19T00:18:20.740239 I 38957 1 1 DBHandler.cpp:701 User admin connected to database heavyai
2025-04-19T00:18:20.740263 I 38957 1 1 DBHandler.cpp:659 stdlog connect 0 172 heavyai admin 820-xJl0 {"client","roles"} {"tcp:localhost:52676","super"}
2025-04-19T00:18:20.740401 1 38957 2 1 DBHandler.cpp:960 stdlog_begin get_session_info 1 0 heavyai admin 820-xJl0  
2025-04-19T00:18:20.740423 I 38957 2 1 DBHandler.cpp:960 stdlog get_session_info 1 0 heavyai admin 820-xJl0 {"client"} {"tcp:localhost:52676"}
2025-04-19T00:18:22.932184 I 38957 3 1 DBHandler.cpp:1300 stdlog_begin sql_execute 2 0 heavyai admin 820-xJl0 {"query_str"} {"with ssales as (select c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size ,sum(ss_net_paid) netpaid from store_sales ,store_returns ,store ,item ,customer ,customer_address where ss_ticket_number = sr_ticket_number and ss_item_sk = sr_item_sk and ss_customer_sk = c_customer_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and c_current_addr_sk = ca_address_sk and c_birth_country <> upper(ca_country) and s_zip = ca_zip and s_market_id=5 group by c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size) select c_last_name ,c_first_name ,s_store_name ,sum(netpaid) paid from ssales where i_color = 'aquamarine' group by c_last_name ,c_first_name ,s_store_name having sum(netpaid) > (select 0.05*avg(netpaid) from ssales) order by c_last_name ,c_first_name ,s_store_name ;"}
2025-04-19T00:18:22.932234 1 38957 3 1 DBHandler.cpp:1205 query type: READ
2025-04-19T00:18:22.933094 I 38957 3 1 Calcite.cpp:566 User calcite catalog heavyai sql 'with ssales as (select c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size ,sum(ss_net_paid) netpaid from store_sales ,store_returns ,store ,item ,customer ,customer_address where ss_ticket_number = sr_ticket_number and ss_item_sk = sr_item_sk and ss_customer_sk = c_customer_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and c_current_addr_sk = ca_address_sk and c_birth_country <> upper(ca_country) and s_zip = ca_zip and s_market_id=5 group by c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size) select c_last_name ,c_first_name ,s_store_name ,sum(netpaid) paid from ssales where i_color = 'aquamarine' group by c_last_name ,c_first_name ,s_store_name having sum(netpaid) > (select 0.05*avg(netpaid) from ssales) order by c_last_name ,c_first_name ,s_store_name ;'
2025-04-19T00:18:22.958700 1 38957 3 2 DBHandler.cpp:3056 stdlog_begin get_databases 3 0 heavyai calcite 822-EKCB  
2025-04-19T00:18:22.958876 I 38957 3 2 DBHandler.cpp:3056 stdlog get_databases 3 0 heavyai calcite 822-EKCB {"client"} {"tcp:localhost:52690"}
2025-04-19T00:18:23.450979 1 38957 3 3 DBHandler.cpp:2703 stdlog_begin get_tables_for_database 4 0 heavyai calcite 822-EKCB  
2025-04-19T00:18:23.451031 I 38957 3 3 DBHandler.cpp:2703 stdlog get_tables_for_database 4 0 heavyai calcite 822-EKCB {"client"} {"tcp:localhost:52700"}
2025-04-19T00:18:23.453624 1 38957 3 4 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 5 0 heavyai calcite 822-EKCB {"table_name"} {"store_sales"}
2025-04-19T00:18:23.453643 1 38957 3 4 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_sales
2025-04-19T00:18:23.453748 I 38957 3 4 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 5 0 heavyai calcite 822-EKCB {"table_name","client"} {"store_sales","tcp:localhost:52702"}
2025-04-19T00:18:23.469423 1 38957 3 5 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 6 0 heavyai calcite 822-EKCB {"table_name"} {"store_returns"}
2025-04-19T00:18:23.469453 1 38957 3 5 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_returns
2025-04-19T00:18:23.469536 I 38957 3 5 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 6 0 heavyai calcite 822-EKCB {"table_name","client"} {"store_returns","tcp:localhost:52718"}
2025-04-19T00:18:23.471123 1 38957 3 6 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 7 0 heavyai calcite 822-EKCB {"table_name"} {"store"}
2025-04-19T00:18:23.471142 1 38957 3 6 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store
2025-04-19T00:18:23.471199 I 38957 3 6 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 7 0 heavyai calcite 822-EKCB {"table_name","client"} {"store","tcp:localhost:52726"}
2025-04-19T00:18:23.473596 1 38957 3 7 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 8 0 heavyai calcite 822-EKCB {"table_name"} {"item"}
2025-04-19T00:18:23.473613 1 38957 3 7 LockMgr.h:128 Acquiring Table Schema Read Lock for table: item
2025-04-19T00:18:23.473665 I 38957 3 7 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 8 0 heavyai calcite 822-EKCB {"table_name","client"} {"item","tcp:localhost:52736"}
2025-04-19T00:18:23.474826 1 38957 3 8 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 9 0 heavyai calcite 822-EKCB {"table_name"} {"customer"}
2025-04-19T00:18:23.474843 1 38957 3 8 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer
2025-04-19T00:18:23.474886 I 38957 3 8 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 9 0 heavyai calcite 822-EKCB {"table_name","client"} {"customer","tcp:localhost:52750"}
2025-04-19T00:18:23.475945 1 38957 3 9 DBHandler.cpp:2426 stdlog_begin get_internal_table_details_for_database 10 0 heavyai calcite 822-EKCB {"table_name"} {"customer_address"}
2025-04-19T00:18:23.475963 1 38957 3 9 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer_address
2025-04-19T00:18:23.476005 I 38957 3 9 DBHandler.cpp:2426 stdlog get_internal_table_details_for_database 10 0 heavyai calcite 822-EKCB {"table_name","client"} {"customer_address","tcp:localhost:52762"}
2025-04-19T00:18:23.789629 I 38957 3 1 Calcite.cpp:599 Time in Thrift 9 (ms), Time in Java Calcite server 847 (ms)
2025-04-19T00:18:23.789936 1 38957 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer
2025-04-19T00:18:23.790255 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790276 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790285 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790292 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790299 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790307 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790314 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790321 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790328 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790335 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790335 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790343 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790355 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790365 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790373 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790379 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790380 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790387 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790392 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790403 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790410 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790395 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790416 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790419 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790423 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790427 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790429 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790435 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,5,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.790436 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790447 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790453 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790459 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790466 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790471 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790478 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790489 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,5,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.790805 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,5,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.795423 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,5,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795475 I 38957 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_5'
2025-04-19T00:18:23.795494 3 38957 3 1 FileMgr.cpp:280 Number of Headers in Vector: 38
2025-04-19T00:18:23.795633 I 38957 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table customer took 5ms
2025-04-19T00:18:23.795642 1 38957 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: customer
2025-04-19T00:18:23.795661 1 38957 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer_address
2025-04-19T00:18:23.795895 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795914 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795930 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795926 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.795938 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795945 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795955 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795964 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795972 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795945 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.795979 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795983 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.795986 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795991 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.795993 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.795999 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.796001 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.796006 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.796016 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.796008 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,6,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.796024 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.796032 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.796040 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.796047 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.796055 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.796062 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,6,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.796433 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,6,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801072 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,6,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801123 I 38957 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_6'
2025-04-19T00:18:23.801141 3 38957 3 1 FileMgr.cpp:280 Number of Headers in Vector: 28
2025-04-19T00:18:23.801231 I 38957 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table customer_address took 5ms
2025-04-19T00:18:23.801240 1 38957 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: customer_address
2025-04-19T00:18:23.801255 1 38957 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: item
2025-04-19T00:18:23.801437 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801451 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801459 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801466 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801466 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801474 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801486 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801494 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801496 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801502 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801504 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801509 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801512 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801516 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801519 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801524 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801527 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801531 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801534 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801539 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801541 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801546 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801549 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801553 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801557 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801561 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801564 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801567 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801572 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801579 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801592 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801581 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801601 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801604 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801611 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801622 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801611 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801629 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,21,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801632 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801636 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,12,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.801639 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801646 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801653 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,21,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.801661 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,12,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.802044 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,12,24,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.806988 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,12,24,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807049 I 38957 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_12'
2025-04-19T00:18:23.807066 3 38957 3 1 FileMgr.cpp:280 Number of Headers in Vector: 46
2025-04-19T00:18:23.807199 I 38957 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table item took 5ms
2025-04-19T00:18:23.807207 1 38957 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: item
2025-04-19T00:18:23.807220 1 38957 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store
2025-04-19T00:18:23.807410 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807425 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807435 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807435 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807442 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807449 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807449 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807457 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807463 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807473 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807482 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807490 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807497 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807464 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807505 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807523 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807531 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807539 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807547 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807554 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807562 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807569 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807514 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807576 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807579 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807586 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807586 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807594 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807601 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807610 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807618 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807602 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807625 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,21,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807631 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807641 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807648 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807633 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807655 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807657 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,23,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807663 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807665 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,24,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807670 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807672 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,25,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807677 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807679 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,26,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807685 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807687 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,27,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807692 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,21,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807694 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,28,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807699 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807701 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,16,29,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.807711 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,23,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807724 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,24,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807731 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,25,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807738 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,26,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807746 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,27,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807753 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,28,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.807760 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,16,29,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.808075 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,16,31,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813008 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,16,31,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813072 I 38957 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_16'
2025-04-19T00:18:23.813090 3 38957 3 1 FileMgr.cpp:280 Number of Headers in Vector: 60
2025-04-19T00:18:23.813246 I 38957 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table store took 6ms
2025-04-19T00:18:23.813255 1 38957 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store
2025-04-19T00:18:23.813269 1 38957 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_returns
2025-04-19T00:18:23.813461 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813475 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813485 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813493 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813502 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813502 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813509 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813516 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813516 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813534 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813525 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813542 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813551 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813559 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813563 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813566 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813571 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813573 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813578 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813581 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813585 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813604 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813611 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813619 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813626 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813634 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813642 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813649 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,17,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.813595 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813666 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813673 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813680 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813687 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813695 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813702 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813709 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813719 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813726 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813734 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.813741 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,17,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.814107 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,17,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.818552 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,17,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.818617 I 38957 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_17'
2025-04-19T00:18:23.818636 3 38957 3 1 FileMgr.cpp:280 Number of Headers in Vector: 42
2025-04-19T00:18:23.818763 I 38957 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table store_returns took 5ms
2025-04-19T00:18:23.818781 1 38957 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store_returns
2025-04-19T00:18:23.818803 1 38957 3 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_sales
2025-04-19T00:18:23.818981 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,1,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.818994 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,2,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819003 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,3,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819022 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819028 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,4,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819036 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819037 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,5,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819044 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819056 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819046 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,6,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819065 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819067 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,7,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819072 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819075 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,8,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819079 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819082 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,9,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819087 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819089 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,10,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819095 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819104 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819112 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819096 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,11,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819121 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819125 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,12,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819128 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819133 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,13,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819135 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819140 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,14,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819142 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819147 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,15,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819150 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819154 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,16,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819160 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819169 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819176 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819161 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,17,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819184 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819185 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,18,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819192 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819201 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819209 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819216 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,25,0, Page id: 0 Epoch: 1
2025-04-19T00:18:23.819224 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819235 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819193 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,19,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819243 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819245 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,20,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819251 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819261 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819267 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819253 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,21,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819275 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819277 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,22,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819282 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819284 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 1.4096 Chunk key: 1,18,23,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.819291 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819298 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819305 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819313 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819320 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819328 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819336 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819343 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819351 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819358 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819365 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819372 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819379 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819387 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819394 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819401 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819408 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819416 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819423 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819430 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819438 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819445 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819453 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819460 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819471 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819478 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819485 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819493 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819500 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819508 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819515 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819523 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819534 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819542 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819554 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819561 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819568 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819575 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 2 Epoch: 1
2025-04-19T00:18:23.819583 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819589 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819596 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819603 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819611 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819619 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819625 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819633 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819640 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819647 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819653 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819661 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819668 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819675 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819682 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819689 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819696 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819704 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819711 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819719 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819726 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819736 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819743 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 3 Epoch: 1
2025-04-19T00:18:23.819751 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819758 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819765 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819783 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819794 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819802 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819809 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819816 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819824 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819831 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819838 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819845 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819853 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819860 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819867 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819875 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819882 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819890 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819897 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819904 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819912 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819919 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819926 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 4 Epoch: 1
2025-04-19T00:18:23.819933 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,25,0, Page id: 1 Epoch: 1
2025-04-19T00:18:23.819940 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,1,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.819947 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,2,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.819955 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,3,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.819962 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,4,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.819969 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,5,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.819977 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,6,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.819985 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,7,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.819992 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,8,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.819999 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,9,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820010 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,10,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820017 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,11,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820030 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,12,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820037 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,13,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820045 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,14,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820054 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,15,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820061 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,16,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820069 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,17,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820076 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,18,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820083 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,19,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820090 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,20,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820098 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,21,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820105 4 38957 0 0 FileInfo.cpp:121 FId.PSz: 0.2097152 Chunk key: 1,18,22,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.820306 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 0.2097152 Chunk key: 1,18,23,0, Page id: 5 Epoch: 1
2025-04-19T00:18:23.824525 4 38957 0 0 FileInfo.cpp:165 FId.PSz: 1.4096 Chunk key: 1,18,25,0, Page id: -1 Epoch: 1
2025-04-19T00:18:23.824605 I 38957 3 1 FileMgr.cpp:241 Completed Reading table's file metadata, Elapsed time : 5ms Epoch: 1 files read: 2 table location: '/var/lib/heavyai/storage/data/table_1_18'
2025-04-19T00:18:23.824636 3 38957 3 1 FileMgr.cpp:280 Number of Headers in Vector: 164
2025-04-19T00:18:23.824896 I 38957 3 1 Catalog.cpp:1917 Instantiating Fragmenter for table store_sales took 6ms
2025-04-19T00:18:23.824909 1 38957 3 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store_sales
2025-04-19T00:18:23.825015 W 38957 3 1 CudaMgr.cpp:604 Could not find CUDA installation path: environment variables CUDA_HOME or CUDA_DIR are not defined
2025-04-19T00:18:23.825110 W 38957 3 1 Execute.cpp:313 File /libdevice.10.bc does not exist; support for some UDF functions might not be available.
2025-04-19T00:18:23.835961 W 38957 3 1 Execute.cpp:400 Source of rt_libdevice_module LLVM module is unavailable. The module will be unavailable.
2025-04-19T00:18:23.835991 I 38957 3 1 QueryDispatchQueue.h:63 Dispatching query with 0 queries in the queue.
2025-04-19T00:18:23.836025 I 38957 0 0 QueryDispatchQueue.h:100 Worker 2 running query and returning control. There are now 1 workers are running and 0 queries in the queue.
2025-04-19T00:18:23.836067 1 38957 3 10 DBHandler.cpp:6167 Table Schema Locks:
1 5 
1 6 
1 12 
1 16 
1 17 
1 18 
2025-04-19T00:18:23.836077 1 38957 3 10 DBHandler.cpp:6168 Table Data Locks:
1 5 
1 6 
1 12 
1 16 
1 17 
1 18 
2025-04-19T00:18:23.846937 W 38957 3 10 Execute.cpp:400 Source of rt_libdevice_module LLVM module is unavailable. The module will be unavailable.
2025-04-19T00:18:23.847019 2 38957 3 10 RelAlgDag.cpp:3339 Parsing query RA JSON: {
  "rels": [
    {
      "id": "0",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ss_sold_date_sk",
        "ss_sold_time_sk",
        "ss_item_sk",
        "ss_customer_sk",
        "ss_cdemo_sk",
        "ss_hdemo_sk",
        "ss_addr_sk",
        "ss_store_sk",
        "ss_promo_sk",
        "ss_ticket_number",
        "ss_quantity",
        "ss_wholesale_cost",
        "ss_list_price",
        "ss_sales_price",
        "ss_ext_discount_amt",
        "ss_ext_sales_price",
        "ss_ext_wholesale_cost",
        "ss_ext_list_price",
        "ss_ext_tax",
        "ss_coupon_amt",
        "ss_net_paid",
        "ss_net_paid_inc_tax",
        "ss_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_sales"
      ],
      "inputs": []
    },
    {
      "id": "1",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "sr_returned_date_sk",
        "sr_return_time_sk",
        "sr_item_sk",
        "sr_customer_sk",
        "sr_cdemo_sk",
        "sr_hdemo_sk",
        "sr_addr_sk",
        "sr_store_sk",
        "sr_reason_sk",
        "sr_ticket_number",
        "sr_return_quantity",
        "sr_return_amt",
        "sr_return_tax",
        "sr_return_amt_inc_tax",
        "sr_fee",
        "sr_return_ship_cost",
        "sr_refunded_cash",
        "sr_reversed_charge",
        "sr_store_credit",
        "sr_net_loss",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_returns"
      ],
      "inputs": []
    },
    {
      "id": "2",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "0",
        "1"
      ]
    },
    {
      "id": "3",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "s_store_sk",
        "s_store_id",
        "s_rec_start_date",
        "s_rec_end_date",
        "s_closed_date_sk",
        "s_store_name",
        "s_number_employees",
        "s_floor_space",
        "s_hours",
        "s_manager",
        "s_market_id",
        "s_geography_class",
        "s_market_desc",
        "s_market_manager",
        "s_division_id",
        "s_division_name",
        "s_company_id",
        "s_company_name",
        "s_street_number",
        "s_street_name",
        "s_street_type",
        "s_suite_number",
        "s_city",
        "s_county",
        "s_state",
        "s_zip",
        "s_country",
        "s_gmt_offset",
        "s_tax_percentage",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store"
      ],
      "inputs": []
    },
    {
      "id": "4",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "2",
        "3"
      ]
    },
    {
      "id": "5",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "i_item_sk",
        "i_item_id",
        "i_rec_start_date",
        "i_rec_end_date",
        "i_item_desc",
        "i_current_price",
        "i_wholesale_cost",
        "i_brand_id",
        "i_brand",
        "i_class_id",
        "i_class",
        "i_category_id",
        "i_category",
        "i_manufact_id",
        "i_manufact",
        "i_size",
        "i_formulation",
        "i_color",
        "i_units",
        "i_container",
        "i_manager_id",
        "i_product_name",
        "rowid"
      ],
      "table": [
        "heavyai",
        "item"
      ],
      "inputs": []
    },
    {
      "id": "6",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "4",
        "5"
      ]
    },
    {
      "id": "7",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "c_customer_sk",
        "c_customer_id",
        "c_current_cdemo_sk",
        "c_current_hdemo_sk",
        "c_current_addr_sk",
        "c_first_shipto_date_sk",
        "c_first_sales_date_sk",
        "c_salutation",
        "c_first_name",
        "c_last_name",
        "c_preferred_cust_flag",
        "c_birth_day",
        "c_birth_month",
        "c_birth_year",
        "c_birth_country",
        "c_login",
        "c_email_address",
        "c_last_review_date_sk",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer"
      ],
      "inputs": []
    },
    {
      "id": "8",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "6",
        "7"
      ]
    },
    {
      "id": "9",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ca_address_sk",
        "ca_address_id",
        "ca_street_number",
        "ca_street_name",
        "ca_street_type",
        "ca_suite_number",
        "ca_city",
        "ca_county",
        "ca_state",
        "ca_zip",
        "ca_country",
        "ca_gmt_offset",
        "ca_location_type",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer_address"
      ],
      "inputs": []
    },
    {
      "id": "10",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "8",
        "9"
      ]
    },
    {
      "id": "11",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 9
              },
              {
                "input": 33
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 26
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 3
              },
              {
                "input": 98
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 75
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 7
              },
              {
                "input": 45
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 102
              },
              {
                "input": 117
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "<>",
            "operands": [
              {
                "input": 112
              },
              {
                "op": "UPPER",
                "operands": [
                  {
                    "input": 127
                  }
                ],
                "type": {
                  "type": "VARCHAR",
                  "nullable": true,
                  "precision": 50
                }
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 70
              },
              {
                "input": 126
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 55
              },
              {
                "literal": 5,
                "type": "DECIMAL",
                "target_type": "INTEGER",
                "scale": 0,
                "precision": 1,
                "type_scale": 0,
                "type_precision": 10
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "12",
      "relOp": "LogicalProject",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "ca_state",
        "s_state",
        "i_color",
        "i_current_price",
        "i_manager_id",
        "i_units",
        "i_size",
        "ss_net_paid"
      ],
      "exprs": [
        {
          "input": 107
        },
        {
          "input": 106
        },
        {
          "input": 50
        },
        {
          "input": 125
        },
        {
          "input": 69
        },
        {
          "input": 92
        },
        {
          "input": 80
        },
        {
          "input": 95
        },
        {
          "input": 93
        },
        {
          "input": 90
        },
        {
          "input": 20
        }
      ]
    },
    {
      "id": "13",
      "relOp": "LogicalAggregate",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "ca_state",
        "s_state",
        "i_color",
        "i_current_price",
        "i_manager_id",
        "i_units",
        "i_size",
        "netpaid"
      ],
      "group": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            10
          ]
        }
      ]
    },
    {
      "id": "14",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 5
          },
          {
            "literal": "aquamarine",
            "type": "CHAR",
            "target_type": "VARCHAR",
            "scale": -2147483648,
            "precision": 50,
            "type_scale": -2147483648,
            "type_precision": 50
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "15",
      "relOp": "LogicalProject",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "netpaid"
      ],
      "exprs": [
        {
          "input": 0
        },
        {
          "input": 1
        },
        {
          "input": 2
        },
        {
          "input": 10
        }
      ]
    },
    {
      "id": "16",
      "relOp": "LogicalAggregate",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "paid"
      ],
      "group": [
        0,
        1,
        2
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            3
          ]
        }
      ]
    },
    {
      "id": "17",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ss_sold_date_sk",
        "ss_sold_time_sk",
        "ss_item_sk",
        "ss_customer_sk",
        "ss_cdemo_sk",
        "ss_hdemo_sk",
        "ss_addr_sk",
        "ss_store_sk",
        "ss_promo_sk",
        "ss_ticket_number",
        "ss_quantity",
        "ss_wholesale_cost",
        "ss_list_price",
        "ss_sales_price",
        "ss_ext_discount_amt",
        "ss_ext_sales_price",
        "ss_ext_wholesale_cost",
        "ss_ext_list_price",
        "ss_ext_tax",
        "ss_coupon_amt",
        "ss_net_paid",
        "ss_net_paid_inc_tax",
        "ss_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_sales"
      ],
      "inputs": []
    },
    {
      "id": "18",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "sr_returned_date_sk",
        "sr_return_time_sk",
        "sr_item_sk",
        "sr_customer_sk",
        "sr_cdemo_sk",
        "sr_hdemo_sk",
        "sr_addr_sk",
        "sr_store_sk",
        "sr_reason_sk",
        "sr_ticket_number",
        "sr_return_quantity",
        "sr_return_amt",
        "sr_return_tax",
        "sr_return_amt_inc_tax",
        "sr_fee",
        "sr_return_ship_cost",
        "sr_refunded_cash",
        "sr_reversed_charge",
        "sr_store_credit",
        "sr_net_loss",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_returns"
      ],
      "inputs": []
    },
    {
      "id": "19",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "17",
        "18"
      ]
    },
    {
      "id": "20",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "s_store_sk",
        "s_store_id",
        "s_rec_start_date",
        "s_rec_end_date",
        "s_closed_date_sk",
        "s_store_name",
        "s_number_employees",
        "s_floor_space",
        "s_hours",
        "s_manager",
        "s_market_id",
        "s_geography_class",
        "s_market_desc",
        "s_market_manager",
        "s_division_id",
        "s_division_name",
        "s_company_id",
        "s_company_name",
        "s_street_number",
        "s_street_name",
        "s_street_type",
        "s_suite_number",
        "s_city",
        "s_county",
        "s_state",
        "s_zip",
        "s_country",
        "s_gmt_offset",
        "s_tax_percentage",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store"
      ],
      "inputs": []
    },
    {
      "id": "21",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "19",
        "20"
      ]
    },
    {
      "id": "22",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "i_item_sk",
        "i_item_id",
        "i_rec_start_date",
        "i_rec_end_date",
        "i_item_desc",
        "i_current_price",
        "i_wholesale_cost",
        "i_brand_id",
        "i_brand",
        "i_class_id",
        "i_class",
        "i_category_id",
        "i_category",
        "i_manufact_id",
        "i_manufact",
        "i_size",
        "i_formulation",
        "i_color",
        "i_units",
        "i_container",
        "i_manager_id",
        "i_product_name",
        "rowid"
      ],
      "table": [
        "heavyai",
        "item"
      ],
      "inputs": []
    },
    {
      "id": "23",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "21",
        "22"
      ]
    },
    {
      "id": "24",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "c_customer_sk",
        "c_customer_id",
        "c_current_cdemo_sk",
        "c_current_hdemo_sk",
        "c_current_addr_sk",
        "c_first_shipto_date_sk",
        "c_first_sales_date_sk",
        "c_salutation",
        "c_first_name",
        "c_last_name",
        "c_preferred_cust_flag",
        "c_birth_day",
        "c_birth_month",
        "c_birth_year",
        "c_birth_country",
        "c_login",
        "c_email_address",
        "c_last_review_date_sk",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer"
      ],
      "inputs": []
    },
    {
      "id": "25",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "23",
        "24"
      ]
    },
    {
      "id": "26",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ca_address_sk",
        "ca_address_id",
        "ca_street_number",
        "ca_street_name",
        "ca_street_type",
        "ca_suite_number",
        "ca_city",
        "ca_county",
        "ca_state",
        "ca_zip",
        "ca_country",
        "ca_gmt_offset",
        "ca_location_type",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer_address"
      ],
      "inputs": []
    },
    {
      "id": "27",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "25",
        "26"
      ]
    },
    {
      "id": "28",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 9
              },
              {
                "input": 33
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 26
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 3
              },
              {
                "input": 98
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 75
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 7
              },
              {
                "input": 45
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 102
              },
              {
                "input": 117
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "<>",
            "operands": [
              {
                "input": 112
              },
              {
                "op": "UPPER",
                "operands": [
                  {
                    "input": 127
                  }
                ],
                "type": {
                  "type": "VARCHAR",
                  "nullable": true,
                  "precision": 50
                }
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 70
              },
              {
                "input": 126
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 55
              },
              {
                "literal": 5,
                "type": "DECIMAL",
                "target_type": "INTEGER",
                "scale": 0,
                "precision": 1,
                "type_scale": 0,
                "type_precision": 10
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "29",
      "relOp": "LogicalProject",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "ca_state",
        "s_state",
        "i_color",
        "i_current_price",
        "i_manager_id",
        "i_units",
        "i_size",
        "ss_net_paid"
      ],
      "exprs": [
        {
          "input": 107
        },
        {
          "input": 106
        },
        {
          "input": 50
        },
        {
          "input": 125
        },
        {
          "input": 69
        },
        {
          "input": 92
        },
        {
          "input": 80
        },
        {
          "input": 95
        },
        {
          "input": 93
        },
        {
          "input": 90
        },
        {
          "input": 20
        }
      ]
    },
    {
      "id": "30",
      "relOp": "LogicalAggregate",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "ca_state",
        "s_state",
        "i_color",
        "i_current_price",
        "i_manager_id",
        "i_units",
        "i_size",
        "netpaid"
      ],
      "group": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            10
          ]
        }
      ]
    },
    {
      "id": "31",
      "relOp": "LogicalProject",
      "fields": [
        "netpaid"
      ],
      "exprs": [
        {
          "input": 10
        }
      ]
    },
    {
      "id": "32",
      "relOp": "LogicalAggregate",
      "fields": [
        "$f0"
      ],
      "group": [],
      "aggs": [
        {
          "agg": "AVG",
          "type": {
            "type": "DOUBLE",
            "nullable": false
          },
          "distinct": false,
          "operands": [
            0
          ]
        }
      ]
    },
    {
      "id": "33",
      "relOp": "LogicalProject",
      "fields": [
        "EXPR$0"
      ],
      "exprs": [
        {
          "op": "*",
          "operands": [
            {
              "literal": 5,
              "type": "DECIMAL",
              "target_type": "DECIMAL",
              "scale": 2,
              "precision": 1,
              "type_scale": 2,
              "type_precision": 3
            },
            {
              "input": 0
            }
          ],
          "type": {
            "type": "DOUBLE",
            "nullable": false
          }
        }
      ]
    },
    {
      "id": "34",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "left",
      "inputs": [
        "16",
        "33"
      ]
    },
    {
      "id": "35",
      "relOp": "LogicalFilter",
      "condition": {
        "op": ">",
        "operands": [
          {
            "input": 3
          },
          {
            "input": 4
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "36",
      "relOp": "LogicalProject",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "paid"
      ],
      "exprs": [
        {
          "input": 0
        },
        {
          "input": 1
        },
        {
          "input": 2
        },
        {
          "input": 3
        }
      ]
    },
    {
      "id": "37",
      "relOp": "LogicalSort",
      "collation": [
        {
          "field": 0,
          "direction": "ASCENDING",
          "nulls": "LAST"
        },
        {
          "field": 1,
          "direction": "ASCENDING",
          "nulls": "LAST"
        },
        {
          "field": 2,
          "direction": "ASCENDING",
          "nulls": "LAST"
        }
      ]
    }
  ]
}
2025-04-19T00:18:23.847620 I 38957 3 10 measure.h:77 Timer start                  executeRelAlgQuery                  executeRelAlgQuery:  573
2025-04-19T00:18:23.847632 I 38957 3 10 measure.h:77 Timer start           executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612
2025-04-19T00:18:23.848117 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_41 # Strings: 1 Hash table size: 256 Fill rate: 0.390625% Collisions: 0
2025-04-19T00:18:23.848151 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_41 was 0ms
2025-04-19T00:18:23.848390 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_40 # Strings: 3698 Hash table size: 8192 Fill rate: 45.1416% Collisions: 1800
2025-04-19T00:18:23.848412 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_40 was 0ms
2025-04-19T00:18:23.848531 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_65 # Strings: 7 Hash table size: 256 Fill rate: 2.73438% Collisions: 0
2025-04-19T00:18:23.848541 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_65 was 0ms
2025-04-19T00:18:23.848778 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_26 # Strings: 4131 Hash table size: 16384 Fill rate: 25.2136% Collisions: 716
2025-04-19T00:18:23.848811 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_26 was 0ms
2025-04-19T00:18:23.848923 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_68 # Strings: 21 Hash table size: 256 Fill rate: 8.20312% Collisions: 2
2025-04-19T00:18:23.848933 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_68 was 0ms
2025-04-19T00:18:23.849064 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_107 # Strings: 2 Hash table size: 256 Fill rate: 0.78125% Collisions: 0
2025-04-19T00:18:23.849081 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_107 was 0ms
2025-04-19T00:18:23.849330 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_27 # Strings: 4972 Hash table size: 16384 Fill rate: 30.3467% Collisions: 1097
2025-04-19T00:18:23.849347 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_27 was 0ms
2025-04-19T00:18:23.849466 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_39 # Strings: 51 Hash table size: 256 Fill rate: 19.9219% Collisions: 8
2025-04-19T00:18:23.849479 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_39 was 0ms
2025-04-19T00:18:23.849612 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_92 # Strings: 8 Hash table size: 256 Fill rate: 3.125% Collisions: 1
2025-04-19T00:18:23.849628 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_92 was 0ms
2025-04-19T00:18:23.849738 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_67 # Strings: 92 Hash table size: 256 Fill rate: 35.9375% Collisions: 27
2025-04-19T00:18:23.849749 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_67 was 0ms
2025-04-19T00:18:23.849894 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_106 # Strings: 1 Hash table size: 256 Fill rate: 0.390625% Collisions: 0
2025-04-19T00:18:23.849922 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_106 was 0ms
2025-04-19T00:18:23.850030 1 38957 3 10 StringDictionary.cpp:235 Opened string dictionary /var/lib/heavyai/storage/data/DB_1_DICT_29 # Strings: 211 Hash table size: 512 Fill rate: 41.2109% Collisions: 81
2025-04-19T00:18:23.850040 I 38957 3 10 Catalog.cpp:2035 Time to load Dictionary 1_29 was 0ms
2025-04-19T00:18:23.850236 I 38957 3 10 measure.h:77 Timer start                    executeRelAlgSeq                    executeRelAlgSeq:  895
2025-04-19T00:18:23.850246 1 38957 3 10 RelAlgExecutor.cpp:945 Executing query step 0 / 5
2025-04-19T00:18:23.850252 I 38957 3 10 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:23.850280 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:23.850285 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:23.850330 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:23.850360 3 38957 3 10 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(16),nest_level(2)) InputDescriptor(db_id(1), table_id(12),nest_level(3)) InputDescriptor(db_id(1), table_id(5),nest_level(4)) InputDescriptor(db_id(1), table_id(6),nest_level(5)))
2025-04-19T00:18:23.850366 3 38957 3 10 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(5))))
2025-04-19T00:18:23.850514 2 38957 3 10 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:23.850522 2 38957 3 10 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:18:23.850527 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:18:23.850533 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:18:23.850538 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 4
2025-04-19T00:18:23.850542 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 5
2025-04-19T00:18:23.850547 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 4, nest_level: 3
2025-04-19T00:18:23.850551 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 5, nest_level: 2
2025-04-19T00:18:23.850558 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:23.850565 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:23.850576 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:23.850582 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:23.850588 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:23.850599 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:23.850610 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:23.850615 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:23.850650 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:23.850682 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:23.850689 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:23.850695 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:23.850701 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:23.850707 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:23.850713 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:23.850724 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:23.850728 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:23.850764 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:23.850851 3 38957 3 10 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1) = 21
2025-04-19T00:18:23.850985 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:23.851004 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:23.851035 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:23.851052 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:23.851123 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:23.851145 I 38957 3 10 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:23.851162 3 38957 3 10 RelAlgExecutor.cpp:3692 body->getId()=39 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:23.851294 1 38957 3 10 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:23.851300 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 17559892595273414392
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 5, column_id: 10), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 5, column_id: 9), rte: 2, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 16, column_id: 6), rte: 5, which_row: 3, varno: 3) , (Var (db_id: 1, table_id: 6, column_id: 9), rte: 3, which_row: 3, varno: 4) , (Var (db_id: 1, table_id: 16, column_id: 25), rte: 5, which_row: 3, varno: 5) , (Var (db_id: 1, table_id: 12, column_id: 18), rte: 4, which_row: 3, varno: 6) , (Var (db_id: 1, table_id: 12, column_id: 6), rte: 4, which_row: 3, varno: 7) , (Var (db_id: 1, table_id: 12, column_id: 21), rte: 4, which_row: 3, varno: 8) , (Var (db_id: 1, table_id: 12, column_id: 19), rte: 4, which_row: 3, varno: 9) , (Var (db_id: 1, table_id: 12, column_id: 16), rte: 4, which_row: 3, varno: 10) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:23.851375 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:23.851402 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:23.851536 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:18:23.851547 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:18:23.851578 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 17559892595273414392
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:23.851618 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:23.851634 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:23.852592 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:23.852607 1 38957 3 10 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:23.852613 1 38957 3 10 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:23.852842 1 38957 3 10 CudaMgr.cpp:35 CUDA Error (2): out of memory
2025-04-19T00:18:23.852853 1 38957 3 10 CudaMgr.cpp:36  0# CudaMgr_Namespace::CudaErrorException::CudaErrorException(cudaError_enum) in /opt/heavyai/bin/heavydb
 1# 0x0000000001CE9716 in /opt/heavyai/bin/heavydb
 2# Buffer_Namespace::GpuCudaBufferMgr::addSlab(unsigned long) in /opt/heavyai/bin/heavydb
 3# Buffer_Namespace::BufferMgr::findFreeBuffer(unsigned long) in /opt/heavyai/bin/heavydb
 4# Buffer_Namespace::BufferMgr::reserveBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>&, unsigned long) in /opt/heavyai/bin/heavydb
 5# Buffer_Namespace::Buffer::reserve(unsigned long) in /opt/heavyai/bin/heavydb
 6# Buffer_Namespace::Buffer::Buffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 7# Buffer_Namespace::GpuCudaBuffer::GpuCudaBuffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, CudaMgr_Namespace::CudaMgr*, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 8# Buffer_Namespace::GpuCudaBufferMgr::allocateBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 9# Buffer_Namespace::BufferMgr::createBuffer(std::vector<int, std::allocator<int> > const&, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
10# Buffer_Namespace::BufferMgr::getBuffer(std::vector<int, std::allocator<int> > const&, unsigned long) in /opt/heavyai/bin/heavydb
11# Data_Namespace::DataMgr::getChunkBuffer(std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long) in /opt/heavyai/bin/heavydb
12# Chunk_NS::Chunk::getChunkBuffer(Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
13# Chunk_NS::Chunk::getChunk(ColumnDescriptor const*, Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long, bool) in /opt/heavyai/bin/heavydb
14# ColumnFetcher::getOneColumnFragment(Executor*, Analyzer::ColumnVar const&, Fragmenter_Namespace::FragmentInfo const&, Data_Namespace::MemoryLevel, int, DeviceAllocator*, unsigned long, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
15# ColumnFetcher::makeJoinColumn(Executor*, Analyzer::ColumnVar const&, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, Data_Namespace::MemoryLevel, int, DeviceAllocator*, unsigned long, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::vector<std::shared_ptr<void>, std::allocator<std::shared_ptr<void> > >&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
16# HashJoin::fetchJoinColumn(Analyzer::ColumnVar const*, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, Data_Namespace::MemoryLevel, int, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, DeviceAllocator*, std::vector<std::shared_ptr<void>, std::allocator<std::shared_ptr<void> > >&, Executor*, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >*) in /opt/heavyai/bin/heavydb
17# BaselineJoinHashTable::fetchColumnsForDevice(std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, int, DeviceAllocator*) in /opt/heavyai/bin/heavydb
18# BaselineJoinHashTable::reifyWithLayout(HashType) in /opt/heavyai/bin/heavydb
19# BaselineJoinHashTable::reify(HashType) in /opt/heavyai/bin/heavydb
20# BaselineJoinHashTable::getInstance(std::shared_ptr<Analyzer::BinOper>, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, int, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, Executor*, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
21# HashJoin::getInstance(std::shared_ptr<Analyzer::BinOper>, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, int, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, Executor*, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
22# Executor::buildHashTableForQualifier(std::shared_ptr<Analyzer::BinOper> const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
23# Executor::buildCurrentLevelHashTable(JoinCondition const&, unsigned long, RelAlgExecutionUnit&, CompilationOptions const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) in /opt/heavyai/bin/heavydb
24# Executor::buildJoinLoops(RelAlgExecutionUnit&, CompilationOptions const&, ExecutionOptions const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
25# Executor::compileWorkUnit(std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, ColumnDescriptor const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, ColumnDescriptor const*> > > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, CudaMgr_Namespace::CudaMgr const*, bool, std::shared_ptr<RowSetMemoryOwner>, unsigned long, signed char, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, RenderInfo*) in /opt/heavyai/bin/heavydb
26# QueryCompilationDescriptor::compile(unsigned long, signed char, bool, RelAlgExecutionUnit const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, ColumnDescriptor const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, ColumnDescriptor const*> > > const&, ColumnFetcher const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, Executor*) in /opt/heavyai/bin/heavydb
27# Executor::executeWorkUnitImpl(unsigned long&, bool, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, std::shared_ptr<RowSetMemoryOwner>, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
28# Executor::executeWorkUnit(unsigned long&, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
29# RelAlgExecutor::getNDVEstimation(RelAlgExecutor::WorkUnit const&, long, bool, CompilationOptions const&, ExecutionOptions const&) in /opt/heavyai/bin/heavydb
30# 0x0000000001B2F3F9 in /opt/heavyai/bin/heavydb
31# RelAlgExecutor::executeCompound(RelCompound const*, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
32# RelAlgExecutor::executeRelAlgStep(RaExecutionSequence const&, unsigned long, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
33# RelAlgExecutor::executeRelAlgSeq(RaExecutionSequence const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, bool) in /opt/heavyai/bin/heavydb
34# RelAlgExecutor::executeRelAlgQueryNoRetry(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
35# RelAlgExecutor::executeRelAlgQuery(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
36# DBHandler::execute_rel_alg(ExecutionResult&, query_state::QueryStateProxy, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, ExecutorDeviceType, int, int, bool, bool, ExplainInfo const&, std::optional<unsigned long>) const in /opt/heavyai/bin/heavydb
37# 0x000000000215E287 in /opt/heavyai/bin/heavydb
38# 0x000000000215EA14 in /opt/heavyai/bin/heavydb
39# 0x000000000215F87B in /opt/heavyai/bin/heavydb
40# 0x00007291E7A99EE8 in /lib/x86_64-linux-gnu/libc.so.6
41# 0x00000000020F3DF3 in /opt/heavyai/bin/heavydb
42# QueryDispatchQueue::worker(unsigned long) in /opt/heavyai/bin/heavydb
43# 0x000000000A62E230 in /opt/heavyai/bin/heavydb
44# 0x00007291E7A94AC3 in /lib/x86_64-linux-gnu/libc.so.6
45# 0x00007291E7B26850 in /lib/x86_64-linux-gnu/libc.so.6
2025-04-19T00:18:23.902172 1 38957 3 10 BufferMgr.h:55 Failed to allocate 3672899584 bytes with condition FailedToCreateSlab
2025-04-19T00:18:23.902183 1 38957 3 10 BufferMgr.h:56  0# OutOfMemory::OutOfMemory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) in /opt/heavyai/bin/heavydb
 1# FailedToCreateSlab::FailedToCreateSlab(unsigned long) in /opt/heavyai/bin/heavydb
 2# 0x0000000001BCAFF3 in /opt/heavyai/bin/heavydb
 3# Buffer_Namespace::BufferMgr::findFreeBuffer(unsigned long) in /opt/heavyai/bin/heavydb
 4# Buffer_Namespace::BufferMgr::reserveBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>&, unsigned long) in /opt/heavyai/bin/heavydb
 5# Buffer_Namespace::Buffer::reserve(unsigned long) in /opt/heavyai/bin/heavydb
 6# Buffer_Namespace::Buffer::Buffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 7# Buffer_Namespace::GpuCudaBuffer::GpuCudaBuffer(Buffer_Namespace::BufferMgr*, std::_List_iterator<Buffer_Namespace::BufferSeg>, int, CudaMgr_Namespace::CudaMgr*, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 8# Buffer_Namespace::GpuCudaBufferMgr::allocateBuffer(std::_List_iterator<Buffer_Namespace::BufferSeg>, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
 9# Buffer_Namespace::BufferMgr::createBuffer(std::vector<int, std::allocator<int> > const&, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
10# Buffer_Namespace::BufferMgr::getBuffer(std::vector<int, std::allocator<int> > const&, unsigned long) in /opt/heavyai/bin/heavydb
11# Data_Namespace::DataMgr::getChunkBuffer(std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long) in /opt/heavyai/bin/heavydb
12# Chunk_NS::Chunk::getChunkBuffer(Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long) in /opt/heavyai/bin/heavydb
13# Chunk_NS::Chunk::getChunk(ColumnDescriptor const*, Data_Namespace::DataMgr*, std::vector<int, std::allocator<int> > const&, Data_Namespace::MemoryLevel, int, unsigned long, unsigned long, bool) in /opt/heavyai/bin/heavydb
14# ColumnFetcher::getOneColumnFragment(Executor*, Analyzer::ColumnVar const&, Fragmenter_Namespace::FragmentInfo const&, Data_Namespace::MemoryLevel, int, DeviceAllocator*, unsigned long, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
15# ColumnFetcher::makeJoinColumn(Executor*, Analyzer::ColumnVar const&, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, Data_Namespace::MemoryLevel, int, DeviceAllocator*, unsigned long, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, std::vector<std::shared_ptr<void>, std::allocator<std::shared_ptr<void> > >&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
16# HashJoin::fetchJoinColumn(Analyzer::ColumnVar const*, std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, Data_Namespace::MemoryLevel, int, std::vector<std::shared_ptr<Chunk_NS::Chunk>, std::allocator<std::shared_ptr<Chunk_NS::Chunk> > >&, DeviceAllocator*, std::vector<std::shared_ptr<void>, std::allocator<std::shared_ptr<void> > >&, Executor*, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >*) in /opt/heavyai/bin/heavydb
17# BaselineJoinHashTable::fetchColumnsForDevice(std::vector<Fragmenter_Namespace::FragmentInfo, std::allocator<Fragmenter_Namespace::FragmentInfo> > const&, int, DeviceAllocator*) in /opt/heavyai/bin/heavydb
18# BaselineJoinHashTable::reifyWithLayout(HashType) in /opt/heavyai/bin/heavydb
19# BaselineJoinHashTable::reify(HashType) in /opt/heavyai/bin/heavydb
20# BaselineJoinHashTable::getInstance(std::shared_ptr<Analyzer::BinOper>, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, int, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, Executor*, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
21# HashJoin::getInstance(std::shared_ptr<Analyzer::BinOper>, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, int, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, Executor*, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
22# Executor::buildHashTableForQualifier(std::shared_ptr<Analyzer::BinOper> const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, Data_Namespace::MemoryLevel, JoinType, HashType, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, std::unordered_map<unsigned long, HashTableBuildDag, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, HashTableBuildDag> > > const&, RegisteredQueryHint const&, std::unordered_map<shared::TableKey, RelAlgNode const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, RelAlgNode const*> > > const&) in /opt/heavyai/bin/heavydb
23# Executor::buildCurrentLevelHashTable(JoinCondition const&, unsigned long, RelAlgExecutionUnit&, CompilationOptions const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) in /opt/heavyai/bin/heavydb
24# Executor::buildJoinLoops(RelAlgExecutionUnit&, CompilationOptions const&, ExecutionOptions const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
25# Executor::compileWorkUnit(std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, ColumnDescriptor const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, ColumnDescriptor const*> > > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, CudaMgr_Namespace::CudaMgr const*, bool, std::shared_ptr<RowSetMemoryOwner>, unsigned long, signed char, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&, RenderInfo*) in /opt/heavyai/bin/heavydb
26# QueryCompilationDescriptor::compile(unsigned long, signed char, bool, RelAlgExecutionUnit const&, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, std::unordered_map<shared::TableKey, ColumnDescriptor const*, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, ColumnDescriptor const*> > > const&, ColumnFetcher const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, Executor*) in /opt/heavyai/bin/heavydb
27# Executor::executeWorkUnitImpl(unsigned long&, bool, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, std::shared_ptr<RowSetMemoryOwner>, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
28# Executor::executeWorkUnit(unsigned long&, bool, std::vector<InputTableInfo, std::allocator<InputTableInfo> > const&, RelAlgExecutionUnit const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, bool, std::unordered_map<shared::TableKey, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > >, std::hash<shared::TableKey>, std::equal_to<shared::TableKey>, std::allocator<std::pair<shared::TableKey const, std::unordered_map<int, std::shared_ptr<ColumnarResults const>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::shared_ptr<ColumnarResults const> > > > > > >&) in /opt/heavyai/bin/heavydb
29# RelAlgExecutor::getNDVEstimation(RelAlgExecutor::WorkUnit const&, long, bool, CompilationOptions const&, ExecutionOptions const&) in /opt/heavyai/bin/heavydb
30# 0x0000000001B2F3F9 in /opt/heavyai/bin/heavydb
31# RelAlgExecutor::executeCompound(RelCompound const*, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
32# RelAlgExecutor::executeRelAlgStep(RaExecutionSequence const&, unsigned long, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long) in /opt/heavyai/bin/heavydb
33# RelAlgExecutor::executeRelAlgSeq(RaExecutionSequence const&, CompilationOptions const&, ExecutionOptions const&, RenderInfo*, long, bool) in /opt/heavyai/bin/heavydb
34# RelAlgExecutor::executeRelAlgQueryNoRetry(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
35# RelAlgExecutor::executeRelAlgQuery(CompilationOptions const&, ExecutionOptions const&, bool, bool, RenderInfo*) in /opt/heavyai/bin/heavydb
36# DBHandler::execute_rel_alg(ExecutionResult&, query_state::QueryStateProxy, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, ExecutorDeviceType, int, int, bool, bool, ExplainInfo const&, std::optional<unsigned long>) const in /opt/heavyai/bin/heavydb
37# 0x000000000215E287 in /opt/heavyai/bin/heavydb
38# 0x000000000215EA14 in /opt/heavyai/bin/heavydb
39# 0x000000000215F87B in /opt/heavyai/bin/heavydb
40# 0x00007291E7A99EE8 in /lib/x86_64-linux-gnu/libc.so.6
41# 0x00000000020F3DF3 in /opt/heavyai/bin/heavydb
42# QueryDispatchQueue::worker(unsigned long) in /opt/heavyai/bin/heavydb
43# 0x000000000A62E230 in /opt/heavyai/bin/heavydb
44# 0x00007291E7A94AC3 in /lib/x86_64-linux-gnu/libc.so.6
45# 0x00007291E7B26850 in /lib/x86_64-linux-gnu/libc.so.6
2025-04-19T00:18:23.950074 I 38957 3 10 BufferMgr.cpp:322 ALLOCATION Attempted slab of 7173632 pages (3672899584B) failed GPU_MGR:0
2025-04-19T00:18:23.950394 I 38957 3 10 BufferMgr.cpp:309 ALLOCATION slab of 3586816 pages (1836449792B) created in 0 ms GPU_MGR:0
2025-04-19T00:18:23.950405 1 38957 3 10 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,10,0,
2025-04-19T00:18:23.950435 I 38957 3 10 BufferMgr.cpp:309 ALLOCATION slab of 8388608 pages (4294967296B) created in 0 ms CPU_MGR:0
2025-04-19T00:18:23.950441 1 38957 3 10 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,10,0,
2025-04-19T00:18:23.951481 1 38957 3 10 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,3,0,
2025-04-19T00:18:23.951615 1 38957 3 10 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 1151468, chunk key:  key: 1,17,3,0,
2025-04-19T00:18:23.952585 1 38957 3 11 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToOne, hash table size: 6908808 Bytes, # hash entries: 575734, # entries stored in the payload buffer: 287867, rowid size: 4 Bytes
2025-04-19T00:18:23.958893 1 38957 3 11 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 15126069940850936496)
2025-04-19T00:18:23.958978 1 38957 3 10 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 106 ms
2025-04-19T00:18:23.959008 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:23.959062 1 38957 3 10 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,1,0,
2025-04-19T00:18:23.959071 1 38957 3 10 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,1,0,
2025-04-19T00:18:23.959495 1 38957 3 12 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 100000, # entries stored in the payload buffer: 100000, hash table size : 400000 Bytes
2025-04-19T00:18:23.960160 1 38957 3 10 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 14981932453577085213)
2025-04-19T00:18:23.960186 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 1 ms
2025-04-19T00:18:23.960209 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:23.960247 1 38957 3 10 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,1,0,
2025-04-19T00:18:23.960255 1 38957 3 10 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,1,0,
2025-04-19T00:18:23.960514 1 38957 3 13 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 50000, # entries stored in the payload buffer: 50000, hash table size : 200000 Bytes
2025-04-19T00:18:23.960733 1 38957 3 10 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 10209159661055272150)
2025-04-19T00:18:23.960752 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:23.960765 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:23.960803 1 38957 3 10 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,1,0,
2025-04-19T00:18:23.960817 1 38957 3 10 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,1,0,
2025-04-19T00:18:23.961002 1 38957 3 14 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 18000, # entries stored in the payload buffer: 18000, hash table size : 72000 Bytes
2025-04-19T00:18:23.961429 1 38957 3 10 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 5034283305709321086)
2025-04-19T00:18:23.961457 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:23.961468 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:23.961502 1 38957 3 10 BufferMgr.cpp:755 GPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,1,0,
2025-04-19T00:18:23.961509 1 38957 3 10 BufferMgr.cpp:790 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,1,0,
2025-04-19T00:18:23.961618 1 38957 3 15 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 12, # entries stored in the payload buffer: 12, hash table size : 48 Bytes
2025-04-19T00:18:23.961835 1 38957 3 10 HashingSchemeRecycler.cpp:65 [Hashing Scheme for Join Hashtable, CPU] Put hashtable layout to cache (key: 9932780903794067887)
2025-04-19T00:18:23.961858 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:23.961865 2 38957 3 10 HashJoin.cpp:379 Built GPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 1 0 4 0 0 0 0 0 -2147483648 * 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 |
2025-04-19T00:18:23.961894 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 109 ms
2025-04-19T00:18:23.962532 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 110 ms
2025-04-19T00:18:23.962547 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 110 ms
2025-04-19T00:18:23.962590 I 38957 3 10 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 111 ms
2025-04-19T00:18:23.962606 I 38957 3 10 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 112 ms
2025-04-19T00:18:23.962613 I 38957 3 10 RelAlgExecutor.cpp:957 Retrying current query step 0 / 5 on CPU
2025-04-19T00:18:23.962620 I 38957 3 10 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:23.962645 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:23.962651 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:23.962712 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:23.962750 3 38957 3 10 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(16),nest_level(2)) InputDescriptor(db_id(1), table_id(12),nest_level(3)) InputDescriptor(db_id(1), table_id(5),nest_level(4)) InputDescriptor(db_id(1), table_id(6),nest_level(5)))
2025-04-19T00:18:23.962756 3 38957 3 10 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(5))))
2025-04-19T00:18:23.962874 2 38957 3 10 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:23.962883 2 38957 3 10 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:18:23.962888 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:18:23.962894 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:18:23.962899 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 4
2025-04-19T00:18:23.962904 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 5
2025-04-19T00:18:23.962908 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 4, nest_level: 3
2025-04-19T00:18:23.962917 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 5, nest_level: 2
2025-04-19T00:18:23.962923 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:23.962931 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:23.962938 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:23.962945 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:23.962951 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:23.962957 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:23.962969 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:23.962974 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:23.963010 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:23.963045 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:23.963052 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:23.963057 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:23.963063 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:23.963069 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:23.963074 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:23.963085 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:23.963089 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:23.963147 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:23.963208 3 38957 3 10 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1) = 21
2025-04-19T00:18:23.963318 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:23.963337 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:23.963363 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:23.963380 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:23.963415 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:23.963437 I 38957 3 10 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:23.963459 3 38957 3 10 RelAlgExecutor.cpp:3692 body->getId()=39 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:23.963558 1 38957 3 10 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:23.963564 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 17559892595273414392
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 5, column_id: 10), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 5, column_id: 9), rte: 2, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 16, column_id: 6), rte: 5, which_row: 3, varno: 3) , (Var (db_id: 1, table_id: 6, column_id: 9), rte: 3, which_row: 3, varno: 4) , (Var (db_id: 1, table_id: 16, column_id: 25), rte: 5, which_row: 3, varno: 5) , (Var (db_id: 1, table_id: 12, column_id: 18), rte: 4, which_row: 3, varno: 6) , (Var (db_id: 1, table_id: 12, column_id: 6), rte: 4, which_row: 3, varno: 7) , (Var (db_id: 1, table_id: 12, column_id: 21), rte: 4, which_row: 3, varno: 8) , (Var (db_id: 1, table_id: 12, column_id: 19), rte: 4, which_row: 3, varno: 9) , (Var (db_id: 1, table_id: 12, column_id: 16), rte: 4, which_row: 3, varno: 10) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:23.963629 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:23.963646 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:23.963728 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:18:23.963738 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:18:23.963765 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 17559892595273414392
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:23.963837 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:23.963850 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:23.964477 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:23.964488 1 38957 3 10 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:23.964494 1 38957 3 10 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:23.964531 1 38957 3 10 BaselineJoinHashTable.cpp:1116 Checking CPU hash table cache.
2025-04-19T00:18:23.964635 1 38957 3 16 BaselineHashTable.h:110 Initialize a CPU baseline hash table with join type OneToOne, hash table size: 6908808 Bytes, # hash entries: 575734, # entries stored in the payload buffer: 287867, rowid size: 4 Bytes
2025-04-19T00:18:23.968147 1 38957 3 16 HashtableRecycler.cpp:161 [Baseline Join Hashtable, CPU] Put item to cache (key: 15126069940850936496)
2025-04-19T00:18:23.968247 1 38957 3 10 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 3 ms
2025-04-19T00:18:23.968268 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:23.968308 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 14981932453577085213)
2025-04-19T00:18:23.968316 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:23.968375 1 38957 3 49 PerfectHashTable.h:159 Initialize a CPU perfect join hash table, join type OneToOne, # hash entries: 100000, # entries stored in the payload buffer: 100000, hash table size : 400000 Bytes
2025-04-19T00:18:23.969861 1 38957 3 49 HashtableRecycler.cpp:161 [Perfect Join Hashtable, CPU] Put item to cache (key: 14981932453577085213)
2025-04-19T00:18:23.969927 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 1 ms
2025-04-19T00:18:23.969942 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:23.969970 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 10209159661055272150)
2025-04-19T00:18:23.969985 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:23.970039 1 38957 3 50 PerfectHashTable.h:159 Initialize a CPU perfect join hash table, join type OneToOne, # hash entries: 50000, # entries stored in the payload buffer: 50000, hash table size : 200000 Bytes
2025-04-19T00:18:23.971375 1 38957 3 50 HashtableRecycler.cpp:161 [Perfect Join Hashtable, CPU] Put item to cache (key: 10209159661055272150)
2025-04-19T00:18:23.971442 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 1 ms
2025-04-19T00:18:23.971457 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:23.971480 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 5034283305709321086)
2025-04-19T00:18:23.971487 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:23.971540 1 38957 3 51 PerfectHashTable.h:159 Initialize a CPU perfect join hash table, join type OneToOne, # hash entries: 18000, # entries stored in the payload buffer: 18000, hash table size : 72000 Bytes
2025-04-19T00:18:23.972887 1 38957 3 51 HashtableRecycler.cpp:161 [Perfect Join Hashtable, CPU] Put item to cache (key: 5034283305709321086)
2025-04-19T00:18:23.972947 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 1 ms
2025-04-19T00:18:23.972960 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:23.972986 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 9932780903794067887)
2025-04-19T00:18:23.972993 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:23.973043 1 38957 3 52 PerfectHashTable.h:159 Initialize a CPU perfect join hash table, join type OneToOne, # hash entries: 12, # entries stored in the payload buffer: 12, hash table size : 48 Bytes
2025-04-19T00:18:23.974381 1 38957 3 52 HashtableRecycler.cpp:161 [Perfect Join Hashtable, CPU] Put item to cache (key: 9932780903794067887)
2025-04-19T00:18:23.974443 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 1 ms
2025-04-19T00:18:23.974452 2 38957 3 10 HashJoin.cpp:385 Built CPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 |
2025-04-19T00:18:23.974465 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 9 ms
2025-04-19T00:18:23.974673 1 38957 3 10 StringDictionaryProxy.cpp:354 0.00% (0 entries) from dictionary ((db_id: 1, string_dict_id: 41)) with 1 total entries ( 0 literals) translated to dictionary ((db_id: 1, string_dict_id: 41)) with 1 total entries (0 literals).
2025-04-19T00:18:23.975261 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 2 / literal buffer usage: 16 bytes
2025-04-19T00:18:23.975816 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the CPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %31

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %28, %21 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp eq i64 %28, %20
  br i1 %29, label %30, label %21, !llvm.loop !25

30:                                               ; preds = %31, %21, %14
  ret void

31:                                               ; preds = %31, %18
  %32 = phi i64 [ %40, %31 ], [ 0, %18 ]
  %33 = getelementptr inbounds i8**, i8*** %6, i64 %32
  %34 = load i8**, i8*** %33, align 8, !tbaa !26
  %35 = trunc i64 %32 to i32
  %36 = mul i32 %16, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i64, i64* %8, i64 %37
  %39 = getelementptr inbounds i64, i64* %9, i64 %37
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %35, i32* %5, i8** %34, i8* %7, i64* %38, i64* %39, i32* %10, i64* %11, i64* %12, i8* %13)
  %40 = add nuw nsw i64 %32, 1
  %41 = icmp eq i64 %40, %20
  br i1 %41, label %30, label %31, !llvm.loop !25
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8*, i8** %byte_stream, i32 11
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8*, i8** %byte_stream, i32 12
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr i8*, i8** %byte_stream, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr i8*, i8** %byte_stream, i32 14
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr i8*, i8** %byte_stream, i32 15
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8*, i8** %byte_stream, i32 16
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr i8*, i8** %byte_stream, i32 17
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr i8*, i8** %byte_stream, i32 18
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr i8*, i8** %byte_stream, i32 19
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr i8*, i8** %byte_stream, i32 20
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr i8*, i8** %byte_stream, i32 21
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr i8*, i8** %byte_stream, i32 22
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr i8*, i8** %byte_stream, i32 23
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr i8*, i8** %byte_stream, i32 24
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr i8*, i8** %byte_stream, i32 25
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr i8*, i8** %byte_stream, i32 26
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr i8, i8* %literals, i16 0
  %55 = bitcast i8* %54 to i32*
  %literal_0 = load i32, i32* %55, align 4
  %56 = getelementptr i8, i8* %literals, i16 8
  %57 = bitcast i8* %56 to i64*
  %literal_8 = load i64, i64* %57, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %58 = sext i32 %pos_start to i64
  %59 = icmp slt i64 %58, %row_count
  br i1 %59, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %60 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %69, %.loop.preheader
  %pos = phi i64 [ %58, %.loop.preheader ], [ %70, %69 ]
  %61 = load i64*, i64** %out, align 8
  %62 = call i32 @row_func_hoisted_literals(i64* %61, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i8* %23, i8* %25, i8* %27, i8* %29, i8* %31, i8* %33, i8* %35, i8* %37, i8* %39, i8* %41, i8* %43, i8* %45, i8* %47, i8* %49, i8* %51, i8* %53, i64* %join_hash_tables, i8* %row_func_mgr, i64 %literal_8, i32 %literal_0)
  %63 = and i64 %pos, 63
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %65 = call i1 @check_interrupt()
  %66 = select i1 %65, i32 10, i32 %62
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %67 = phi i32 [ %66, %.interrupt_check ], [ %62, %.for.body ]
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %.error_exit, label %69

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %67, i32* %error_code)
  ret void

69:                                               ; preds = %.error_check
  %70 = add nsw i64 %pos, %60
  %71 = icmp slt i64 %70, %row_count
  br i1 %71, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %69
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i8* %col_buf11, i8* %col_buf12, i8* %col_buf13, i8* %col_buf14, i8* %col_buf15, i8* %col_buf16, i8* %col_buf17, i8* %col_buf18, i8* %col_buf19, i8* %col_buf20, i8* %col_buf21, i8* %col_buf22, i8* %col_buf23, i8* %col_buf24, i8* %col_buf25, i8* %col_buf26, i64* %join_hash_tables, i8* %row_func_mgr, i64 %arg_literal_8, i32 %arg_literal_0) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_7, %loop_done_false, %singleton_true_5, %singleton_true_3, %singleton_true_1, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = alloca i32, i64 8, align 4
  %1 = getelementptr i32, i32* %0, i64 0
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %3 = trunc i64 %2 to i32
  store i32 %3, i32* %1, align 4
  %4 = getelementptr i32, i32* %0, i64 1
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %4, align 4
  %7 = load i64, i64* %join_hash_tables, align 8
  %8 = inttoptr i64 %7 to i8*
  %9 = bitcast i32* %0 to i8*
  %10 = call i64 @baseline_hash_join_idx_32(i8* %8, i8* %9, i64 8, i64 575734)
  %11 = icmp sge i64 %10, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %12 = load i1, i1* %remaining_outer_cond_match, align 1
  %13 = and i1 %11, %12
  br i1 %13, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %14 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i64, i64* %join_hash_tables, i64 1
  %17 = load i64, i64* %16, align 8
  %18 = sext i32 %15 to i64
  %19 = call i64 @hash_join_idx_nullable(i64 %17, i64 %18, i64 1, i64 100000, i64 -2147483648)
  %20 = icmp sge i64 %19, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %21 = load i1, i1* %remaining_outer_cond_match2, align 1
  %22 = and i1 %20, %21
  br i1 %22, label %singleton_true_3, label %exit

singleton_true_3:                                 ; preds = %singleton_true_1
  %23 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %19)
  %24 = trunc i64 %23 to i32
  %25 = getelementptr i64, i64* %join_hash_tables, i64 2
  %26 = load i64, i64* %25, align 8
  %27 = sext i32 %24 to i64
  %28 = call i64 @hash_join_idx_nullable(i64 %26, i64 %27, i64 1, i64 50000, i64 -2147483648)
  %29 = icmp sge i64 %28, 0
  %remaining_outer_cond_match4 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match4, align 1
  %30 = load i1, i1* %remaining_outer_cond_match4, align 1
  %31 = and i1 %29, %30
  br i1 %31, label %singleton_true_5, label %exit

singleton_true_5:                                 ; preds = %singleton_true_3
  %32 = getelementptr i64, i64* %join_hash_tables, i64 3
  %33 = load i64, i64* %32, align 8
  %34 = sext i32 %6 to i64
  %35 = call i64 @hash_join_idx_nullable(i64 %33, i64 %34, i64 1, i64 18000, i64 -2147483648)
  %36 = icmp sge i64 %35, 0
  %remaining_outer_cond_match6 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match6, align 1
  %37 = load i1, i1* %remaining_outer_cond_match6, align 1
  %38 = and i1 %36, %37
  br i1 %38, label %singleton_true_7, label %exit

singleton_true_7:                                 ; preds = %singleton_true_5
  %39 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %40 = trunc i64 %39 to i32
  %41 = getelementptr i64, i64* %join_hash_tables, i64 4
  %42 = load i64, i64* %41, align 8
  %43 = sext i32 %40 to i64
  %44 = call i64 @hash_join_idx_nullable(i64 %42, i64 %43, i64 1, i64 12, i64 -2147483648)
  %45 = icmp sge i64 %44, 0
  %remaining_outer_cond_match8 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match8, align 1
  %46 = load i1, i1* %remaining_outer_cond_match8, align 1
  %47 = and i1 %45, %46
  br i1 %47, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_7
  store i1 true, i1* %loop_done, align 1
  %48 = call i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %44, i8* %col_buf11, i64 %19, i8* %col_buf15, i64 %28, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %35, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %out, i1* %loop_done, i64 %arg_literal_8, i32 %arg_literal_0)
  %49 = load i1, i1* %loop_done, align 1
  br i1 %49, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %48

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %extra0, i8* %col_buf11, i64 %extra1, i8* %col_buf15, i64 %extra2, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %extra3, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %out, i1* %loop_done, i64 %arg_literal_8, i32 %arg_literal_0) #33 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf24, i32 4, i64 %extra0)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf11, i32 4, i64 %extra1)
  %6 = trunc i64 %5 to i32
  %7 = call { i8*, i64 } @string_decompress(i32 %6, i64 125969249233792)
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 4, i64 %extra2)
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %9, -2147483648
  br i1 %10, label %dict_encoded_str_cast_nullcheck_true, label %dict_encoded_str_cast_nullcheck_false

dict_encoded_str_cast_nullcheck_true:             ; preds = %entry
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_false:            ; preds = %entry
  %11 = call i32 @map_string_dict_id(i32 %9, i64 %arg_literal_8, i32 -1)
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_bb:               ; preds = %dict_encoded_str_cast_nullcheck_false, %dict_encoded_str_cast_nullcheck_true
  %dict_encoded_str_cast_nullcheck_value = phi i32 [ %11, %dict_encoded_str_cast_nullcheck_false ], [ -2147483648, %dict_encoded_str_cast_nullcheck_true ]
  %12 = call { i8*, i64 } @string_decompress(i32 %dict_encoded_str_cast_nullcheck_value, i64 125969249244864)
  %13 = extractvalue { i8*, i64 } %7, 0
  %14 = extractvalue { i8*, i64 } %7, 1
  %15 = trunc i64 %14 to i32
  %16 = extractvalue { i8*, i64 } %12, 0
  %17 = extractvalue { i8*, i64 } %12, 1
  %18 = trunc i64 %17 to i32
  %19 = call i8 @string_ne_nullable(i8* %13, i32 %15, i8* %16, i32 %18, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 %4, %20
  %22 = call i64 @fixed_width_int_decode(i8* %col_buf26, i32 4, i64 %extra0)
  %23 = trunc i64 %22 to i32
  %24 = call { i8*, i64 } @string_decompress(i32 %23, i64 125969249257136)
  %25 = call i64 @fixed_width_int_decode(i8* %col_buf14, i32 4, i64 %extra2)
  %26 = trunc i64 %25 to i32
  %27 = call { i8*, i64 } @string_decompress(i32 %26, i64 125969249257920)
  %28 = extractvalue { i8*, i64 } %24, 0
  %29 = extractvalue { i8*, i64 } %24, 1
  %30 = trunc i64 %29 to i32
  %31 = extractvalue { i8*, i64 } %27, 0
  %32 = extractvalue { i8*, i64 } %27, 1
  %33 = trunc i64 %32 to i32
  %34 = call i8 @string_eq_nullable(i8* %28, i32 %30, i8* %31, i32 %33, i8 -128)
  %35 = icmp sgt i8 %34, 0
  %36 = and i1 %21, %35
  br i1 %36, label %filter_true, label %filter_false

filter_true:                                      ; preds = %dict_encoded_str_cast_nullcheck_bb
  %37 = alloca i64, i32 10, align 8
  %38 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %39 = trunc i64 %38 to i32
  %40 = sext i32 %39 to i64
  %41 = getelementptr i64, i64* %37, i32 0
  store i64 %40, i64* %41, align 8
  %42 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 4, i64 %extra1)
  %43 = trunc i64 %42 to i32
  %44 = sext i32 %43 to i64
  %45 = getelementptr i64, i64* %37, i32 1
  store i64 %44, i64* %45, align 8
  %46 = call i64 @fixed_width_int_decode(i8* %col_buf23, i32 4, i64 %extra0)
  %47 = trunc i64 %46 to i32
  %48 = sext i32 %47 to i64
  %49 = getelementptr i64, i64* %37, i32 2
  store i64 %48, i64* %49, align 8
  %50 = call i64 @fixed_width_int_decode(i8* %col_buf13, i32 4, i64 %extra2)
  %51 = trunc i64 %50 to i32
  %52 = sext i32 %51 to i64
  %53 = getelementptr i64, i64* %37, i32 3
  store i64 %52, i64* %53, align 8
  %54 = call i64 @fixed_width_int_decode(i8* %col_buf25, i32 4, i64 %extra0)
  %55 = trunc i64 %54 to i32
  %56 = sext i32 %55 to i64
  %57 = getelementptr i64, i64* %37, i32 4
  store i64 %56, i64* %57, align 8
  %58 = call i64 @fixed_width_int_decode(i8* %col_buf19, i32 4, i64 %extra3)
  %59 = trunc i64 %58 to i32
  %60 = sext i32 %59 to i64
  %61 = getelementptr i64, i64* %37, i32 5
  store i64 %60, i64* %61, align 8
  %62 = call i64 @fixed_width_int_decode(i8* %col_buf17, i32 4, i64 %extra3)
  %63 = trunc i64 %62 to i32
  %64 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %63, i32 -2147483648, i64 -9223372036854775808)
  %65 = getelementptr i64, i64* %37, i32 6
  store i64 %64, i64* %65, align 8
  %66 = call i64 @fixed_width_int_decode(i8* %col_buf21, i32 4, i64 %extra3)
  %67 = trunc i64 %66 to i32
  %68 = sext i32 %67 to i64
  %69 = getelementptr i64, i64* %37, i32 7
  store i64 %68, i64* %69, align 8
  %70 = call i64 @fixed_width_int_decode(i8* %col_buf20, i32 4, i64 %extra3)
  %71 = trunc i64 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = getelementptr i64, i64* %37, i32 8
  store i64 %72, i64* %73, align 8
  %74 = call i64 @fixed_width_int_decode(i8* %col_buf18, i32 4, i64 %extra3)
  %75 = trunc i64 %74 to i32
  %76 = sext i32 %75 to i64
  %77 = getelementptr i64, i64* %37, i32 9
  store i64 %76, i64* %77, align 8
  %78 = bitcast i64* %out to i8*
  %79 = bitcast i64* %37 to i8*
  call void @linear_probabilistic_count(i8* %78, i32 268435456, i8* %79, i32 80)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %dict_encoded_str_cast_nullcheck_bb
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:18:24.003185 1 38957 3 10 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:24.003504 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 39 ms
2025-04-19T00:18:24.003558 1 38957 3 10 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:24.003564 1 38957 3 10 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Estimator
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	Empty	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:24.003660 1 38957 3 10 Execute.cpp:3137 In Executor::LaunchKernels executor 2 requested between 1 and 1 CPU slots, and was granted 1 CPU slots.
2025-04-19T00:18:24.003670 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on CPU using pool of 1 threads.
2025-04-19T00:18:24.003697 I 38957 3 53 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:24.003705 I 38957 3 53 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:24.003722 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,3,0,
2025-04-19T00:18:24.011262 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,4,0,
2025-04-19T00:18:24.018509 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,8,0,
2025-04-19T00:18:24.025789 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,10,0,
2025-04-19T00:18:24.032964 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 11521616, chunk key:  key: 1,18,21,0,
2025-04-19T00:18:24.040322 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,5,0,
2025-04-19T00:18:24.040596 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,9,0,
2025-04-19T00:18:24.040873 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,10,0,
2025-04-19T00:18:24.041145 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 400000, chunk key:  key: 1,5,15,0,
2025-04-19T00:18:24.041395 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,9,0,
2025-04-19T00:18:24.041528 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,10,0,
2025-04-19T00:18:24.041719 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 200000, chunk key:  key: 1,6,11,0,
2025-04-19T00:18:24.041848 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,6,0,
2025-04-19T00:18:24.041901 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,16,0,
2025-04-19T00:18:24.041949 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,18,0,
2025-04-19T00:18:24.041997 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,19,0,
2025-04-19T00:18:24.042041 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 72000, chunk key:  key: 1,12,21,0,
2025-04-19T00:18:24.042091 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,6,0,
2025-04-19T00:18:24.042103 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,11,0,
2025-04-19T00:18:24.042114 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,25,0,
2025-04-19T00:18:24.042123 1 38957 3 53 BufferMgr.cpp:755 CPU_MGR: Fetching buffer from parent manager. Reason: cache miss. Num bytes to fetch: 48, chunk key:  key: 1,16,26,0,
2025-04-19T00:18:24.042139 I 38957 3 53 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 38 ms
2025-04-19T00:18:24.042163 I 38957 3 53 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:24.042177 I 38957 3 53 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:24.042197 1 38957 3 53 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:24.168807 I 38957 3 53 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 126 ms
2025-04-19T00:18:24.168848 I 38957 3 53 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 126 ms
2025-04-19T00:18:24.168870 I 38957 3 53 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 165 ms
2025-04-19T00:18:24.168911 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 205 ms
2025-04-19T00:18:24.267049 1 38957 3 10 RelAlgExecutor.cpp:3926 CardinalityEstimationRequired, Use ndv_estimation: 1, cardinality for estimated_groups_buffer_entry_guess: 2
2025-04-19T00:18:24.267075 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 17559892595273414392
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 5, column_id: 10), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 5, column_id: 9), rte: 2, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 16, column_id: 6), rte: 5, which_row: 3, varno: 3) , (Var (db_id: 1, table_id: 6, column_id: 9), rte: 3, which_row: 3, varno: 4) , (Var (db_id: 1, table_id: 16, column_id: 25), rte: 5, which_row: 3, varno: 5) , (Var (db_id: 1, table_id: 12, column_id: 18), rte: 4, which_row: 3, varno: 6) , (Var (db_id: 1, table_id: 12, column_id: 6), rte: 4, which_row: 3, varno: 7) , (Var (db_id: 1, table_id: 12, column_id: 21), rte: 4, which_row: 3, varno: 8) , (Var (db_id: 1, table_id: 12, column_id: 19), rte: 4, which_row: 3, varno: 9) , (Var (db_id: 1, table_id: 12, column_id: 16), rte: 4, which_row: 3, varno: 10) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:24.267203 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:24.267235 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:24.268001 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:24.268016 1 38957 3 10 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:24.268021 1 38957 3 10 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:24.268068 1 38957 3 10 BaselineJoinHashTable.cpp:1116 Checking CPU hash table cache.
2025-04-19T00:18:24.268074 1 38957 3 10 HashtableRecycler.cpp:86 [Baseline Join Hashtable, CPU] Recycle item in a cache (key: 15126069940850936496)
2025-04-19T00:18:24.268085 1 38957 3 10 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 0 ms
2025-04-19T00:18:24.268094 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.268116 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 14981932453577085213)
2025-04-19T00:18:24.268123 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.268128 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 14981932453577085213)
2025-04-19T00:18:24.268138 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.268146 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.268165 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 10209159661055272150)
2025-04-19T00:18:24.268171 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.268175 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 10209159661055272150)
2025-04-19T00:18:24.268183 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.268192 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.268209 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 5034283305709321086)
2025-04-19T00:18:24.268221 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.268225 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 5034283305709321086)
2025-04-19T00:18:24.268233 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.268241 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.268260 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 9932780903794067887)
2025-04-19T00:18:24.268266 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.268271 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 9932780903794067887)
2025-04-19T00:18:24.268280 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.268284 2 38957 3 10 HashJoin.cpp:385 Built CPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 |
2025-04-19T00:18:24.268294 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:24.268716 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 2 / literal buffer usage: 16 bytes
2025-04-19T00:18:24.269167 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the CPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %31

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %28, %21 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp eq i64 %28, %20
  br i1 %29, label %30, label %21, !llvm.loop !26

30:                                               ; preds = %31, %21, %14
  ret void

31:                                               ; preds = %31, %18
  %32 = phi i64 [ %40, %31 ], [ 0, %18 ]
  %33 = getelementptr inbounds i8**, i8*** %6, i64 %32
  %34 = load i8**, i8*** %33, align 8, !tbaa !27
  %35 = trunc i64 %32 to i32
  %36 = mul i32 %16, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i64, i64* %8, i64 %37
  %39 = getelementptr inbounds i64, i64* %9, i64 %37
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %35, i32* %5, i8** %34, i8* %7, i64* %38, i64* %39, i32* %10, i64* %11, i64* %12, i8* %13)
  %40 = add nuw nsw i64 %32, 1
  %41 = icmp eq i64 %40, %20
  br i1 %41, label %30, label %31, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8*, i8** %byte_stream, i32 11
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8*, i8** %byte_stream, i32 12
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr i8*, i8** %byte_stream, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr i8*, i8** %byte_stream, i32 14
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr i8*, i8** %byte_stream, i32 15
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8*, i8** %byte_stream, i32 16
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr i8*, i8** %byte_stream, i32 17
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr i8*, i8** %byte_stream, i32 18
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr i8*, i8** %byte_stream, i32 19
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr i8*, i8** %byte_stream, i32 20
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr i8*, i8** %byte_stream, i32 21
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr i8*, i8** %byte_stream, i32 22
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr i8*, i8** %byte_stream, i32 23
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr i8*, i8** %byte_stream, i32 24
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr i8*, i8** %byte_stream, i32 25
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr i8*, i8** %byte_stream, i32 26
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr i8, i8* %literals, i16 0
  %55 = bitcast i8* %54 to i32*
  %literal_0 = load i32, i32* %55, align 4
  %56 = getelementptr i8, i8* %literals, i16 8
  %57 = bitcast i8* %56 to i64*
  %literal_8 = load i64, i64* %57, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %58 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %59 = call i32 @pos_start_impl(i32* %row_index_resume)
  %60 = call i32 @pos_step_impl()
  %61 = call i32 @group_buff_idx_impl()
  %62 = sext i32 %59 to i64
  %63 = getelementptr i64*, i64** %group_by_buffers, i32 %61
  %col_buffer = load i64*, i64** %63, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %64 = icmp slt i64 %62, %row_count
  br i1 %64, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %65 = sext i32 %60 to i64
  br label %.forbody

.forbody:                                         ; preds = %73, %.loop.preheader
  %pos = phi i64 [ %62, %.loop.preheader ], [ %74, %73 ]
  %66 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i8* %23, i8* %25, i8* %27, i8* %29, i8* %31, i8* %33, i8* %35, i8* %37, i8* %39, i8* %41, i8* %43, i8* %45, i8* %47, i8* %49, i8* %51, i8* %53, i64* %join_hash_tables, i8* %row_func_mgr, i64 %literal_8, i32 %literal_0)
  %67 = and i64 %pos, 63
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %69 = call i1 @check_interrupt()
  %70 = select i1 %69, i32 10, i32 %66
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %71 = phi i32 [ %70, %.interrupt_check ], [ %66, %.forbody ]
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %.error_exit, label %73

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %71, i32* %error_code)
  ret void

73:                                               ; preds = %.error_check
  %74 = add i64 %pos, %65
  %75 = icmp slt i64 %74, %row_count
  br i1 %75, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %73
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i8* %col_buf11, i8* %col_buf12, i8* %col_buf13, i8* %col_buf14, i8* %col_buf15, i8* %col_buf16, i8* %col_buf17, i8* %col_buf18, i8* %col_buf19, i8* %col_buf20, i8* %col_buf21, i8* %col_buf22, i8* %col_buf23, i8* %col_buf24, i8* %col_buf25, i8* %col_buf26, i64* %join_hash_tables, i8* %row_func_mgr, i64 %arg_literal_8, i32 %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_7, %loop_done_false, %singleton_true_5, %singleton_true_3, %singleton_true_1, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = alloca i32, i64 8, align 4
  %1 = getelementptr i32, i32* %0, i64 0
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %3 = trunc i64 %2 to i32
  store i32 %3, i32* %1, align 4
  %4 = getelementptr i32, i32* %0, i64 1
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %4, align 4
  %7 = load i64, i64* %join_hash_tables, align 8
  %8 = inttoptr i64 %7 to i8*
  %9 = bitcast i32* %0 to i8*
  %10 = call i64 @baseline_hash_join_idx_32(i8* %8, i8* %9, i64 8, i64 575734)
  %11 = icmp sge i64 %10, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %12 = load i1, i1* %remaining_outer_cond_match, align 1
  %13 = and i1 %11, %12
  br i1 %13, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %14 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i64, i64* %join_hash_tables, i64 1
  %17 = load i64, i64* %16, align 8
  %18 = sext i32 %15 to i64
  %19 = call i64 @hash_join_idx_nullable(i64 %17, i64 %18, i64 1, i64 100000, i64 -2147483648)
  %20 = icmp sge i64 %19, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %21 = load i1, i1* %remaining_outer_cond_match2, align 1
  %22 = and i1 %20, %21
  br i1 %22, label %singleton_true_3, label %exit

singleton_true_3:                                 ; preds = %singleton_true_1
  %23 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %19)
  %24 = trunc i64 %23 to i32
  %25 = getelementptr i64, i64* %join_hash_tables, i64 2
  %26 = load i64, i64* %25, align 8
  %27 = sext i32 %24 to i64
  %28 = call i64 @hash_join_idx_nullable(i64 %26, i64 %27, i64 1, i64 50000, i64 -2147483648)
  %29 = icmp sge i64 %28, 0
  %remaining_outer_cond_match4 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match4, align 1
  %30 = load i1, i1* %remaining_outer_cond_match4, align 1
  %31 = and i1 %29, %30
  br i1 %31, label %singleton_true_5, label %exit

singleton_true_5:                                 ; preds = %singleton_true_3
  %32 = getelementptr i64, i64* %join_hash_tables, i64 3
  %33 = load i64, i64* %32, align 8
  %34 = sext i32 %6 to i64
  %35 = call i64 @hash_join_idx_nullable(i64 %33, i64 %34, i64 1, i64 18000, i64 -2147483648)
  %36 = icmp sge i64 %35, 0
  %remaining_outer_cond_match6 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match6, align 1
  %37 = load i1, i1* %remaining_outer_cond_match6, align 1
  %38 = and i1 %36, %37
  br i1 %38, label %singleton_true_7, label %exit

singleton_true_7:                                 ; preds = %singleton_true_5
  %39 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %40 = trunc i64 %39 to i32
  %41 = getelementptr i64, i64* %join_hash_tables, i64 4
  %42 = load i64, i64* %41, align 8
  %43 = sext i32 %40 to i64
  %44 = call i64 @hash_join_idx_nullable(i64 %42, i64 %43, i64 1, i64 12, i64 -2147483648)
  %45 = icmp sge i64 %44, 0
  %remaining_outer_cond_match8 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match8, align 1
  %46 = load i1, i1* %remaining_outer_cond_match8, align 1
  %47 = and i1 %45, %46
  br i1 %47, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_7
  store i1 true, i1* %loop_done, align 1
  %48 = call i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %44, i8* %col_buf11, i64 %19, i8* %col_buf15, i64 %28, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %35, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i64 %pos, i64 %arg_literal_8, i32 %arg_literal_0)
  %49 = load i1, i1* %loop_done, align 1
  br i1 %49, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %48

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %extra0, i8* %col_buf11, i64 %extra1, i8* %col_buf15, i64 %extra2, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %extra3, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i64 %pos, i64 %arg_literal_8, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf24, i32 4, i64 %extra0)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf11, i32 4, i64 %extra1)
  %6 = trunc i64 %5 to i32
  %7 = call { i8*, i64 } @string_decompress(i32 %6, i64 125969249233792)
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 4, i64 %extra2)
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %9, -2147483648
  br i1 %10, label %dict_encoded_str_cast_nullcheck_true, label %dict_encoded_str_cast_nullcheck_false

dict_encoded_str_cast_nullcheck_true:             ; preds = %entry
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_false:            ; preds = %entry
  %11 = call i32 @map_string_dict_id(i32 %9, i64 %arg_literal_8, i32 -1)
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_bb:               ; preds = %dict_encoded_str_cast_nullcheck_false, %dict_encoded_str_cast_nullcheck_true
  %dict_encoded_str_cast_nullcheck_value = phi i32 [ %11, %dict_encoded_str_cast_nullcheck_false ], [ -2147483648, %dict_encoded_str_cast_nullcheck_true ]
  %12 = call { i8*, i64 } @string_decompress(i32 %dict_encoded_str_cast_nullcheck_value, i64 125969249244864)
  %13 = extractvalue { i8*, i64 } %7, 0
  %14 = extractvalue { i8*, i64 } %7, 1
  %15 = trunc i64 %14 to i32
  %16 = extractvalue { i8*, i64 } %12, 0
  %17 = extractvalue { i8*, i64 } %12, 1
  %18 = trunc i64 %17 to i32
  %19 = call i8 @string_ne_nullable(i8* %13, i32 %15, i8* %16, i32 %18, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 %4, %20
  %22 = call i64 @fixed_width_int_decode(i8* %col_buf26, i32 4, i64 %extra0)
  %23 = trunc i64 %22 to i32
  %24 = call { i8*, i64 } @string_decompress(i32 %23, i64 125969249257136)
  %25 = call i64 @fixed_width_int_decode(i8* %col_buf14, i32 4, i64 %extra2)
  %26 = trunc i64 %25 to i32
  %27 = call { i8*, i64 } @string_decompress(i32 %26, i64 125969249257920)
  %28 = extractvalue { i8*, i64 } %24, 0
  %29 = extractvalue { i8*, i64 } %24, 1
  %30 = trunc i64 %29 to i32
  %31 = extractvalue { i8*, i64 } %27, 0
  %32 = extractvalue { i8*, i64 } %27, 1
  %33 = trunc i64 %32 to i32
  %34 = call i8 @string_eq_nullable(i8* %28, i32 %30, i8* %31, i32 %33, i8 -128)
  %35 = icmp sgt i8 %34, 0
  %36 = and i1 %21, %35
  br i1 %36, label %filter_true, label %filter_false

filter_true:                                      ; preds = %dict_encoded_str_cast_nullcheck_bb
  %37 = alloca i32, i32 10, align 4
  %38 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i32, i32* %37, i32 0
  store i32 %39, i32* %40, align 4
  %41 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 4, i64 %extra1)
  %42 = trunc i64 %41 to i32
  %43 = getelementptr i32, i32* %37, i32 1
  store i32 %42, i32* %43, align 4
  %44 = call i64 @fixed_width_int_decode(i8* %col_buf23, i32 4, i64 %extra0)
  %45 = trunc i64 %44 to i32
  %46 = getelementptr i32, i32* %37, i32 2
  store i32 %45, i32* %46, align 4
  %47 = call i64 @fixed_width_int_decode(i8* %col_buf13, i32 4, i64 %extra2)
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i32, i32* %37, i32 3
  store i32 %48, i32* %49, align 4
  %50 = call i64 @fixed_width_int_decode(i8* %col_buf25, i32 4, i64 %extra0)
  %51 = trunc i64 %50 to i32
  %52 = getelementptr i32, i32* %37, i32 4
  store i32 %51, i32* %52, align 4
  %53 = call i64 @fixed_width_int_decode(i8* %col_buf19, i32 4, i64 %extra3)
  %54 = trunc i64 %53 to i32
  %55 = getelementptr i32, i32* %37, i32 5
  store i32 %54, i32* %55, align 4
  %56 = call i64 @fixed_width_int_decode(i8* %col_buf17, i32 4, i64 %extra3)
  %57 = trunc i64 %56 to i32
  %58 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %57, i32 -2147483648, i64 -9223372036854775808)
  %59 = trunc i64 %58 to i32
  %60 = getelementptr i32, i32* %37, i32 6
  store i32 %59, i32* %60, align 4
  %61 = call i64 @fixed_width_int_decode(i8* %col_buf21, i32 4, i64 %extra3)
  %62 = trunc i64 %61 to i32
  %63 = getelementptr i32, i32* %37, i32 7
  store i32 %62, i32* %63, align 4
  %64 = call i64 @fixed_width_int_decode(i8* %col_buf20, i32 4, i64 %extra3)
  %65 = trunc i64 %64 to i32
  %66 = getelementptr i32, i32* %37, i32 8
  store i32 %65, i32* %66, align 4
  %67 = call i64 @fixed_width_int_decode(i8* %col_buf18, i32 4, i64 %extra3)
  %68 = trunc i64 %67 to i32
  %69 = getelementptr i32, i32* %37, i32 9
  store i32 %68, i32* %69, align 4
  %70 = bitcast i32* %37 to i64*
  %71 = call i64* @get_group_value(i64* %group_by_buff, i32 2, i64* %70, i32 10, i32 4, i32 6)
  %72 = icmp ne i64* %71, null
  br i1 %72, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %dict_encoded_str_cast_nullcheck_bb
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %73 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %pos)
  %74 = trunc i64 %73 to i32
  %75 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %74, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr = getelementptr i64, i64* %71, i64 0
  %76 = call i64 @agg_sum_skip_val(i64* %agg_col_ptr, i64 %75, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %77 = trunc i64 %pos to i32
  %78 = sub i32 0, %77
  ret i32 %78
}

End of IR
2025-04-19T00:18:24.297194 1 38957 3 10 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:24.297475 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 30 ms
2025-04-19T00:18:24.297525 1 38957 3 10 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:24.297531 1 38957 3 10 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 10
	Target group by indices: 0,1,2,3,4,5,6,7,8,9,-1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 0 , 0
	3 | 0 , 0
	4 | 0 , 0
	5 | 0 , 0
	6 | 0 , 0
	7 | 0 , 0
	8 | 0 , 0
	9 | 0 , 0
	10 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 2
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:24.297616 1 38957 3 10 Execute.cpp:3137 In Executor::LaunchKernels executor 2 requested between 1 and 1 CPU slots, and was granted 1 CPU slots.
2025-04-19T00:18:24.297626 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on CPU using pool of 1 threads.
2025-04-19T00:18:24.297650 I 38957 3 54 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:24.297658 I 38957 3 54 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:24.297704 I 38957 3 54 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:24.297827 I 38957 3 54 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:24.297843 2 38957 3 54 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(5),nest_level(2)) InputDescriptor(db_id(1), table_id(6),nest_level(3)) InputDescriptor(db_id(1), table_id(12),nest_level(4)) InputDescriptor(db_id(1), table_id(16),nest_level(5))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(5)))) ra_exe_unit.scan_limit=0 num_rows=((2880404 287867 100000 50000 18000 12)) frag_offsets=((0 0 0 0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=2 device_id=0 outer_table_key=(db_id: 1, table_id: 18) scan_limit=0 start_rowid=0 num_tables=6
2025-04-19T00:18:24.297877 I 38957 3 54 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:24.297884 1 38957 3 54 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:24.432985 I 38957 3 54 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 135 ms
2025-04-19T00:18:24.433030 2 38957 3 54 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:24.433058 I 38957 3 54 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 135 ms
2025-04-19T00:18:24.433091 I 38957 3 54 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 135 ms
2025-04-19T00:18:24.433149 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 165 ms
2025-04-19T00:18:24.433208 1 38957 3 10 Execute.cpp:5202 Put estimated cardinality to the cache
2025-04-19T00:18:24.433242 I 38957 3 10 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 469 ms
2025-04-19T00:18:24.433269 3 38957 3 10 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-39, ...) exec_desc.getResult().getDataPtr()->rowCount()=0
2025-04-19T00:18:24.433276 I 38957 3 10 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 470 ms
2025-04-19T00:18:24.433282 1 38957 3 10 RelAlgExecutor.cpp:945 Executing query step 1 / 5
2025-04-19T00:18:24.433289 I 38957 3 10 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:24.433317 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:24.433322 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:24.433369 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:24.433405 3 38957 3 10 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(16),nest_level(2)) InputDescriptor(db_id(1), table_id(12),nest_level(3)) InputDescriptor(db_id(1), table_id(5),nest_level(4)) InputDescriptor(db_id(1), table_id(6),nest_level(5)))
2025-04-19T00:18:24.433411 3 38957 3 10 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(5))))
2025-04-19T00:18:24.433504 2 38957 3 10 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:24.433511 2 38957 3 10 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:18:24.433516 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:18:24.433522 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:18:24.433526 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 4
2025-04-19T00:18:24.433531 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 5
2025-04-19T00:18:24.433535 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 4, nest_level: 3
2025-04-19T00:18:24.433544 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 5, nest_level: 2
2025-04-19T00:18:24.433551 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:24.433559 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:24.433565 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:24.433573 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:24.433578 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:24.433584 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:24.433596 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:24.433601 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:24.433630 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:24.433659 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:24.433666 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:24.433672 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:24.433678 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:24.433684 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:24.433689 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:24.433701 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:24.433705 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:24.433734 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:24.433800 3 38957 3 10 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1) = 21
2025-04-19T00:18:24.433909 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:24.433928 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:24.433953 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:24.433971 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:24.434014 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:24.434037 I 38957 3 10 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:24.434054 3 38957 3 10 RelAlgExecutor.cpp:3692 body->getId()=41 body->toString()=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:24.434138 1 38957 3 10 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:24.434144 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 15106331477019059735
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:24.434207 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:24.434225 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:24.434310 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:18:24.434319 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:18:24.434347 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 15106331477019059735
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:24.434389 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:24.434402 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:24.435186 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:24.435200 1 38957 3 10 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:24.435205 1 38957 3 10 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:24.435505 1 38957 3 55 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToOne, hash table size: 6908808 Bytes, # hash entries: 575734, # entries stored in the payload buffer: 287867, rowid size: 4 Bytes
2025-04-19T00:18:24.436765 1 38957 3 10 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 1 ms
2025-04-19T00:18:24.436789 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.436816 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 14981932453577085213)
2025-04-19T00:18:24.436897 1 38957 3 56 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 100000, # entries stored in the payload buffer: 100000, hash table size : 400000 Bytes
2025-04-19T00:18:24.437101 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.437130 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.437153 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 10209159661055272150)
2025-04-19T00:18:24.437227 1 38957 3 57 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 50000, # entries stored in the payload buffer: 50000, hash table size : 200000 Bytes
2025-04-19T00:18:24.437413 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.437425 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.437446 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 5034283305709321086)
2025-04-19T00:18:24.437511 1 38957 3 58 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 18000, # entries stored in the payload buffer: 18000, hash table size : 72000 Bytes
2025-04-19T00:18:24.437686 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.437699 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.437727 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 9932780903794067887)
2025-04-19T00:18:24.437812 1 38957 3 59 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 12, # entries stored in the payload buffer: 12, hash table size : 48 Bytes
2025-04-19T00:18:24.437989 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.437998 2 38957 3 10 HashJoin.cpp:379 Built GPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 44010 231069 10786 53504 42936 8493 115701 117957 14887 205659 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 101656 2551 186223 2147483647 2147483647 * 2147483647 2147483647 * 174012 8777 272956 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 238037 3912 61976 2147483647 2147483647 * 2147483647 2147483647 * 126313 17461 215796 2147483647 2147483647 * 2147483647 2147483647 * 49372 5209 123299 176975 13615 276393 128309 6800 218197 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 2147483647 * 83915 11851 164812 147298 1909 240774 185021 289 286071 54169 495 128984 2147483647 2147483647 * 2147483647 2147483647 * 2147483647 |
2025-04-19T00:18:24.438058 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 2 ms
2025-04-19T00:18:24.438533 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 4 ms
2025-04-19T00:18:24.438545 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 4 ms
2025-04-19T00:18:24.438584 I 38957 3 10 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 4 ms
2025-04-19T00:18:24.438598 I 38957 3 10 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 5 ms
2025-04-19T00:18:24.438605 I 38957 3 10 RelAlgExecutor.cpp:957 Retrying current query step 1 / 5 on CPU
2025-04-19T00:18:24.438611 I 38957 3 10 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:24.438627 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:24.438632 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:24.438675 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:24.438703 3 38957 3 10 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(16),nest_level(2)) InputDescriptor(db_id(1), table_id(12),nest_level(3)) InputDescriptor(db_id(1), table_id(5),nest_level(4)) InputDescriptor(db_id(1), table_id(6),nest_level(5)))
2025-04-19T00:18:24.438709 3 38957 3 10 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(5))))
2025-04-19T00:18:24.438794 2 38957 3 10 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:24.438806 2 38957 3 10 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:18:24.438812 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:18:24.438818 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:18:24.438823 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 4
2025-04-19T00:18:24.438828 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 5
2025-04-19T00:18:24.438832 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 4, nest_level: 3
2025-04-19T00:18:24.438836 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 5, nest_level: 2
2025-04-19T00:18:24.438843 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:24.438851 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:24.438857 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:24.438864 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:24.438874 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:24.438880 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:24.438892 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:24.438896 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:24.438926 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:24.438951 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:24.438957 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:24.438963 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:24.438972 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:24.438978 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:24.438985 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:24.438996 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:24.439001 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:24.439027 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:24.439080 3 38957 3 10 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1) = 21
2025-04-19T00:18:24.439163 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:24.439186 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:24.439211 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:24.439227 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:24.439261 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:24.439281 I 38957 3 10 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:24.439297 3 38957 3 10 RelAlgExecutor.cpp:3692 body->getId()=41 body->toString()=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:24.439379 1 38957 3 10 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:24.439384 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 15106331477019059735
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:24.439444 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:24.439463 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:24.439519 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 0 ms
2025-04-19T00:18:24.439528 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 0 ms
2025-04-19T00:18:24.439554 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 15106331477019059735
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Projected targets: 
	Has Estimator: False
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:24.439598 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:24.439610 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:24.440264 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:24.440278 1 38957 3 10 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:24.440283 1 38957 3 10 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:24.440320 1 38957 3 10 BaselineJoinHashTable.cpp:1116 Checking CPU hash table cache.
2025-04-19T00:18:24.440326 1 38957 3 10 HashtableRecycler.cpp:86 [Baseline Join Hashtable, CPU] Recycle item in a cache (key: 15126069940850936496)
2025-04-19T00:18:24.440335 1 38957 3 10 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 0 ms
2025-04-19T00:18:24.440344 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.440362 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 14981932453577085213)
2025-04-19T00:18:24.440369 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.440374 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 14981932453577085213)
2025-04-19T00:18:24.440383 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.440391 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.440410 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 10209159661055272150)
2025-04-19T00:18:24.440416 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.440421 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 10209159661055272150)
2025-04-19T00:18:24.440434 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.440443 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.440463 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 5034283305709321086)
2025-04-19T00:18:24.440470 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.440474 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 5034283305709321086)
2025-04-19T00:18:24.440483 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.440490 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.440509 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 9932780903794067887)
2025-04-19T00:18:24.440515 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.440520 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 9932780903794067887)
2025-04-19T00:18:24.440528 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.440533 2 38957 3 10 HashJoin.cpp:385 Built CPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 |
2025-04-19T00:18:24.440543 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:24.440890 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 2 / literal buffer usage: 16 bytes
2025-04-19T00:18:24.441328 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the CPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %31

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %28, %21 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp eq i64 %28, %20
  br i1 %29, label %30, label %21, !llvm.loop !25

30:                                               ; preds = %31, %21, %14
  ret void

31:                                               ; preds = %31, %18
  %32 = phi i64 [ %40, %31 ], [ 0, %18 ]
  %33 = getelementptr inbounds i8**, i8*** %6, i64 %32
  %34 = load i8**, i8*** %33, align 8, !tbaa !26
  %35 = trunc i64 %32 to i32
  %36 = mul i32 %16, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i64, i64* %8, i64 %37
  %39 = getelementptr inbounds i64, i64* %9, i64 %37
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %35, i32* %5, i8** %34, i8* %7, i64* %38, i64* %39, i32* %10, i64* %11, i64* %12, i8* %13)
  %40 = add nuw nsw i64 %32, 1
  %41 = icmp eq i64 %40, %20
  br i1 %41, label %30, label %31, !llvm.loop !25
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8*, i8** %byte_stream, i32 11
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8*, i8** %byte_stream, i32 12
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr i8*, i8** %byte_stream, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr i8*, i8** %byte_stream, i32 14
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr i8*, i8** %byte_stream, i32 15
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8*, i8** %byte_stream, i32 16
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr i8*, i8** %byte_stream, i32 17
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr i8*, i8** %byte_stream, i32 18
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr i8*, i8** %byte_stream, i32 19
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr i8*, i8** %byte_stream, i32 20
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr i8*, i8** %byte_stream, i32 21
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr i8*, i8** %byte_stream, i32 22
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr i8*, i8** %byte_stream, i32 23
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr i8*, i8** %byte_stream, i32 24
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr i8*, i8** %byte_stream, i32 25
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr i8*, i8** %byte_stream, i32 26
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr i8, i8* %literals, i16 0
  %55 = bitcast i8* %54 to i32*
  %literal_0 = load i32, i32* %55, align 4
  %56 = getelementptr i8, i8* %literals, i16 8
  %57 = bitcast i8* %56 to i64*
  %literal_8 = load i64, i64* %57, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %58 = sext i32 %pos_start to i64
  %59 = icmp slt i64 %58, %row_count
  br i1 %59, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %60 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %69, %.loop.preheader
  %pos = phi i64 [ %58, %.loop.preheader ], [ %70, %69 ]
  %61 = load i64*, i64** %out, align 8
  %62 = call i32 @row_func_hoisted_literals(i64* %61, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i8* %23, i8* %25, i8* %27, i8* %29, i8* %31, i8* %33, i8* %35, i8* %37, i8* %39, i8* %41, i8* %43, i8* %45, i8* %47, i8* %49, i8* %51, i8* %53, i64* %join_hash_tables, i8* %row_func_mgr, i64 %literal_8, i32 %literal_0)
  %63 = and i64 %pos, 63
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %65 = call i1 @check_interrupt()
  %66 = select i1 %65, i32 10, i32 %62
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %67 = phi i32 [ %66, %.interrupt_check ], [ %62, %.for.body ]
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %.error_exit, label %69

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %67, i32* %error_code)
  ret void

69:                                               ; preds = %.error_check
  %70 = add nsw i64 %pos, %60
  %71 = icmp slt i64 %70, %row_count
  br i1 %71, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %69
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i8* %col_buf11, i8* %col_buf12, i8* %col_buf13, i8* %col_buf14, i8* %col_buf15, i8* %col_buf16, i8* %col_buf17, i8* %col_buf18, i8* %col_buf19, i8* %col_buf20, i8* %col_buf21, i8* %col_buf22, i8* %col_buf23, i8* %col_buf24, i8* %col_buf25, i8* %col_buf26, i64* %join_hash_tables, i8* %row_func_mgr, i64 %arg_literal_8, i32 %arg_literal_0) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_7, %loop_done_false, %singleton_true_5, %singleton_true_3, %singleton_true_1, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = alloca i32, i64 8, align 4
  %1 = getelementptr i32, i32* %0, i64 0
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %3 = trunc i64 %2 to i32
  store i32 %3, i32* %1, align 4
  %4 = getelementptr i32, i32* %0, i64 1
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %4, align 4
  %7 = load i64, i64* %join_hash_tables, align 8
  %8 = inttoptr i64 %7 to i8*
  %9 = bitcast i32* %0 to i8*
  %10 = call i64 @baseline_hash_join_idx_32(i8* %8, i8* %9, i64 8, i64 575734)
  %11 = icmp sge i64 %10, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %12 = load i1, i1* %remaining_outer_cond_match, align 1
  %13 = and i1 %11, %12
  br i1 %13, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %14 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i64, i64* %join_hash_tables, i64 1
  %17 = load i64, i64* %16, align 8
  %18 = sext i32 %15 to i64
  %19 = call i64 @hash_join_idx_nullable(i64 %17, i64 %18, i64 1, i64 100000, i64 -2147483648)
  %20 = icmp sge i64 %19, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %21 = load i1, i1* %remaining_outer_cond_match2, align 1
  %22 = and i1 %20, %21
  br i1 %22, label %singleton_true_3, label %exit

singleton_true_3:                                 ; preds = %singleton_true_1
  %23 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %19)
  %24 = trunc i64 %23 to i32
  %25 = getelementptr i64, i64* %join_hash_tables, i64 2
  %26 = load i64, i64* %25, align 8
  %27 = sext i32 %24 to i64
  %28 = call i64 @hash_join_idx_nullable(i64 %26, i64 %27, i64 1, i64 50000, i64 -2147483648)
  %29 = icmp sge i64 %28, 0
  %remaining_outer_cond_match4 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match4, align 1
  %30 = load i1, i1* %remaining_outer_cond_match4, align 1
  %31 = and i1 %29, %30
  br i1 %31, label %singleton_true_5, label %exit

singleton_true_5:                                 ; preds = %singleton_true_3
  %32 = getelementptr i64, i64* %join_hash_tables, i64 3
  %33 = load i64, i64* %32, align 8
  %34 = sext i32 %6 to i64
  %35 = call i64 @hash_join_idx_nullable(i64 %33, i64 %34, i64 1, i64 18000, i64 -2147483648)
  %36 = icmp sge i64 %35, 0
  %remaining_outer_cond_match6 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match6, align 1
  %37 = load i1, i1* %remaining_outer_cond_match6, align 1
  %38 = and i1 %36, %37
  br i1 %38, label %singleton_true_7, label %exit

singleton_true_7:                                 ; preds = %singleton_true_5
  %39 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %40 = trunc i64 %39 to i32
  %41 = getelementptr i64, i64* %join_hash_tables, i64 4
  %42 = load i64, i64* %41, align 8
  %43 = sext i32 %40 to i64
  %44 = call i64 @hash_join_idx_nullable(i64 %42, i64 %43, i64 1, i64 12, i64 -2147483648)
  %45 = icmp sge i64 %44, 0
  %remaining_outer_cond_match8 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match8, align 1
  %46 = load i1, i1* %remaining_outer_cond_match8, align 1
  %47 = and i1 %45, %46
  br i1 %47, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_7
  store i1 true, i1* %loop_done, align 1
  %48 = call i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %44, i8* %col_buf11, i64 %19, i8* %col_buf15, i64 %28, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %35, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %out, i1* %loop_done, i64 %arg_literal_8, i32 %arg_literal_0)
  %49 = load i1, i1* %loop_done, align 1
  br i1 %49, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %48

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %extra0, i8* %col_buf11, i64 %extra1, i8* %col_buf15, i64 %extra2, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %extra3, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %out, i1* %loop_done, i64 %arg_literal_8, i32 %arg_literal_0) #33 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf24, i32 4, i64 %extra0)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf11, i32 4, i64 %extra1)
  %6 = trunc i64 %5 to i32
  %7 = call { i8*, i64 } @string_decompress(i32 %6, i64 125969249233792)
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 4, i64 %extra2)
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %9, -2147483648
  br i1 %10, label %dict_encoded_str_cast_nullcheck_true, label %dict_encoded_str_cast_nullcheck_false

dict_encoded_str_cast_nullcheck_true:             ; preds = %entry
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_false:            ; preds = %entry
  %11 = call i32 @map_string_dict_id(i32 %9, i64 %arg_literal_8, i32 -1)
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_bb:               ; preds = %dict_encoded_str_cast_nullcheck_false, %dict_encoded_str_cast_nullcheck_true
  %dict_encoded_str_cast_nullcheck_value = phi i32 [ %11, %dict_encoded_str_cast_nullcheck_false ], [ -2147483648, %dict_encoded_str_cast_nullcheck_true ]
  %12 = call { i8*, i64 } @string_decompress(i32 %dict_encoded_str_cast_nullcheck_value, i64 125969249244864)
  %13 = extractvalue { i8*, i64 } %7, 0
  %14 = extractvalue { i8*, i64 } %7, 1
  %15 = trunc i64 %14 to i32
  %16 = extractvalue { i8*, i64 } %12, 0
  %17 = extractvalue { i8*, i64 } %12, 1
  %18 = trunc i64 %17 to i32
  %19 = call i8 @string_ne_nullable(i8* %13, i32 %15, i8* %16, i32 %18, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 %4, %20
  %22 = call i64 @fixed_width_int_decode(i8* %col_buf26, i32 4, i64 %extra0)
  %23 = trunc i64 %22 to i32
  %24 = call { i8*, i64 } @string_decompress(i32 %23, i64 125969249257136)
  %25 = call i64 @fixed_width_int_decode(i8* %col_buf14, i32 4, i64 %extra2)
  %26 = trunc i64 %25 to i32
  %27 = call { i8*, i64 } @string_decompress(i32 %26, i64 125969249257920)
  %28 = extractvalue { i8*, i64 } %24, 0
  %29 = extractvalue { i8*, i64 } %24, 1
  %30 = trunc i64 %29 to i32
  %31 = extractvalue { i8*, i64 } %27, 0
  %32 = extractvalue { i8*, i64 } %27, 1
  %33 = trunc i64 %32 to i32
  %34 = call i8 @string_eq_nullable(i8* %28, i32 %30, i8* %31, i32 %33, i8 -128)
  %35 = icmp sgt i8 %34, 0
  %36 = and i1 %21, %35
  br i1 %36, label %filter_true, label %filter_false

filter_true:                                      ; preds = %dict_encoded_str_cast_nullcheck_bb
  %37 = alloca i64, i32 10, align 8
  %38 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %39 = trunc i64 %38 to i32
  %40 = sext i32 %39 to i64
  %41 = getelementptr i64, i64* %37, i32 0
  store i64 %40, i64* %41, align 8
  %42 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 4, i64 %extra1)
  %43 = trunc i64 %42 to i32
  %44 = sext i32 %43 to i64
  %45 = getelementptr i64, i64* %37, i32 1
  store i64 %44, i64* %45, align 8
  %46 = call i64 @fixed_width_int_decode(i8* %col_buf23, i32 4, i64 %extra0)
  %47 = trunc i64 %46 to i32
  %48 = sext i32 %47 to i64
  %49 = getelementptr i64, i64* %37, i32 2
  store i64 %48, i64* %49, align 8
  %50 = call i64 @fixed_width_int_decode(i8* %col_buf13, i32 4, i64 %extra2)
  %51 = trunc i64 %50 to i32
  %52 = sext i32 %51 to i64
  %53 = getelementptr i64, i64* %37, i32 3
  store i64 %52, i64* %53, align 8
  %54 = call i64 @fixed_width_int_decode(i8* %col_buf25, i32 4, i64 %extra0)
  %55 = trunc i64 %54 to i32
  %56 = sext i32 %55 to i64
  %57 = getelementptr i64, i64* %37, i32 4
  store i64 %56, i64* %57, align 8
  %58 = call i64 @fixed_width_int_decode(i8* %col_buf19, i32 4, i64 %extra3)
  %59 = trunc i64 %58 to i32
  %60 = sext i32 %59 to i64
  %61 = getelementptr i64, i64* %37, i32 5
  store i64 %60, i64* %61, align 8
  %62 = call i64 @fixed_width_int_decode(i8* %col_buf17, i32 4, i64 %extra3)
  %63 = trunc i64 %62 to i32
  %64 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %63, i32 -2147483648, i64 -9223372036854775808)
  %65 = getelementptr i64, i64* %37, i32 6
  store i64 %64, i64* %65, align 8
  %66 = call i64 @fixed_width_int_decode(i8* %col_buf21, i32 4, i64 %extra3)
  %67 = trunc i64 %66 to i32
  %68 = sext i32 %67 to i64
  %69 = getelementptr i64, i64* %37, i32 7
  store i64 %68, i64* %69, align 8
  %70 = call i64 @fixed_width_int_decode(i8* %col_buf20, i32 4, i64 %extra3)
  %71 = trunc i64 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = getelementptr i64, i64* %37, i32 8
  store i64 %72, i64* %73, align 8
  %74 = call i64 @fixed_width_int_decode(i8* %col_buf18, i32 4, i64 %extra3)
  %75 = trunc i64 %74 to i32
  %76 = sext i32 %75 to i64
  %77 = getelementptr i64, i64* %37, i32 9
  store i64 %76, i64* %77, align 8
  %78 = bitcast i64* %out to i8*
  %79 = bitcast i64* %37 to i8*
  call void @linear_probabilistic_count(i8* %78, i32 268435456, i8* %79, i32 80)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %dict_encoded_str_cast_nullcheck_bb
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:18:24.441703 1 38957 3 10 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:18:24.441996 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 2 ms
2025-04-19T00:18:24.442028 1 38957 3 10 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:24.442041 1 38957 3 10 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Estimator
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	Empty	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:24.442121 1 38957 3 10 Execute.cpp:3137 In Executor::LaunchKernels executor 2 requested between 1 and 1 CPU slots, and was granted 1 CPU slots.
2025-04-19T00:18:24.442135 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on CPU using pool of 1 threads.
2025-04-19T00:18:24.442155 I 38957 3 60 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:24.442164 I 38957 3 60 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:24.442200 I 38957 3 60 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:24.442216 I 38957 3 60 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:24.442228 I 38957 3 60 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:24.442251 1 38957 3 60 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:24.553334 I 38957 3 60 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 111 ms
2025-04-19T00:18:24.553369 I 38957 3 60 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 111 ms
2025-04-19T00:18:24.553390 I 38957 3 60 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 111 ms
2025-04-19T00:18:24.553431 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 113 ms
2025-04-19T00:18:24.647994 1 38957 3 10 RelAlgExecutor.cpp:3926 CardinalityEstimationRequired, Use ndv_estimation: 1, cardinality for estimated_groups_buffer_entry_guess: 2
2025-04-19T00:18:24.648010 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 15106331477019059735
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:24.648133 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:24.648163 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:24.649025 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:24.649039 1 38957 3 10 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:24.649045 1 38957 3 10 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:24.649096 1 38957 3 10 BaselineJoinHashTable.cpp:1116 Checking CPU hash table cache.
2025-04-19T00:18:24.649103 1 38957 3 10 HashtableRecycler.cpp:86 [Baseline Join Hashtable, CPU] Recycle item in a cache (key: 15126069940850936496)
2025-04-19T00:18:24.649113 1 38957 3 10 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 0 ms
2025-04-19T00:18:24.649122 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.649144 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 14981932453577085213)
2025-04-19T00:18:24.649151 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.649156 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 14981932453577085213)
2025-04-19T00:18:24.649165 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.649173 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.649192 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 10209159661055272150)
2025-04-19T00:18:24.649199 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.649204 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 10209159661055272150)
2025-04-19T00:18:24.649212 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.649220 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.649237 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 5034283305709321086)
2025-04-19T00:18:24.649243 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.649247 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 5034283305709321086)
2025-04-19T00:18:24.649256 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.649263 1 38957 3 10 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:24.649282 1 38957 3 10 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 9932780903794067887)
2025-04-19T00:18:24.649288 1 38957 3 10 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:24.649292 1 38957 3 10 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 9932780903794067887)
2025-04-19T00:18:24.649301 1 38957 3 10 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:24.649305 2 38957 3 10 HashJoin.cpp:385 Built CPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 |
2025-04-19T00:18:24.649315 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:24.649659 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 2 / literal buffer usage: 16 bytes
2025-04-19T00:18:24.650110 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the CPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %31

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %28, %21 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp eq i64 %28, %20
  br i1 %29, label %30, label %21, !llvm.loop !26

30:                                               ; preds = %31, %21, %14
  ret void

31:                                               ; preds = %31, %18
  %32 = phi i64 [ %40, %31 ], [ 0, %18 ]
  %33 = getelementptr inbounds i8**, i8*** %6, i64 %32
  %34 = load i8**, i8*** %33, align 8, !tbaa !27
  %35 = trunc i64 %32 to i32
  %36 = mul i32 %16, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i64, i64* %8, i64 %37
  %39 = getelementptr inbounds i64, i64* %9, i64 %37
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %35, i32* %5, i8** %34, i8* %7, i64* %38, i64* %39, i32* %10, i64* %11, i64* %12, i8* %13)
  %40 = add nuw nsw i64 %32, 1
  %41 = icmp eq i64 %40, %20
  br i1 %41, label %30, label %31, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8*, i8** %byte_stream, i32 11
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8*, i8** %byte_stream, i32 12
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr i8*, i8** %byte_stream, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr i8*, i8** %byte_stream, i32 14
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr i8*, i8** %byte_stream, i32 15
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8*, i8** %byte_stream, i32 16
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr i8*, i8** %byte_stream, i32 17
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr i8*, i8** %byte_stream, i32 18
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr i8*, i8** %byte_stream, i32 19
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr i8*, i8** %byte_stream, i32 20
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr i8*, i8** %byte_stream, i32 21
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr i8*, i8** %byte_stream, i32 22
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr i8*, i8** %byte_stream, i32 23
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr i8*, i8** %byte_stream, i32 24
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr i8*, i8** %byte_stream, i32 25
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr i8*, i8** %byte_stream, i32 26
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr i8, i8* %literals, i16 0
  %55 = bitcast i8* %54 to i32*
  %literal_0 = load i32, i32* %55, align 4
  %56 = getelementptr i8, i8* %literals, i16 8
  %57 = bitcast i8* %56 to i64*
  %literal_8 = load i64, i64* %57, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %58 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %59 = call i32 @pos_start_impl(i32* %row_index_resume)
  %60 = call i32 @pos_step_impl()
  %61 = call i32 @group_buff_idx_impl()
  %62 = sext i32 %59 to i64
  %63 = getelementptr i64*, i64** %group_by_buffers, i32 %61
  %col_buffer = load i64*, i64** %63, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %64 = icmp slt i64 %62, %row_count
  br i1 %64, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %65 = sext i32 %60 to i64
  br label %.forbody

.forbody:                                         ; preds = %73, %.loop.preheader
  %pos = phi i64 [ %62, %.loop.preheader ], [ %74, %73 ]
  %66 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i8* %23, i8* %25, i8* %27, i8* %29, i8* %31, i8* %33, i8* %35, i8* %37, i8* %39, i8* %41, i8* %43, i8* %45, i8* %47, i8* %49, i8* %51, i8* %53, i64* %join_hash_tables, i8* %row_func_mgr, i64 %literal_8, i32 %literal_0)
  %67 = and i64 %pos, 63
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %69 = call i1 @check_interrupt()
  %70 = select i1 %69, i32 10, i32 %66
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %71 = phi i32 [ %70, %.interrupt_check ], [ %66, %.forbody ]
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %.error_exit, label %73

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %71, i32* %error_code)
  ret void

73:                                               ; preds = %.error_check
  %74 = add i64 %pos, %65
  %75 = icmp slt i64 %74, %row_count
  br i1 %75, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %73
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i8* %col_buf11, i8* %col_buf12, i8* %col_buf13, i8* %col_buf14, i8* %col_buf15, i8* %col_buf16, i8* %col_buf17, i8* %col_buf18, i8* %col_buf19, i8* %col_buf20, i8* %col_buf21, i8* %col_buf22, i8* %col_buf23, i8* %col_buf24, i8* %col_buf25, i8* %col_buf26, i64* %join_hash_tables, i8* %row_func_mgr, i64 %arg_literal_8, i32 %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_7, %loop_done_false, %singleton_true_5, %singleton_true_3, %singleton_true_1, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = alloca i32, i64 8, align 4
  %1 = getelementptr i32, i32* %0, i64 0
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %3 = trunc i64 %2 to i32
  store i32 %3, i32* %1, align 4
  %4 = getelementptr i32, i32* %0, i64 1
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %4, align 4
  %7 = load i64, i64* %join_hash_tables, align 8
  %8 = inttoptr i64 %7 to i8*
  %9 = bitcast i32* %0 to i8*
  %10 = call i64 @baseline_hash_join_idx_32(i8* %8, i8* %9, i64 8, i64 575734)
  %11 = icmp sge i64 %10, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %12 = load i1, i1* %remaining_outer_cond_match, align 1
  %13 = and i1 %11, %12
  br i1 %13, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %14 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i64, i64* %join_hash_tables, i64 1
  %17 = load i64, i64* %16, align 8
  %18 = sext i32 %15 to i64
  %19 = call i64 @hash_join_idx_nullable(i64 %17, i64 %18, i64 1, i64 100000, i64 -2147483648)
  %20 = icmp sge i64 %19, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %21 = load i1, i1* %remaining_outer_cond_match2, align 1
  %22 = and i1 %20, %21
  br i1 %22, label %singleton_true_3, label %exit

singleton_true_3:                                 ; preds = %singleton_true_1
  %23 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %19)
  %24 = trunc i64 %23 to i32
  %25 = getelementptr i64, i64* %join_hash_tables, i64 2
  %26 = load i64, i64* %25, align 8
  %27 = sext i32 %24 to i64
  %28 = call i64 @hash_join_idx_nullable(i64 %26, i64 %27, i64 1, i64 50000, i64 -2147483648)
  %29 = icmp sge i64 %28, 0
  %remaining_outer_cond_match4 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match4, align 1
  %30 = load i1, i1* %remaining_outer_cond_match4, align 1
  %31 = and i1 %29, %30
  br i1 %31, label %singleton_true_5, label %exit

singleton_true_5:                                 ; preds = %singleton_true_3
  %32 = getelementptr i64, i64* %join_hash_tables, i64 3
  %33 = load i64, i64* %32, align 8
  %34 = sext i32 %6 to i64
  %35 = call i64 @hash_join_idx_nullable(i64 %33, i64 %34, i64 1, i64 18000, i64 -2147483648)
  %36 = icmp sge i64 %35, 0
  %remaining_outer_cond_match6 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match6, align 1
  %37 = load i1, i1* %remaining_outer_cond_match6, align 1
  %38 = and i1 %36, %37
  br i1 %38, label %singleton_true_7, label %exit

singleton_true_7:                                 ; preds = %singleton_true_5
  %39 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %40 = trunc i64 %39 to i32
  %41 = getelementptr i64, i64* %join_hash_tables, i64 4
  %42 = load i64, i64* %41, align 8
  %43 = sext i32 %40 to i64
  %44 = call i64 @hash_join_idx_nullable(i64 %42, i64 %43, i64 1, i64 12, i64 -2147483648)
  %45 = icmp sge i64 %44, 0
  %remaining_outer_cond_match8 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match8, align 1
  %46 = load i1, i1* %remaining_outer_cond_match8, align 1
  %47 = and i1 %45, %46
  br i1 %47, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_7
  store i1 true, i1* %loop_done, align 1
  %48 = call i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %44, i8* %col_buf11, i64 %19, i8* %col_buf15, i64 %28, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %35, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i64 %pos, i64 %arg_literal_8, i32 %arg_literal_0)
  %49 = load i1, i1* %loop_done, align 1
  br i1 %49, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %48

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %extra0, i8* %col_buf11, i64 %extra1, i8* %col_buf15, i64 %extra2, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %extra3, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i64 %pos, i64 %arg_literal_8, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf24, i32 4, i64 %extra0)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf11, i32 4, i64 %extra1)
  %6 = trunc i64 %5 to i32
  %7 = call { i8*, i64 } @string_decompress(i32 %6, i64 125969249233792)
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 4, i64 %extra2)
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %9, -2147483648
  br i1 %10, label %dict_encoded_str_cast_nullcheck_true, label %dict_encoded_str_cast_nullcheck_false

dict_encoded_str_cast_nullcheck_true:             ; preds = %entry
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_false:            ; preds = %entry
  %11 = call i32 @map_string_dict_id(i32 %9, i64 %arg_literal_8, i32 -1)
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_bb:               ; preds = %dict_encoded_str_cast_nullcheck_false, %dict_encoded_str_cast_nullcheck_true
  %dict_encoded_str_cast_nullcheck_value = phi i32 [ %11, %dict_encoded_str_cast_nullcheck_false ], [ -2147483648, %dict_encoded_str_cast_nullcheck_true ]
  %12 = call { i8*, i64 } @string_decompress(i32 %dict_encoded_str_cast_nullcheck_value, i64 125969249244864)
  %13 = extractvalue { i8*, i64 } %7, 0
  %14 = extractvalue { i8*, i64 } %7, 1
  %15 = trunc i64 %14 to i32
  %16 = extractvalue { i8*, i64 } %12, 0
  %17 = extractvalue { i8*, i64 } %12, 1
  %18 = trunc i64 %17 to i32
  %19 = call i8 @string_ne_nullable(i8* %13, i32 %15, i8* %16, i32 %18, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 %4, %20
  %22 = call i64 @fixed_width_int_decode(i8* %col_buf26, i32 4, i64 %extra0)
  %23 = trunc i64 %22 to i32
  %24 = call { i8*, i64 } @string_decompress(i32 %23, i64 125969249257136)
  %25 = call i64 @fixed_width_int_decode(i8* %col_buf14, i32 4, i64 %extra2)
  %26 = trunc i64 %25 to i32
  %27 = call { i8*, i64 } @string_decompress(i32 %26, i64 125969249257920)
  %28 = extractvalue { i8*, i64 } %24, 0
  %29 = extractvalue { i8*, i64 } %24, 1
  %30 = trunc i64 %29 to i32
  %31 = extractvalue { i8*, i64 } %27, 0
  %32 = extractvalue { i8*, i64 } %27, 1
  %33 = trunc i64 %32 to i32
  %34 = call i8 @string_eq_nullable(i8* %28, i32 %30, i8* %31, i32 %33, i8 -128)
  %35 = icmp sgt i8 %34, 0
  %36 = and i1 %21, %35
  br i1 %36, label %filter_true, label %filter_false

filter_true:                                      ; preds = %dict_encoded_str_cast_nullcheck_bb
  %37 = alloca i32, i32 10, align 4
  %38 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i32, i32* %37, i32 0
  store i32 %39, i32* %40, align 4
  %41 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 4, i64 %extra1)
  %42 = trunc i64 %41 to i32
  %43 = getelementptr i32, i32* %37, i32 1
  store i32 %42, i32* %43, align 4
  %44 = call i64 @fixed_width_int_decode(i8* %col_buf23, i32 4, i64 %extra0)
  %45 = trunc i64 %44 to i32
  %46 = getelementptr i32, i32* %37, i32 2
  store i32 %45, i32* %46, align 4
  %47 = call i64 @fixed_width_int_decode(i8* %col_buf13, i32 4, i64 %extra2)
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i32, i32* %37, i32 3
  store i32 %48, i32* %49, align 4
  %50 = call i64 @fixed_width_int_decode(i8* %col_buf25, i32 4, i64 %extra0)
  %51 = trunc i64 %50 to i32
  %52 = getelementptr i32, i32* %37, i32 4
  store i32 %51, i32* %52, align 4
  %53 = call i64 @fixed_width_int_decode(i8* %col_buf19, i32 4, i64 %extra3)
  %54 = trunc i64 %53 to i32
  %55 = getelementptr i32, i32* %37, i32 5
  store i32 %54, i32* %55, align 4
  %56 = call i64 @fixed_width_int_decode(i8* %col_buf17, i32 4, i64 %extra3)
  %57 = trunc i64 %56 to i32
  %58 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %57, i32 -2147483648, i64 -9223372036854775808)
  %59 = trunc i64 %58 to i32
  %60 = getelementptr i32, i32* %37, i32 6
  store i32 %59, i32* %60, align 4
  %61 = call i64 @fixed_width_int_decode(i8* %col_buf21, i32 4, i64 %extra3)
  %62 = trunc i64 %61 to i32
  %63 = getelementptr i32, i32* %37, i32 7
  store i32 %62, i32* %63, align 4
  %64 = call i64 @fixed_width_int_decode(i8* %col_buf20, i32 4, i64 %extra3)
  %65 = trunc i64 %64 to i32
  %66 = getelementptr i32, i32* %37, i32 8
  store i32 %65, i32* %66, align 4
  %67 = call i64 @fixed_width_int_decode(i8* %col_buf18, i32 4, i64 %extra3)
  %68 = trunc i64 %67 to i32
  %69 = getelementptr i32, i32* %37, i32 9
  store i32 %68, i32* %69, align 4
  %70 = bitcast i32* %37 to i64*
  %71 = call i64* @get_group_value(i64* %group_by_buff, i32 2, i64* %70, i32 10, i32 4, i32 6)
  %72 = icmp ne i64* %71, null
  br i1 %72, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %dict_encoded_str_cast_nullcheck_bb
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %73 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %pos)
  %74 = trunc i64 %73 to i32
  %75 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %74, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr = getelementptr i64, i64* %71, i64 0
  %76 = call i64 @agg_sum_skip_val(i64* %agg_col_ptr, i64 %75, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %77 = trunc i64 %pos to i32
  %78 = sub i32 0, %77
  ret i32 %78
}

End of IR
2025-04-19T00:18:24.650489 1 38957 3 10 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:18:24.650779 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 2 ms
2025-04-19T00:18:24.650829 1 38957 3 10 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:24.650843 1 38957 3 10 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 10
	Target group by indices: -1
	Col Slot Context State
	N | P , L
	0 | 8 , 8
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 2
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:24.650913 1 38957 3 10 Execute.cpp:3137 In Executor::LaunchKernels executor 2 requested between 1 and 1 CPU slots, and was granted 1 CPU slots.
2025-04-19T00:18:24.650922 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on CPU using pool of 1 threads.
2025-04-19T00:18:24.650944 I 38957 3 61 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:24.650952 I 38957 3 61 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:24.650992 I 38957 3 61 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:24.651059 I 38957 3 61 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:24.651067 2 38957 3 61 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(5),nest_level(2)) InputDescriptor(db_id(1), table_id(6),nest_level(3)) InputDescriptor(db_id(1), table_id(12),nest_level(4)) InputDescriptor(db_id(1), table_id(16),nest_level(5))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(5)))) ra_exe_unit.scan_limit=0 num_rows=((2880404 287867 100000 50000 18000 12)) frag_offsets=((0 0 0 0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=2 device_id=0 outer_table_key=(db_id: 1, table_id: 18) scan_limit=0 start_rowid=0 num_tables=6
2025-04-19T00:18:24.651087 I 38957 3 61 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:24.651092 1 38957 3 61 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:24.762945 I 38957 3 61 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 111 ms
2025-04-19T00:18:24.762981 2 38957 3 61 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:24.762996 I 38957 3 61 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 111 ms
2025-04-19T00:18:24.763021 I 38957 3 61 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 112 ms
2025-04-19T00:18:24.763075 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 114 ms
2025-04-19T00:18:24.763136 1 38957 3 10 Execute.cpp:5202 Put estimated cardinality to the cache
2025-04-19T00:18:24.763176 I 38957 3 10 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 323 ms
2025-04-19T00:18:24.763195 3 38957 3 10 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-41, ...) exec_desc.getResult().getDataPtr()->rowCount()=0
2025-04-19T00:18:24.763201 I 38957 3 10 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 324 ms
2025-04-19T00:18:24.763208 1 38957 3 10 RelAlgExecutor.cpp:945 Executing query step 2 / 5
2025-04-19T00:18:24.763213 I 38957 3 10 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:24.763228 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 1
2025-04-19T00:18:24.763232 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]) input_col_descs_unique.size()=0 source_used_inputs.size()=1
2025-04-19T00:18:24.763284 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]) input_col_descs_unique.size()=1 source_used_inputs.size()=0
2025-04-19T00:18:24.763363 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:24.763383 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:24.763410 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:24.763427 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:24.763469 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:24.763485 I 38957 3 10 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:24.763498 3 38957 3 10 RelAlgExecutor.cpp:3692 body->getId()=33 body->toString()=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]) it==leaf_results_.end()=true
2025-04-19T00:18:24.763532 1 38957 3 10 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:24.763536 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 8131334782604460974
	Table/Col/Levels: ((db_id: 0, table_id: -41), 0, 0) 
	Projected targets: (AVG (ColumnVar (db_id: 0, table_id: -41, column_id: 0), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:24.763547 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:24.763556 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:24.764433 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:24.764446 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:24.764493 1 38957 3 10 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:18:24.764503 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:24.764745 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %result = alloca i64, align 8
  %result1 = alloca i64, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %2 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %3 = load i64, i64* %2, align 8
  store i64 %3, i64* %result, align 8
  %4 = getelementptr inbounds i64, i64* %agg_init_val, i32 1
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %result1, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %6 = sext i32 %pos_start to i64
  %7 = icmp slt i64 %6, %row_count
  br i1 %7, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %8 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %17, %.loop.preheader
  %pos = phi i64 [ %6, %.loop.preheader ], [ %18, %17 ]
  %9 = call i32 @row_func(i64* %result, i64* %result1, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i64* %join_hash_tables, i8* %row_func_mgr)
  %10 = lshr i64 %pos, 15
  %11 = and i64 %10, 32
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %13 = call i1 @check_interrupt()
  %14 = select i1 %13, i32 10, i32 %9
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %15 = phi i32 [ %14, %.interrupt_check ], [ %9, %.for.body ]
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %.error_exit, label %17

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %15, i32* %error_code)
  ret void

17:                                               ; preds = %.error_check
  %18 = add nsw i64 %pos, %8
  %19 = icmp slt i64 %18, %row_count
  br i1 %19, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %17
  %.pre.result = load i64, i64* %result, align 8
  %.pre.result2 = load i64, i64* %result1, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %20 = phi i64 [ %.pre.result2, %._crit_edge ], [ %5, %.entry ]
  %21 = phi i64 [ %.pre.result, %._crit_edge ], [ %3, %.entry ]
  %22 = getelementptr inbounds i64*, i64** %out, i32 0
  %23 = load i64*, i64** %22, align 8
  %24 = mul i32 %frag_idx, %pos_step
  %25 = add i32 %group_buff_idx, %24
  %26 = getelementptr inbounds i64, i64* %23, i32 %25
  store i64 %21, i64* %26, align 8
  %27 = getelementptr inbounds i64*, i64** %out, i32 1
  %28 = load i64*, i64** %27, align 8
  %29 = mul i32 %frag_idx, %pos_step
  %30 = add i32 %group_buff_idx, %29
  %31 = getelementptr inbounds i64, i64* %28, i32 %30
  store i64 %20, i64* %31, align 8
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %out1, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %0 = call i32 @filter_func(i8* %col_buf0, i64 %pos, i64* %out, i64* %out1)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i8* %col_buf0, i64 %pos, i64* %out, i64* %out1) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 8, i64 %pos)
  %1 = call i64 @agg_sum_skip_val(i64* %out, i64 %0, i64 -9223372036854775808)
  %2 = call i64 @agg_count_skip_val(i64* %out1, i64 %0, i64 -9223372036854775808)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:24.765156 1 38957 3 10 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:24.775640 1 38957 3 10 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.080667
2025-04-19T00:18:24.870374 1 38957 3 10 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 19.8539
2025-04-19T00:18:24.871150 1 38957 3 10 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 20.1116
2025-04-19T00:18:24.871256 1 38957 3 10 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 20.1388
2025-04-19T00:18:24.886795 1 38957 3 10 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 50 registers, 160 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:24.886812 1 38957 3 10 NvidiaKernel.cpp:188 Generated GPU binary code size: 452576 bytes
2025-04-19T00:18:24.887213 1 38957 3 10 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:24.887403 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 123 ms
2025-04-19T00:18:24.887449 1 38957 3 10 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:24.887454 1 38957 3 10 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 8
	1 | 8 , 8
	col_to_slot_map=[[0, 1]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:24.887541 1 38957 3 10 Execute.cpp:3132 In Executor::LaunchKernels executor 2 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:24.887569 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:24.887589 I 38957 3 62 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:24.887598 I 38957 3 62 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:24.887608 I 38957 3 62 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:24.887625 I 38957 3 62 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:24.887639 I 38957 3 62 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:24.887661 I 38957 3 62 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:24.887671 I 38957 3 62 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:24.887722 1 38957 3 62 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.015648 ms
2025-04-19T00:18:24.887731 1 38957 3 62 GpuInterrupt.cpp:26 Registered module 0x729180535090 on device 0
2025-04-19T00:18:24.887839 1 38957 3 62 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:18:24.887849 1 38957 3 62 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:24.887854 1 38957 3 62 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:24.887929 1 38957 3 62 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:24.888137 1 38957 3 62 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:24.888151 1 38957 3 62 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:24.888156 I 38957 3 62 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:24.888192 I 38957 3 62 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:24.888203 I 38957 3 62 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:24.888782 3 38957 3 10 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:18:24.888866 3 38957 3 10 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i64*
  %row_ptr_loaded = load i64, i64* %0, align 8
  %is_key_empty = icmp eq i64 %row_ptr_loaded, 9223372036854775807
  ret i1 %is_key_empty
}
2025-04-19T00:18:24.888897 3 38957 3 10 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_start = getelementptr i8, i8* %this_row_ptr, i32 0
  %that_targets_start = getelementptr i8, i8* %that_row_ptr, i32 0
  %this_target_0_second_slot = getelementptr i8, i8* %this_targets_start, i32 8
  %that_target_0_second_slot = getelementptr i8, i8* %that_targets_start, i32 8
  %count_dest = bitcast i8* %this_target_0_second_slot to i64*
  %0 = bitcast i8* %that_target_0_second_slot to i64*
  %that_target_0_second_slot_loaded = load i64, i64* %0, align 8
  %1 = call i64 @agg_sum(i64* %count_dest, i64 %that_target_0_second_slot_loaded)
  %sum_dest = bitcast i8* %this_targets_start to i64*
  %2 = bitcast i8* %that_targets_start to i64*
  %that_targets_start_loaded = load i64, i64* %2, align 8
  %3 = call i64 @agg_sum_skip_val(i64* %sum_dest, i64 %that_targets_start_loaded, i64 0)
  ret i32 0
}
2025-04-19T00:18:24.888934 3 38957 3 10 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %entry_idx_64 = sext i32 %that_entry_idx to i64
  %row_off_in_bytes = mul i64 %entry_idx_64, 16
  %this_row_ptr = getelementptr i8, i8* %this_buff, i64 %row_off_in_bytes
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %row_off_in_bytes
  %0 = call i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:18:24.891747 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 128 ms
2025-04-19T00:18:24.891786 I 38957 3 10 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 128 ms
2025-04-19T00:18:24.891801 I 38957 3 10 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 128 ms
2025-04-19T00:18:24.891811 1 38957 3 10 RelAlgExecutor.cpp:945 Executing query step 3 / 5
2025-04-19T00:18:24.891818 I 38957 3 10 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:24.891834 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 1
2025-04-19T00:18:24.891839 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) input_col_descs_unique.size()=0 source_used_inputs.size()=1
2025-04-19T00:18:24.891898 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) input_col_descs_unique.size()=1 source_used_inputs.size()=0
2025-04-19T00:18:24.891925 3 38957 3 10 RelAlgExecutor.cpp:4896 input_descs=(InputDescriptor(db_id(0), table_id(-33),nest_level(0)))
2025-04-19T00:18:24.891930 3 38957 3 10 RelAlgExecutor.cpp:4897 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-33),nest_level(0))))
2025-04-19T00:18:24.891937 3 38957 3 10 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"])) = 1
2025-04-19T00:18:24.892030 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:24.892050 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:24.892077 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:24.892094 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:24.892137 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:24.892153 I 38957 3 10 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:24.892164 3 38957 3 10 RelAlgExecutor.cpp:3692 body->getId()=34 body->toString()=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) it==leaf_results_.end()=true
2025-04-19T00:18:24.892199 1 38957 3 10 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:18:24.892203 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 17744443142959666771
	Table/Col/Levels: ((db_id: 0, table_id: -33), 0, 0) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:24.892212 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:24.892220 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:24.892250 1 38957 3 10 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:18:24.892911 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:24.892922 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:24.892949 1 38957 3 10 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:18:24.892958 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:24.893181 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %2 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %3 = load i64, i64* %2, align 8
  store i64 %3, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %4 = sext i32 %pos_start to i64
  %5 = icmp slt i64 %4, %row_count
  br i1 %5, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %6 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %15, %.loop.preheader
  %pos = phi i64 [ %4, %.loop.preheader ], [ %16, %15 ]
  %7 = call i32 @row_func(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i64* %join_hash_tables, i8* %row_func_mgr)
  %8 = lshr i64 %pos, 15
  %9 = and i64 %8, 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %11 = call i1 @check_interrupt()
  %12 = select i1 %11, i32 10, i32 %7
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %13 = phi i32 [ %12, %.interrupt_check ], [ %7, %.for.body ]
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %.error_exit, label %15

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %13, i32* %error_code)
  ret void

15:                                               ; preds = %.error_check
  %16 = add nsw i64 %pos, %6
  %17 = icmp slt i64 %16, %row_count
  br i1 %17, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %15
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %18 = phi i64 [ %.pre.result, %._crit_edge ], [ %3, %.entry ]
  %19 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %20 = call i64 @agg_sum_shared(i64* %19, i64 %18)
  call void @sync_threadblock()
  %21 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %21, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %0 = call i32 @filter_func(i64* %out)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i64* %out) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:24.893335 1 38957 3 10 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:24.902606 1 38957 3 10 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.078571
2025-04-19T00:18:24.967298 1 38957 3 10 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 14.6958
2025-04-19T00:18:24.968062 1 38957 3 10 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 14.9268
2025-04-19T00:18:24.968161 1 38957 3 10 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 14.9548
2025-04-19T00:18:24.984433 1 38957 3 10 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 42 registers, 136 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:24.984466 1 38957 3 10 NvidiaKernel.cpp:188 Generated GPU binary code size: 455328 bytes
2025-04-19T00:18:24.984908 1 38957 3 10 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:24.985086 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 92 ms
2025-04-19T00:18:24.985136 1 38957 3 10 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:24.985141 1 38957 3 10 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:24.985203 1 38957 3 10 Execute.cpp:3132 In Executor::LaunchKernels executor 2 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:24.985220 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:24.985248 I 38957 3 63 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:24.985257 I 38957 3 63 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:24.985268 I 38957 3 63 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:24.985304 I 38957 3 63 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:24.985316 I 38957 3 63 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:24.985341 I 38957 3 63 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:24.985352 I 38957 3 63 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:24.985399 1 38957 3 63 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.015776 ms
2025-04-19T00:18:24.985424 1 38957 3 63 GpuInterrupt.cpp:26 Registered module 0x729180556de0 on device 0
2025-04-19T00:18:24.985541 1 38957 3 63 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:18:24.985548 1 38957 3 63 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:24.985554 1 38957 3 63 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:24.985615 1 38957 3 63 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:24.985692 1 38957 3 63 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:24.985707 1 38957 3 63 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:24.985712 I 38957 3 63 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:24.985722 I 38957 3 63 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:24.985732 I 38957 3 63 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:24.985748 1 38957 3 10 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 1
2025-04-19T00:18:24.986285 3 38957 3 10 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:18:24.986370 3 38957 3 10 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i64*
  %row_ptr_loaded = load i64, i64* %0, align 8
  %is_key_empty = icmp eq i64 %row_ptr_loaded, 9223372036854775807
  ret i1 %is_key_empty
}
2025-04-19T00:18:24.986402 3 38957 3 10 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_start = getelementptr i8, i8* %this_row_ptr, i32 0
  %that_targets_start = getelementptr i8, i8* %that_row_ptr, i32 0
  %count_dest = bitcast i8* %this_targets_start to i64*
  %0 = bitcast i8* %that_targets_start to i64*
  %that_targets_start_loaded = load i64, i64* %0, align 8
  %1 = call i64 @agg_sum(i64* %count_dest, i64 %that_targets_start_loaded)
  ret i32 0
}
2025-04-19T00:18:24.986437 3 38957 3 10 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %entry_idx_64 = sext i32 %that_entry_idx to i64
  %row_off_in_bytes = mul i64 %entry_idx_64, 8
  %this_row_ptr = getelementptr i8, i8* %this_buff, i64 %row_off_in_bytes
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %row_off_in_bytes
  %0 = call i32 @reduce_one_entry(i8* %this_row_ptr, i8* %that_row_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:18:24.989041 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 96 ms
2025-04-19T00:18:24.989065 1 38957 3 10 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 1
2025-04-19T00:18:24.989084 1 38957 3 10 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:24.989090 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 17744443142959666771
	Table/Col/Levels: ((db_id: 0, table_id: -33), 0, 0) 
	Group By: NULL
	Projected targets: (* (Const 0.050000) (ColumnVar (db_id: 0, table_id: -33, column_id: 0), rte: 0 DOUBLE, type: (type=DOUBLE, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 1
	Bump Allocator: False
2025-04-19T00:18:24.989101 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:24.989115 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:24.989718 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:24.989728 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:24.989800 1 38957 3 10 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:18:24.989813 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 8 bytes
2025-04-19T00:18:24.990119 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8, i8* %literals, i16 0
  %3 = bitcast i8* %2 to double*
  %literal_0 = load double, double* %3, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %4 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %5 = call i32 @pos_start_impl(i32* %row_index_resume)
  %6 = call i32 @pos_step_impl()
  %7 = call i32 @group_buff_idx_impl()
  %8 = sext i32 %5 to i64
  %9 = getelementptr i64*, i64** %group_by_buffers, i32 %7
  %col_buffer = load i64*, i64** %9, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %10 = icmp slt i64 %8, %row_count
  br i1 %10, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %11 = sext i32 %6 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %8, %.loop.preheader ], [ %21, %filter_match ], [ %21, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %12 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i64* %join_hash_tables, i8* %row_func_mgr, double %literal_0)
  %13 = lshr i64 %pos, 15
  %14 = and i64 %13, 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %16 = call i1 @check_interrupt()
  %17 = select i1 %16, i32 10, i32 %12
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %18 = phi i32 [ %17, %.interrupt_check ], [ %12, %.forbody ]
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %.error_exit, label %20

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %18, i32* %error_code)
  ret void

20:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %21 = add i64 %pos, %11
  %22 = icmp slt i64 %21, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %23 = icmp ne i32 %crt_matched1, 0
  br i1 %23, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %20
  %24 = load i32, i32* %old_total_matched, align 4
  %25 = add i32 %24, %crt_matched1
  %limit_not_reached = icmp slt i32 %25, %4
  %26 = and i1 %22, %limit_not_reached
  br i1 %26, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %20
  br i1 %22, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i64* %join_hash_tables, i8* %row_func_mgr, double %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i8* %col_buf0, double %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i8* %col_buf0, double %arg_literal_0) #34 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %0 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %0, i32* %old_total_matched, align 4
  %1 = load i32, i32* %max_matched, align 4
  %2 = load i32, i32* %old_total_matched, align 4
  %3 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %1, i32 %2, i64 %pos, i32 2)
  %4 = icmp ne i64* %3, null
  br i1 %4, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %5 = call double @fixed_width_double_decode(i8* %col_buf0, i64 %pos)
  %6 = call double @mul_double_nullable_rhs(double %arg_literal_0, double %5, double 0x10000000000000)
  %agg_col_ptr = getelementptr i64, i64* %3, i64 0
  call void @agg_id_double_shared(i64* %agg_col_ptr, double %6)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %7 = trunc i64 %pos to i32
  %8 = sub i32 0, %7
  ret i32 %8
}

End of IR
2025-04-19T00:18:24.990354 1 38957 3 10 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:25.001100 1 38957 3 10 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.083041
2025-04-19T00:18:25.062629 1 38957 3 10 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.3397
2025-04-19T00:18:25.063387 1 38957 3 10 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.5712
2025-04-19T00:18:25.063487 1 38957 3 10 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 15.5979
2025-04-19T00:18:25.079625 1 38957 3 10 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 58 registers, 184 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:25.079659 1 38957 3 10 NvidiaKernel.cpp:188 Generated GPU binary code size: 456672 bytes
2025-04-19T00:18:25.080112 1 38957 3 10 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:25.080314 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 91 ms
2025-04-19T00:18:25.080363 1 38957 3 10 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:25.080368 1 38957 3 10 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Target group by indices: -1
	Col Slot Context State
	N | P , L
	0 | 8 , 8
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.080426 1 38957 3 10 Execute.cpp:3132 In Executor::LaunchKernels executor 2 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.080443 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.080462 I 38957 3 64 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.080471 I 38957 3 64 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.080482 I 38957 3 64 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.080497 I 38957 3 64 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.080521 I 38957 3 64 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.080548 I 38957 3 64 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:25.080555 2 38957 3 64 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-33),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-33),nest_level(0)))) ra_exe_unit.scan_limit=1 num_rows=((1)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=1 device_id=0 outer_table_key=(db_id: 0, table_id: -33) scan_limit=1 start_rowid=0 num_tables=1
2025-04-19T00:18:25.080568 I 38957 3 64 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.080606 1 38957 3 64 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.005248 ms
2025-04-19T00:18:25.080615 1 38957 3 64 GpuInterrupt.cpp:26 Registered module 0x729180544980 on device 0
2025-04-19T00:18:25.080921 1 38957 3 64 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:25.080935 1 38957 3 64 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.080940 1 38957 3 64 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.081007 1 38957 3 64 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:25.081086 1 38957 3 64 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.081099 1 38957 3 64 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.081110 I 38957 3 64 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.081131 2 38957 3 64 Execute.cpp:4139 results->rowCount()=1
2025-04-19T00:18:25.081137 I 38957 3 64 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 0 ms
2025-04-19T00:18:25.081149 I 38957 3 64 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:25.081170 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 92 ms
2025-04-19T00:18:25.081187 I 38957 3 10 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 189 ms
2025-04-19T00:18:25.081205 3 38957 3 10 RelAlgExecutor.cpp:1262 Returned from executeProject(), addTemporaryTable(-34, ...) exec_desc.getResult().getDataPtr()->rowCount()=1
2025-04-19T00:18:25.081212 I 38957 3 10 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 189 ms
2025-04-19T00:18:25.081218 1 38957 3 10 RelAlgExecutor.cpp:945 Executing query step 4 / 5
2025-04-19T00:18:25.081224 I 38957 3 10 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.081242 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 5
2025-04-19T00:18:25.081246 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=5
2025-04-19T00:18:25.081390 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 input_col_descs_unique.size()=5 source_used_inputs.size()=0
2025-04-19T00:18:25.081509 3 38957 3 10 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(0), table_id(-39),nest_level(0)))
2025-04-19T00:18:25.081517 3 38957 3 10 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(0), table_id(-39),nest_level(0))))
2025-04-19T00:18:25.081539 3 38957 3 10 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1) = 7
2025-04-19T00:18:25.081729 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:25.081750 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:25.081790 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:25.081813 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:25.081859 2 38957 3 10 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:25.081879 I 38957 3 10 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.081888 3 38957 3 10 RelAlgExecutor.cpp:3692 body->getId()=40 body->toString()=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:25.082032 1 38957 3 10 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:25.082037 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 3795522469750561310
	Table/Col/Levels: ((db_id: 0, table_id: -39), 0, 0) ((db_id: 0, table_id: -39), 1, 0) ((db_id: 0, table_id: -39), 2, 0) ((db_id: 0, table_id: -39), 5, 0) ((db_id: 0, table_id: -39), 10, 0) 
	Quals: (= (ColumnVar (db_id: 0, table_id: -39, column_id: 5), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) (CAST VARCHAR(10,0) DICT(67) (Const aquamarine) ) ) 
	Group By: (ColumnVar (db_id: 0, table_id: -39, column_id: 0), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -39, column_id: 1), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -39, column_id: 2), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 0, table_id: -39, column_id: 0), rte: 0, which_row: 3, varno: 1) , (Var (db_id: 0, table_id: -39, column_id: 1), rte: 0, which_row: 3, varno: 2) , (Var (db_id: 0, table_id: -39, column_id: 2), rte: 0, which_row: 3, varno: 3) , (SUM (ColumnVar (db_id: 0, table_id: -39, column_id: 10), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.082057 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.082067 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.082781 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.082793 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.082950 1 38957 3 10 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:18:25.082962 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 4 bytes
2025-04-19T00:18:25.083243 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !27

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !27
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8, i8* %literals, i16 0
  %11 = bitcast i8* %10 to i32*
  %literal_0 = load i32, i32* %11, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %12 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %13 = call i32 @pos_start_impl(i32* %row_index_resume)
  %14 = call i32 @pos_step_impl()
  %15 = call i32 @group_buff_idx_impl()
  %16 = sext i32 %13 to i64
  %17 = getelementptr i64*, i64** %group_by_buffers, i32 %15
  %col_buffer = load i64*, i64** %17, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %18 = icmp slt i64 %16, %row_count
  br i1 %18, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %19 = sext i32 %14 to i64
  br label %.forbody

.forbody:                                         ; preds = %28, %.loop.preheader
  %pos = phi i64 [ %16, %.loop.preheader ], [ %29, %28 ]
  %20 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_0)
  %21 = lshr i64 %pos, 15
  %22 = and i64 %21, 32
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %24 = call i1 @check_interrupt()
  %25 = select i1 %24, i32 10, i32 %20
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %26 = phi i32 [ %25, %.interrupt_check ], [ %20, %.forbody ]
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %.error_exit, label %28

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %26, i32* %error_code)
  ret void

28:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %29 = add i64 %pos, %19
  %30 = icmp slt i64 %29, %row_count
  br i1 %30, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %28
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf3, i64 %pos, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %group_by_buff, i8* %col_buf4, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf3, i64 %pos, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %group_by_buff, i8* %col_buf4, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  br i1 %4, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %5 = alloca i32, i32 3, align 4
  %6 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %7 = trunc i64 %6 to i32
  %8 = getelementptr i32, i32* %5, i32 0
  store i32 %7, i32* %8, align 4
  %9 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %10 = trunc i64 %9 to i32
  %11 = getelementptr i32, i32* %5, i32 1
  store i32 %10, i32* %11, align 4
  %12 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %13 = trunc i64 %12 to i32
  %14 = getelementptr i32, i32* %5, i32 2
  store i32 %13, i32* %14, align 4
  %15 = bitcast i32* %5 to i64*
  %16 = call i64* @get_group_value(i64* %group_by_buff, i32 16384, i64* %15, i32 3, i32 4, i32 3)
  %17 = icmp ne i64* %16, null
  br i1 %17, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %18 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 8, i64 %pos)
  %agg_col_ptr = getelementptr i64, i64* %16, i64 0
  %19 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr, i64 %18, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %20 = trunc i64 %pos to i32
  %21 = sub i32 0, %20
  ret i32 %21
}

End of IR
2025-04-19T00:18:25.083464 1 38957 3 10 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:25.095486 1 38957 3 10 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.078781
2025-04-19T00:18:25.156919 1 38957 3 10 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.363
2025-04-19T00:18:25.157663 1 38957 3 10 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.59
2025-04-19T00:18:25.157761 1 38957 3 10 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 15.6168
2025-04-19T00:18:25.174293 1 38957 3 10 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 232 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:25.174318 1 38957 3 10 NvidiaKernel.cpp:188 Generated GPU binary code size: 473440 bytes
2025-04-19T00:18:25.174807 1 38957 3 10 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:25.175086 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 93 ms
2025-04-19T00:18:25.175136 1 38957 3 10 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:25.175141 1 38957 3 10 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 3
	Target group by indices: 0,1,2,-1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 0 , 0
	3 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 16384
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.175203 1 38957 3 10 Execute.cpp:3132 In Executor::LaunchKernels executor 2 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.175220 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.175239 I 38957 3 65 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.175249 I 38957 3 65 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.175263 I 38957 3 65 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.175276 I 38957 3 65 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.175295 I 38957 3 65 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.175321 I 38957 3 65 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:25.175334 2 38957 3 65 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-39),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(0), table_id(-39),nest_level(0)))) ra_exe_unit.scan_limit=0 num_rows=((0)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=16384 device_id=0 outer_table_key=(db_id: 0, table_id: -39) scan_limit=0 start_rowid=0 num_tables=1
2025-04-19T00:18:25.175358 I 38957 3 65 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.175406 1 38957 3 65 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.018336 ms
2025-04-19T00:18:25.175416 1 38957 3 65 GpuInterrupt.cpp:26 Registered module 0x72918072b380 on device 0
2025-04-19T00:18:25.175621 1 38957 3 65 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:25.175629 1 38957 3 65 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.175634 1 38957 3 65 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.175706 1 38957 3 65 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:25.176047 1 38957 3 65 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.176064 1 38957 3 65 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.176070 I 38957 3 65 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.176628 3 38957 3 65 ResultSetReductionJIT.cpp:1262 Reduction Loop:
define i32 @reduce_loop(i8* %this_buff, i8* %that_buff, i32 %start_index, i32 %end_index, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) {
.entry:
  %iteration_count = sub i32 %end_index, %start_index
  %0 = sext i32 %iteration_count to i64
  br label %ub_iter_preheader_reduction_loop

.exit:                                            ; preds = %ub_iter_head_reduction_loop
  ret i32 0

ub_iter_preheader_reduction_loop:                 ; preds = %.entry
  %ub_iter_counter_ptr_reduction_loop = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

ub_iter_head_reduction_loop:                      ; preds = %ub_iter_advance_reduction_loop, %ub_iter_preheader_reduction_loop
  %ub_iter_counter_val_reduction_loop = load i64, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_reduction_loop, %0
  br i1 %have_more_inner_rows, label %.loop_body, label %.exit

ub_iter_advance_reduction_loop:                   ; preds = %.do_reduction2
  %1 = add i64 %ub_iter_counter_val_reduction_loop, 1
  store i64 %1, i64* %ub_iter_counter_ptr_reduction_loop, align 8
  br label %ub_iter_head_reduction_loop

.loop_body:                                       ; preds = %ub_iter_head_reduction_loop
  %relative_entry_idx = trunc i64 %ub_iter_counter_val_reduction_loop to i32
  %that_entry_idx = add i32 %relative_entry_idx, %start_index
  %2 = sext i32 %that_entry_idx to i64
  %3 = call i8 @check_interrupt_rt(i64 %2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.loop_body
  ret i32 10

.do_reduction:                                    ; preds = %.loop_body
  %5 = call i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 %5

.do_reduction2:                                   ; preds = %.do_reduction
  br label %ub_iter_advance_reduction_loop
}
2025-04-19T00:18:25.176709 3 38957 3 65 ResultSetReductionJIT.cpp:1264 Reduction Is Empty Func:
; Function Attrs: alwaysinline
define private i1 @is_empty_entry(i8* %row_ptr) #33 {
.entry:
  %0 = bitcast i8* %row_ptr to i32*
  %row_ptr_loaded = load i32, i32* %0, align 4
  %is_key_empty = icmp eq i32 %row_ptr_loaded, 2147483647
  ret i1 %is_key_empty
}
2025-04-19T00:18:25.176740 3 38957 3 65 ResultSetReductionJIT.cpp:1265 Reduction One Entry Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry(i8* %this_targets_ptr, i8* %that_targets_ptr, i8* %this_qmd, i8* %that_qmd, i8* %serialized_varlen_buffer_arg) #33 {
.entry:
  %target_1_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 0
  %target_1_first_slot1 = getelementptr i8, i8* %that_targets_ptr, i32 0
  %target_2_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 0
  %target_2_first_slot2 = getelementptr i8, i8* %that_targets_ptr, i32 0
  %target_3_first_slot = getelementptr i8, i8* %this_targets_ptr, i32 0
  %target_3_first_slot3 = getelementptr i8, i8* %that_targets_ptr, i32 0
  %sum_dest = bitcast i8* %target_3_first_slot to i64*
  %0 = bitcast i8* %target_3_first_slot3 to i64*
  %target_3_first_slot_loaded = load i64, i64* %0, align 8
  %1 = call i64 @agg_sum_skip_val(i64* %sum_dest, i64 %target_3_first_slot_loaded, i64 -9223372036854775808)
  ret i32 0
}
2025-04-19T00:18:25.176789 3 38957 3 65 ResultSetReductionJIT.cpp:1266 Reduction One Entry Idx Func:
; Function Attrs: alwaysinline
define private i32 @reduce_one_entry_idx(i8* %this_buff, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer) #33 {
.entry:
  %that_entry_idx_64 = sext i32 %that_entry_idx to i64
  %that_row_off_in_bytes = mul i64 %that_entry_idx_64, 24
  %that_row_ptr = getelementptr i8, i8* %that_buff, i64 %that_row_off_in_bytes
  %that_is_empty = call i1 @is_empty_entry(i8* %that_row_ptr)
  br i1 %that_is_empty, label %.early_return, label %.do_reduction

.early_return:                                    ; preds = %.entry
  ret i32 0

.do_reduction:                                    ; preds = %.entry
  %this_targets_ptr_out = alloca i64*, align 8
  %this_is_empty_out = alloca i8, align 1
  call void @get_group_value_reduction_rt(i8* %this_buff, i8* %that_row_ptr, i32 3, i8* %this_qmd_handle, i8* %that_buff, i32 %that_entry_idx, i32 %that_entry_count, i64 24, i64** %this_targets_ptr_out, i8* %this_is_empty_out)
  %this_targets_ptr_i64 = load i64*, i64** %this_targets_ptr_out, align 8
  %this_is_empty = load i8, i8* %this_is_empty_out, align 1
  %this_is_empty_bool = trunc i8 %this_is_empty to i1
  br i1 %this_is_empty_bool, label %.early_return1, label %.do_reduction2

.early_return1:                                   ; preds = %.do_reduction
  ret i32 0

.do_reduction2:                                   ; preds = %.do_reduction
  %this_targets_ptr = bitcast i64* %this_targets_ptr_i64 to i8*
  %that_targets_ptr = getelementptr i8, i8* %that_row_ptr, i32 16
  %0 = call i32 @reduce_one_entry(i8* %this_targets_ptr, i8* %that_targets_ptr, i8* %this_qmd_handle, i8* %that_qmd_handle, i8* %serialized_varlen_buffer)
  ret i32 %0
}
2025-04-19T00:18:25.180029 2 38957 3 65 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:25.180201 I 38957 3 65 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 4 ms
2025-04-19T00:18:25.180219 I 38957 3 65 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 4 ms
2025-04-19T00:18:25.180256 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 98 ms
2025-04-19T00:18:25.180273 I 38957 3 10 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 98 ms
2025-04-19T00:18:25.180292 3 38957 3 10 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-40, ...) exec_desc.getResult().getDataPtr()->rowCount()=0
2025-04-19T00:18:25.180299 I 38957 3 10 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 99 ms
2025-04-19T00:18:25.180305 1 38957 3 10 RelAlgExecutor.cpp:945 Executing query step 5 / 5
2025-04-19T00:18:25.180311 I 38957 3 10 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.180331 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:18:25.180336 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:18:25.181397 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=5 source_used_inputs.size()=0
2025-04-19T00:18:25.182402 3 38957 3 10 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(0), table_id(-40),nest_level(0)) InputDescriptor(db_id(0), table_id(-34),nest_level(1)))
2025-04-19T00:18:25.182408 3 38957 3 10 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-34),nest_level(1))))
2025-04-19T00:18:25.182429 2 38957 3 10 FromTableReordering.cpp:508 Table reordering starting with nest level 1
2025-04-19T00:18:25.182434 2 38957 3 10 FromTableReordering.cpp:529 Table reordering picked start nest level 1 with cost 0
2025-04-19T00:18:25.182438 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 1
2025-04-19T00:18:25.182444 2 38957 3 10 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:25.182447 2 38957 3 10 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 0
2025-04-19T00:18:25.182452 1 38957 3 10 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 0
2025-04-19T00:18:25.182457 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) to nest level 0
2025-04-19T00:18:25.182485 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 to nest level 1
2025-04-19T00:18:25.182603 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:18:25.182608 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:18:25.183563 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=5 source_used_inputs.size()=0
2025-04-19T00:18:25.184497 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) to nest level 0
2025-04-19T00:18:25.184525 1 38957 3 10 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 to nest level 1
2025-04-19T00:18:25.184636 3 38957 3 10 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:18:25.184641 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:18:25.185595 3 38957 3 10 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=5 source_used_inputs.size()=0
2025-04-19T00:18:25.186616 3 38957 3 10 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0) = 4
2025-04-19T00:18:25.187677 2 38957 3 10 QueryPlanDagExtractor.cpp:382 Add loop join access path, for LHS: 10|9|8|1|2|3|4|5|6|7|, for RHS: 11|0|1|2|3|4|5|6|7|
2025-04-19T00:18:25.187694 I 38957 3 10 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.187704 3 38957 3 10 RelAlgExecutor.cpp:3692 body->getId()=42 body->toString()=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(aquamarine type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 it==leaf_results_.end()=true
2025-04-19T00:18:25.188666 1 38957 3 10 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:18:25.188671 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 14310152858942202970
	Table/Col/Levels: ((db_id: 0, table_id: -34), 0, 0) ((db_id: 0, table_id: -40), 0, 1) ((db_id: 0, table_id: -40), 1, 1) ((db_id: 0, table_id: -40), 2, 1) ((db_id: 0, table_id: -40), 3, 1) 
	Quals: (> (CAST DOUBLE(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -40, column_id: 3), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) (ColumnVar (db_id: 0, table_id: -34, column_id: 0), rte: 0 DOUBLE, type: (type=DOUBLE, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Join Quals: 		0 INNER(Const t) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.188688 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.188697 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.188735 1 38957 3 10 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:18:25.189343 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.189359 1 38957 3 10 IRCodegen.cpp:757 Unable to build hash table, falling back to loop join: No equijoin expression found
2025-04-19T00:18:25.189366 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.189471 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 1 bytes
2025-04-19T00:18:25.189816 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8, i8* %literals, i16 0
  %literal_0 = load i8, i8* %10, align 1
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %11 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %13 = sext i32 %pos_start to i64
  %14 = icmp slt i64 %13, %row_count
  br i1 %14, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %15 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %20, %.loop.preheader
  %pos = phi i64 [ %13, %.loop.preheader ], [ %21, %20 ]
  %16 = call i32 @row_func_hoisted_literals(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr, i8 %literal_0)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %.for.body
  %17 = call i1 @check_interrupt()
  %18 = select i1 %17, i32 10, i32 %16
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %.error_exit, label %20

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %18, i32* %error_code)
  ret void

20:                                               ; preds = %.error_check
  %21 = add nsw i64 %pos, %15
  %22 = icmp slt i64 %21, %row_count
  br i1 %22, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %20
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %23 = phi i64 [ %.pre.result, %._crit_edge ], [ %12, %.entry ]
  %24 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %25 = call i64 @agg_sum_shared(i64* %24, i64 %23)
  call void @sync_threadblock()
  %26 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %26, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr, i8 %arg_literal_0) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_head_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = getelementptr i64, i64* %num_rows_per_scan, i32 1
  %num_rows_per_scan1 = load i64, i64* %0, align 8
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %num_rows_per_scan1
  br i1 %have_more_inner_rows, label %loop_body, label %exit

ub_iter_advance_:                                 ; preds = %loop_done_false
  %1 = add i64 %ub_iter_counter_val_, 1
  store i64 %1, i64* %ub_iter_counter_ptr_, align 8
  br label %ub_iter_head_

loop_body:                                        ; preds = %ub_iter_head_
  store i1 true, i1* %loop_done, align 1
  %2 = call i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %ub_iter_counter_val_, i8* %col_buf0, i64 %pos, i64* %out, i1* %loop_done, i8 %arg_literal_0)
  %3 = load i1, i1* %loop_done, align 1
  br i1 %3, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %2

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %ub_iter_counter_val_, i8* %col_buf0, i64 %pos, i64* %out, i1* %loop_done, i8 %arg_literal_0) #33 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 8, i64 %ub_iter_counter_val_)
  %1 = call double @cast_int64_t_to_double_scaled_nullable(i64 %0, i64 -9223372036854775808, double 0x10000000000000, double 1.000000e+02)
  %2 = call double @fixed_width_double_decode(i8* %col_buf0, i64 %pos)
  %3 = call i8 @gt_double_nullable(double %1, double %2, double 0x10000000000000, i8 -128)
  %4 = icmp sgt i8 %3, 0
  %5 = and i1 true, %4
  %6 = icmp sgt i8 %arg_literal_0, 0
  %7 = and i1 %5, %6
  br i1 %7, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %8 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:18:25.190115 1 38957 3 10 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:25.201256 1 38957 3 10 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.079689
2025-04-19T00:18:25.262622 1 38957 3 10 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.2835
2025-04-19T00:18:25.263378 1 38957 3 10 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.5234
2025-04-19T00:18:25.263494 1 38957 3 10 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 15.5524
2025-04-19T00:18:25.279466 1 38957 3 10 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 200 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:25.279489 1 38957 3 10 NvidiaKernel.cpp:188 Generated GPU binary code size: 459424 bytes
2025-04-19T00:18:25.279950 1 38957 3 10 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:25.280167 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 91 ms
2025-04-19T00:18:25.280219 1 38957 3 10 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:25.280224 1 38957 3 10 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.280288 1 38957 3 10 Execute.cpp:3132 In Executor::LaunchKernels executor 2 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.280305 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.280324 I 38957 3 66 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.280333 I 38957 3 66 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.280343 I 38957 3 66 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.280359 I 38957 3 66 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.280381 I 38957 3 66 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.280390 I 38957 3 66 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.280401 I 38957 3 66 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.280424 I 38957 3 66 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:25.280434 I 38957 3 66 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.280472 1 38957 3 66 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.006144 ms
2025-04-19T00:18:25.280481 1 38957 3 66 GpuInterrupt.cpp:26 Registered module 0x729180680c50 on device 0
2025-04-19T00:18:25.280594 1 38957 3 66 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:18:25.280601 1 38957 3 66 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.280614 1 38957 3 66 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.280697 1 38957 3 66 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:25.280784 1 38957 3 66 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.280800 1 38957 3 66 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.280806 I 38957 3 66 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.280815 I 38957 3 66 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:25.280825 I 38957 3 66 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:25.280841 1 38957 3 10 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 0
2025-04-19T00:18:25.280869 1 38957 3 10 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:25.280885 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 92 ms
2025-04-19T00:18:25.280897 1 38957 3 10 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 1
2025-04-19T00:18:25.280927 1 38957 3 10 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:25.280932 1 38957 3 10 Execute.cpp:2026 Executor 2 is executing work unit:
	Extracted Query Plan Dag Hash: 14310152858942202970
	Table/Col/Levels: ((db_id: 0, table_id: -34), 0, 0) ((db_id: 0, table_id: -40), 0, 1) ((db_id: 0, table_id: -40), 1, 1) ((db_id: 0, table_id: -40), 2, 1) ((db_id: 0, table_id: -40), 3, 1) 
	Quals: (> (CAST DOUBLE(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -40, column_id: 3), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) (ColumnVar (db_id: 0, table_id: -34, column_id: 0), rte: 0 DOUBLE, type: (type=DOUBLE, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Join Quals: 		0 INNER(Const t) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 0, table_id: -40, column_id: 0), rte: 1 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -40, column_id: 1), rte: 1 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -40, column_id: 2), rte: 1 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -40, column_id: 3), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 1 , 2 , 3 
	  Algorithm: Streaming Top N
	  Limit: N/A
	  Offset: 0
	Scan Limit: 1
	Bump Allocator: False
2025-04-19T00:18:25.280953 I 38957 3 10 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.280963 I 38957 3 10 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.281788 I 38957 3 10 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.281809 1 38957 3 10 IRCodegen.cpp:757 Unable to build hash table, falling back to loop join: No equijoin expression found
2025-04-19T00:18:25.281815 I 38957 3 10 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.281927 1 38957 3 10 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 1 bytes
2025-04-19T00:18:25.282307 3 38957 3 10 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8, i8* %literals, i16 0
  %literal_0 = load i8, i8* %10, align 1
  %row_count = load i64, i64* %row_count_ptr, align 8
  %11 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %12 = call i32 @pos_start_impl(i32* %row_index_resume)
  %13 = call i32 @pos_step_impl()
  %14 = call i32 @group_buff_idx_impl()
  %15 = sext i32 %12 to i64
  %16 = getelementptr i64*, i64** %group_by_buffers, i32 %14
  %col_buffer = load i64*, i64** %16, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %17 = icmp slt i64 %15, %row_count
  br i1 %17, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %18 = sext i32 %13 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %15, %.loop.preheader ], [ %24, %filter_match ], [ %24, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %19 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr, i8 %literal_0)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %.forbody
  %20 = call i1 @check_interrupt()
  %21 = select i1 %20, i32 10, i32 %19
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %.error_exit, label %23

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %21, i32* %error_code)
  ret void

23:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %24 = add i64 %pos, %18
  %25 = icmp slt i64 %24, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %26 = icmp ne i32 %crt_matched1, 0
  br i1 %26, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %23
  %27 = load i32, i32* %old_total_matched, align 4
  %28 = add i32 %27, %crt_matched1
  %limit_not_reached = icmp slt i32 %28, %11
  %29 = and i1 %25, %limit_not_reached
  br i1 %29, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %23
  br i1 %25, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr, i8 %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_head_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = getelementptr i64, i64* %num_rows_per_scan, i32 1
  %num_rows_per_scan1 = load i64, i64* %0, align 8
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %num_rows_per_scan1
  br i1 %have_more_inner_rows, label %loop_body, label %exit

ub_iter_advance_:                                 ; preds = %loop_done_false
  %1 = add i64 %ub_iter_counter_val_, 1
  store i64 %1, i64* %ub_iter_counter_ptr_, align 8
  br label %ub_iter_head_

loop_body:                                        ; preds = %ub_iter_head_
  store i1 true, i1* %loop_done, align 1
  %2 = call i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %ub_iter_counter_val_, i8* %col_buf0, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i1* %loop_done, i8 %arg_literal_0)
  %3 = load i1, i1* %loop_done, align 1
  br i1 %3, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %2

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %ub_iter_counter_val_, i8* %col_buf0, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i1* %loop_done, i8 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 8, i64 %ub_iter_counter_val_)
  %1 = call double @cast_int64_t_to_double_scaled_nullable(i64 %0, i64 -9223372036854775808, double 0x10000000000000, double 1.000000e+02)
  %2 = call double @fixed_width_double_decode(i8* %col_buf0, i64 %pos)
  %3 = call i8 @gt_double_nullable(double %1, double %2, double 0x10000000000000, i8 -128)
  %4 = icmp sgt i8 %3, 0
  %5 = and i1 true, %4
  %6 = icmp sgt i8 %arg_literal_0, 0
  %7 = and i1 %5, %6
  br i1 %7, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %8 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %8, i32* %old_total_matched, align 4
  %9 = load i32, i32* %max_matched, align 4
  %10 = load i32, i32* %old_total_matched, align 4
  %11 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %9, i32 %10, i64 %pos, i32 5)
  %12 = icmp ne i64* %11, null
  br i1 %12, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %agg_col_ptr = getelementptr i64, i64* %11, i64 0
  call void @agg_id_shared(i64* %agg_col_ptr, i64 %ub_iter_counter_val_)
  %agg_col_ptr1 = getelementptr i64, i64* %11, i64 1
  call void @agg_id_shared(i64* %agg_col_ptr1, i64 %ub_iter_counter_val_)
  %agg_col_ptr2 = getelementptr i64, i64* %11, i64 2
  call void @agg_id_shared(i64* %agg_col_ptr2, i64 %ub_iter_counter_val_)
  %agg_col_ptr3 = getelementptr i64, i64* %11, i64 3
  call void @agg_id_shared(i64* %agg_col_ptr3, i64 %0)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %13 = trunc i64 %pos to i32
  %14 = sub i32 0, %13
  ret i32 %14
}

End of IR
2025-04-19T00:18:25.282614 1 38957 3 10 NativeCodegen.cpp:281 module does not require linking against libdevice
2025-04-19T00:18:25.295209 1 38957 3 10 NvidiaKernel.cpp:144 CUDA JIT time to create link: 0.080667
2025-04-19T00:18:25.370605 1 38957 3 10 NvidiaKernel.cpp:158 CUDA JIT time to add RT fatbinary: 15.1489
2025-04-19T00:18:25.371404 1 38957 3 10 NvidiaKernel.cpp:167 CUDA JIT time to add GPU table functions library: 15.3985
2025-04-19T00:18:25.371510 1 38957 3 10 NvidiaKernel.cpp:179 CUDA JIT time to add generated code: 15.4266
2025-04-19T00:18:25.387571 1 38957 3 10 NvidiaKernel.cpp:185 CUDA Linker completed: info    : 14610 bytes gmem, 296 bytes cmem[3]
info    : Function properties for 'multifrag_query_hoisted_literals':
info    : used 64 registers, 264 stack, 0 bytes smem, 464 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z24init_group_by_buffer_gpuPlPKljjjjba':
info    : used 30 registers, 0 stack, 0 bytes smem, 386 bytes cmem[0], 0 bytes lmem
info    : Function properties for '_Z41init_columnar_group_by_buffer_gpu_wrapperPlPKljjjPKabba':
info    : used 14 registers, 0 stack, 0 bytes smem, 395 bytes cmem[0], 24 bytes cmem[2], 0 bytes lmem
2025-04-19T00:18:25.387594 1 38957 3 10 NvidiaKernel.cpp:188 Generated GPU binary code size: 461024 bytes
2025-04-19T00:18:25.388069 1 38957 3 10 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:25.388309 I 38957 3 10 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 107 ms
2025-04-19T00:18:25.388362 1 38957 3 10 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:25.388368 1 38957 3 10 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	1 | 8 , 4
	2 | 8 , 4
	3 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.388440 1 38957 3 10 Execute.cpp:3132 In Executor::LaunchKernels executor 2 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.388467 1 38957 3 10 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.388486 I 38957 3 67 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.388495 I 38957 3 67 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.388506 I 38957 3 67 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.388522 I 38957 3 67 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.388545 I 38957 3 67 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.388554 I 38957 3 67 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.388565 I 38957 3 67 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.388577 2 38957 3 67 ExecutionKernel.cpp:303 total_num_input_rows=1
2025-04-19T00:18:25.388599 I 38957 3 67 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:25.388605 2 38957 3 67 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-34),nest_level(0)) InputDescriptor(db_id(0), table_id(-40),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-34),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-40),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-40),nest_level(1))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-40),nest_level(1))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-40),nest_level(1)))) ra_exe_unit.scan_limit=1 num_rows=((1 0)) frag_offsets=((0 0)) query_exe_context->query_buffers_->num_rows_=2 query_exe_context->query_mem_desc_.getEntryCount()=1 device_id=0 outer_table_key=(db_id: 0, table_id: -34) scan_limit=1 start_rowid=0 num_tables=2
2025-04-19T00:18:25.388628 I 38957 3 67 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.388666 1 38957 3 67 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.007168 ms
2025-04-19T00:18:25.388674 1 38957 3 67 GpuInterrupt.cpp:26 Registered module 0x729180646350 on device 0
2025-04-19T00:18:25.388885 1 38957 3 67 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:25.388896 1 38957 3 67 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.388900 1 38957 3 67 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.388996 1 38957 3 67 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:25.389072 1 38957 3 67 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.389086 1 38957 3 67 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.389092 I 38957 3 67 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.389112 2 38957 3 67 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:25.389118 I 38957 3 67 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 0 ms
2025-04-19T00:18:25.389130 I 38957 3 67 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:25.389151 I 38957 3 10 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 108 ms
2025-04-19T00:18:25.389166 I 38957 3 10 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 201 ms
2025-04-19T00:18:25.389181 I 38957 3 10 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 208 ms
2025-04-19T00:18:25.389192 I 38957 3 10 measure.h:84 Timer end                      executeRelAlgSeq                    executeRelAlgSeq:  895 elapsed 1538 ms
2025-04-19T00:18:25.389227 1 38957 3 10 GpuInterrupt.cpp:227 Reset interrupt flag for CPU execution kernel on Executor 2
2025-04-19T00:18:25.389233 I 38957 3 10 measure.h:84 Timer end             executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612 elapsed 1541 ms
2025-04-19T00:18:25.389239 I 38957 3 10 measure.h:84 Timer end                    executeRelAlgQuery                  executeRelAlgQuery:  573 elapsed 1541 ms
2025-04-19T00:18:25.389246 I 38957 3 10 RelAlgExecutor.cpp:572 DEBUG_TIMER thread_id(10)
1541ms total duration for executeRelAlgQuery
  1541ms start(0ms) executeRelAlgQueryNoRetry RelAlgExecutor.cpp:613
    2ms start(0ms) Query pre-execution steps RelAlgExecutor.cpp:614
    1538ms start(2ms) executeRelAlgSeq RelAlgExecutor.cpp:896
      112ms start(2ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        112ms start(2ms) executeCompound RelAlgExecutor.cpp:2282
          111ms start(3ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(3ms) compileWorkUnit NativeCodegen.cpp:2852
            110ms start(4ms) compileWorkUnit NativeCodegen.cpp:2852
              106ms start(4ms) getInstance HashJoin.cpp:297
                106ms start(5ms) reify BaselineJoinHashTable.cpp:260
                  98ms start(5ms) getOneColumnFragment ColumnFetcher.cpp:82
                  0ms start(103ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(11)
                      6ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        6ms start(0ms) initHashTableOnGpu BaselineHashTableBuilder.h:513
                          3ms start(0ms) Initialize GPU Baseline Join Hash Table BaselineHashTableBuilder.h:535
                          2ms start(4ms) Fill GPU Baseline Join Hash Table BaselineHashTableBuilder.h:557
                    End thread(11)
              1ms start(111ms) getInstance HashJoin.cpp:297
                1ms start(111ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(111ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(12)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(12)
              0ms start(112ms) getInstance HashJoin.cpp:297
                0ms start(112ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(112ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(13)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(13)
              0ms start(113ms) getInstance HashJoin.cpp:297
                0ms start(113ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(113ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(14)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(14)
              0ms start(113ms) getInstance HashJoin.cpp:297
                0ms start(113ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(113ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(15)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(15)
      470ms start(115ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        470ms start(115ms) executeCompound RelAlgExecutor.cpp:2282
          469ms start(115ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(116ms) compileWorkUnit NativeCodegen.cpp:2852
            39ms start(116ms) compileWorkUnit NativeCodegen.cpp:2852
              3ms start(116ms) getInstance HashJoin.cpp:297
                3ms start(116ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(116ms) initHashTableOnCpuFromCache BaselineJoinHashTable.cpp:1115
                  0ms start(116ms) getOneColumnFragment ColumnFetcher.cpp:82
                  0ms start(116ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(16)
                      3ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        3ms start(0ms) initHashTableOnCpu BaselineHashTableBuilder.h:276
                          1ms start(0ms) Initialize CPU Baseline Join Hash Table BaselineHashTableBuilder.h:297
                          2ms start(1ms) Fill CPU Baseline Join Hash Table BaselineHashTableBuilder.h:361
                              New thread(17)
                              End thread(17)
                              New thread(18)
                              End thread(18)
                              New thread(19)
                              End thread(19)
                              New thread(20)
                              End thread(20)
                              New thread(21)
                              End thread(21)
                              New thread(22)
                              End thread(22)
                              New thread(23)
                              End thread(23)
                              New thread(25)
                              End thread(25)
                              New thread(24)
                              End thread(24)
                              New thread(26)
                              End thread(26)
                              New thread(27)
                              End thread(27)
                              New thread(28)
                              End thread(28)
                              New thread(29)
                              End thread(29)
                              New thread(30)
                              End thread(30)
                              New thread(31)
                              End thread(31)
                              New thread(32)
                              End thread(32)
                              New thread(36)
                              End thread(36)
                              New thread(33)
                              End thread(33)
                              New thread(35)
                              End thread(35)
                              New thread(34)
                              End thread(34)
                              New thread(37)
                              End thread(37)
                              New thread(38)
                              End thread(38)
                              New thread(39)
                              End thread(39)
                              New thread(40)
                              End thread(40)
                              New thread(41)
                              End thread(41)
                              New thread(42)
                              End thread(42)
                              New thread(43)
                              End thread(43)
                              New thread(44)
                              End thread(44)
                              New thread(45)
                              End thread(45)
                              New thread(46)
                              End thread(46)
                              New thread(47)
                              End thread(47)
                              New thread(48)
                              End thread(48)
                    End thread(16)
              1ms start(120ms) getInstance HashJoin.cpp:297
                1ms start(120ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(120ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
                  0ms start(120ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(49)
                      1ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        1ms start(0ms) initOneToOneHashTableOnCpu PerfectHashTableBuilder.h:197
                          0ms start(0ms) Initialize CPU One-To-One Perfect Hash Table PerfectHashTableBuilder.h:211
                          0ms start(0ms) Fill CPU One-To-One Perfect Hash Table PerfectHashTableBuilder.h:250
                    End thread(49)
              1ms start(122ms) getInstance HashJoin.cpp:297
                1ms start(122ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(122ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
                  0ms start(122ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(50)
                      1ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        1ms start(0ms) initOneToOneHashTableOnCpu PerfectHashTableBuilder.h:197
                          0ms start(0ms) Initialize CPU One-To-One Perfect Hash Table PerfectHashTableBuilder.h:211
                          0ms start(0ms) Fill CPU One-To-One Perfect Hash Table PerfectHashTableBuilder.h:250
                    End thread(50)
              1ms start(123ms) getInstance HashJoin.cpp:297
                1ms start(123ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(123ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
                  0ms start(123ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(51)
                      1ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        1ms start(0ms) initOneToOneHashTableOnCpu PerfectHashTableBuilder.h:197
                          0ms start(0ms) Initialize CPU One-To-One Perfect Hash Table PerfectHashTableBuilder.h:211
                          0ms start(0ms) Fill CPU One-To-One Perfect Hash Table PerfectHashTableBuilder.h:250
                    End thread(51)
              1ms start(125ms) getInstance HashJoin.cpp:297
                1ms start(125ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(125ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
                  0ms start(125ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(52)
                      1ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        1ms start(0ms) initOneToOneHashTableOnCpu PerfectHashTableBuilder.h:197
                          0ms start(0ms) Initialize CPU One-To-One Perfect Hash Table PerfectHashTableBuilder.h:211
                          0ms start(0ms) Fill CPU One-To-One Perfect Hash Table PerfectHashTableBuilder.h:250
                    End thread(52)
              0ms start(127ms) buildUnionTranslationMapToOtherProxy StringDictionaryProxy.cpp:399
                0ms start(127ms) buildIntersectionTranslationMapToOtherProxyUnlocked StringDictionaryProxy.cpp:268
                  0ms start(127ms) buildDictionaryTranslationMap StringDictionary.cpp:1861
              0ms start(127ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              26ms start(128ms) generateNativeCPUCode NativeCodegen.cpp:441
                6ms start(128ms) optimize_ir NativeCodegen.cpp:312
                19ms start(135ms) create_execution_engine NativeCodegen.cpp:421
              New thread(53)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                38ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(38ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                126ms start(38ms) executePlanWithoutGroupBy Execute.cpp:3764
                  126ms start(38ms) launchCpuCode QueryExecutionContext.cpp:575
              End thread(53)
            0ms start(321ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(321ms) reduceMultiDeviceResults Execute.cpp:1528
            30ms start(419ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(420ms) getInstance HashJoin.cpp:297
                0ms start(420ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(420ms) initHashTableOnCpuFromCache BaselineJoinHashTable.cpp:1115
              0ms start(420ms) getInstance HashJoin.cpp:297
                0ms start(420ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(420ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(420ms) getInstance HashJoin.cpp:297
                0ms start(420ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(420ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(420ms) getInstance HashJoin.cpp:297
                0ms start(420ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(420ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(420ms) getInstance HashJoin.cpp:297
                0ms start(420ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(420ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(421ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              27ms start(421ms) generateNativeCPUCode NativeCodegen.cpp:441
                6ms start(421ms) optimize_ir NativeCodegen.cpp:312
                20ms start(428ms) create_execution_engine NativeCodegen.cpp:421
              New thread(54)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                135ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  135ms start(0ms) launchCpuCode QueryExecutionContext.cpp:575
                  0ms start(135ms) getRowSet QueryExecutionContext.cpp:161
              End thread(54)
            0ms start(585ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(585ms) reduceMultiDeviceResults Execute.cpp:1528
      5ms start(585ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        5ms start(585ms) executeCompound RelAlgExecutor.cpp:2282
          4ms start(586ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(586ms) compileWorkUnit NativeCodegen.cpp:2852
            4ms start(586ms) compileWorkUnit NativeCodegen.cpp:2852
              1ms start(587ms) getInstance HashJoin.cpp:297
                1ms start(587ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(587ms) getOneColumnFragment ColumnFetcher.cpp:82
                  0ms start(587ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(55)
                      1ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        1ms start(0ms) initHashTableOnGpu BaselineHashTableBuilder.h:513
                          0ms start(0ms) Initialize GPU Baseline Join Hash Table BaselineHashTableBuilder.h:535
                          1ms start(0ms) Fill GPU Baseline Join Hash Table BaselineHashTableBuilder.h:557
                    End thread(55)
              0ms start(589ms) getInstance HashJoin.cpp:297
                0ms start(589ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(589ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(56)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(56)
              0ms start(589ms) getInstance HashJoin.cpp:297
                0ms start(589ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(589ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(57)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(57)
              0ms start(589ms) getInstance HashJoin.cpp:297
                0ms start(589ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(589ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(58)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(58)
              0ms start(590ms) getInstance HashJoin.cpp:297
                0ms start(590ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(590ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(59)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(59)
      324ms start(591ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        324ms start(591ms) executeCompound RelAlgExecutor.cpp:2282
          323ms start(591ms) executeWorkUnit RelAlgExecutor.cpp:3652
            0ms start(591ms) compileWorkUnit NativeCodegen.cpp:2852
            2ms start(591ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(592ms) getInstance HashJoin.cpp:297
                0ms start(592ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(592ms) initHashTableOnCpuFromCache BaselineJoinHashTable.cpp:1115
              0ms start(592ms) getInstance HashJoin.cpp:297
                0ms start(592ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(592ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(592ms) getInstance HashJoin.cpp:297
                0ms start(592ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(592ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(592ms) getInstance HashJoin.cpp:297
                0ms start(592ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(592ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(592ms) getInstance HashJoin.cpp:297
                0ms start(592ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(592ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(593ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              New thread(60)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                111ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  111ms start(0ms) launchCpuCode QueryExecutionContext.cpp:575
              End thread(60)
            0ms start(705ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(705ms) reduceMultiDeviceResults Execute.cpp:1528
            2ms start(800ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(801ms) getInstance HashJoin.cpp:297
                0ms start(801ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(801ms) initHashTableOnCpuFromCache BaselineJoinHashTable.cpp:1115
              0ms start(801ms) getInstance HashJoin.cpp:297
                0ms start(801ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(801ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(801ms) getInstance HashJoin.cpp:297
                0ms start(801ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(801ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(801ms) getInstance HashJoin.cpp:297
                0ms start(801ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(801ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(801ms) getInstance HashJoin.cpp:297
                0ms start(801ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(801ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(802ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              New thread(61)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                111ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  111ms start(0ms) launchCpuCode QueryExecutionContext.cpp:575
                  0ms start(112ms) getRowSet QueryExecutionContext.cpp:161
              End thread(61)
            0ms start(915ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(915ms) reduceMultiDeviceResults Execute.cpp:1528
      128ms start(915ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        128ms start(915ms) executeAggregate RelAlgExecutor.cpp:2299
          128ms start(915ms) executeWorkUnit RelAlgExecutor.cpp:3652
            123ms start(915ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(916ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              122ms start(917ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                0ms start(917ms) initializeNVPTXBackend NativeCodegen.cpp:1546
                122ms start(917ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(917ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(917ms) optimize_ir NativeCodegen.cpp:312
                  6ms start(921ms) generatePTX NativeCodegen.cpp:1507
                  111ms start(927ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(62)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(62)
            3ms start(1040ms) collectAllDeviceResults Execute.cpp:2630
              3ms start(1040ms) reduceMultiDeviceResults Execute.cpp:1528
                3ms start(1040ms) reduceMultiDeviceResultSets Execute.cpp:1602
                  2ms start(1041ms) generateNativeCPUCode NativeCodegen.cpp:441
                    1ms start(1041ms) optimize_ir NativeCodegen.cpp:312
                    0ms start(1043ms) create_execution_engine NativeCodegen.cpp:421
      189ms start(1044ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        189ms start(1044ms) executeProject RelAlgExecutor.cpp:2330
          189ms start(1044ms) executeWorkUnit RelAlgExecutor.cpp:3652
            92ms start(1044ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1045ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              91ms start(1045ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                91ms start(1045ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1045ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  2ms start(1045ms) optimize_ir NativeCodegen.cpp:312
                  6ms start(1048ms) generatePTX NativeCodegen.cpp:1507
                  81ms start(1054ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(63)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(63)
            3ms start(1138ms) collectAllDeviceResults Execute.cpp:2630
              3ms start(1138ms) reduceMultiDeviceResults Execute.cpp:1528
                3ms start(1138ms) reduceMultiDeviceResultSets Execute.cpp:1602
                  2ms start(1138ms) generateNativeCPUCode NativeCodegen.cpp:441
                    1ms start(1138ms) optimize_ir NativeCodegen.cpp:312
                    0ms start(1140ms) create_execution_engine NativeCodegen.cpp:421
            91ms start(1141ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1142ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              89ms start(1142ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                89ms start(1142ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1142ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(1142ms) optimize_ir NativeCodegen.cpp:312
                  6ms start(1146ms) generatePTX NativeCodegen.cpp:1507
                  78ms start(1153ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(64)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(64)
            0ms start(1233ms) resultsUnion Execute.cpp:1499
      99ms start(1233ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        99ms start(1233ms) executeCompound RelAlgExecutor.cpp:2282
          98ms start(1234ms) executeWorkUnit RelAlgExecutor.cpp:3652
            93ms start(1234ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1235ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              91ms start(1235ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                91ms start(1235ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1235ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(1235ms) optimize_ir NativeCodegen.cpp:312
                  7ms start(1240ms) generatePTX NativeCodegen.cpp:1507
                  78ms start(1247ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(65)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                4ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  3ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    3ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      3ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
                        3ms start(1ms) generateNativeCPUCode NativeCodegen.cpp:441
                          1ms start(1ms) optimize_ir NativeCodegen.cpp:312
                          1ms start(3ms) create_execution_engine NativeCodegen.cpp:421
              End thread(65)
            0ms start(1332ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1332ms) reduceMultiDeviceResults Execute.cpp:1528
      208ms start(1332ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        208ms start(1332ms) executeSort RelAlgExecutor.cpp:3227
          201ms start(1340ms) executeWorkUnit RelAlgExecutor.cpp:3652
            91ms start(1341ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1341ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              90ms start(1342ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                89ms start(1342ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1342ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(1342ms) optimize_ir NativeCodegen.cpp:312
                  6ms start(1346ms) generatePTX NativeCodegen.cpp:1507
                  78ms start(1353ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(66)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(66)
            0ms start(1433ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(1433ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(1433ms) reduceMultiDeviceResultSets Execute.cpp:1602
            107ms start(1433ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(1434ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              105ms start(1434ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
                105ms start(1434ms) generateNativeGPUCode NativeCodegen.cpp:1200
                  0ms start(1434ms) check_module_requires_libdevice NativeCodegen.cpp:274
                  3ms start(1435ms) optimize_ir NativeCodegen.cpp:312
                  7ms start(1439ms) generatePTX NativeCodegen.cpp:1507
                  92ms start(1447ms) ptx_to_cubin NvidiaKernel.cpp:129
              New thread(67)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(67)
            0ms start(1541ms) resultsUnion Execute.cpp:1499
2025-04-19T00:18:25.389484 I 38957 3 10 DBHandler.cpp:6148 Cache size information {"query_resultset": 0 bytes, "hash_tables": 7580856 bytes, "chunk_metadata": 0 bytes, "query_plan_dag": 368 bytes, "compiled_GPU code": 2758464 bytes, "string_dictionary": 261120 bytes}
2025-04-19T00:18:25.389488 1 38957 3 10 DBHandler.cpp:6221 jsonlog { "name": "CPU Memory Info", "TotalMB": 15841.9, "FreeMB": 9540.52, "ProcessMB": 410.16, "VirtualMB": 21616, "ProcessPlusSwapMB": 226.156, "ProcessSharedMB": 184.004, "FragmentationPercent": 44 }
2025-04-19T00:18:25.389790 I 38957 3 1 DBHandler.cpp:1303 DEBUG_TIMER thread_id(1)
2457ms total duration for sql_execute
2025-04-19T00:18:25.389844 1 38957 3 1 DBHandler.cpp:1349 Table Schema Locks:
2025-04-19T00:18:25.389851 1 38957 3 1 DBHandler.cpp:1350 Table Data Locks:
2025-04-19T00:18:25.390067 I 38957 3 1 DBHandler.cpp:1300 stdlog sql_execute 2 2458 heavyai admin 820-xJl0 {"query_str","client","nonce","execution_time_ms","total_time_ms"} {"with ssales as (select c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size ,sum(ss_net_paid) netpaid from store_sales ,store_returns ,store ,item ,customer ,customer_address where ss_ticket_number = sr_ticket_number and ss_item_sk = sr_item_sk and ss_customer_sk = c_customer_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and c_current_addr_sk = ca_address_sk and c_birth_country <> upper(ca_country) and s_zip = ca_zip and s_market_id=5 group by c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size) select c_last_name ,c_first_name ,s_store_name ,sum(netpaid) paid from ssales where i_color = 'aquamarine' group by c_last_name ,c_first_name ,s_store_name having sum(netpaid) > (select 0.05*avg(netpaid) from ssales) order by c_last_name ,c_first_name ,s_store_name ;","tcp:localhost:52676","","2433","2458"}
2025-04-19T00:18:25.390086 1 38957 3 1 DBHandler.cpp:1300 stacked_times sql_execute 2 total time 2458 ms
  parse_to_ra 125970046517248 - total time 892 ms
    processCalciteRequest 125970046517248 - total time 857 ms
      processImpl 125970046517248 - total time 856 ms
  execute_rel_alg 125970851823616 - total time 1553 ms
  convertRows 125970046517248 - total time 0 ms
2025-04-19T00:18:25.394593 I 38957 4 1 DBHandler.cpp:1300 stdlog_begin sql_execute 11 0 heavyai admin 820-xJl0 {"query_str"} {"with ssales as (select c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size ,sum(ss_net_paid) netpaid from store_sales ,store_returns ,store ,item ,customer ,customer_address where ss_ticket_number = sr_ticket_number and ss_item_sk = sr_item_sk and ss_customer_sk = c_customer_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and c_current_addr_sk = ca_address_sk and c_birth_country <> upper(ca_country) and s_zip = ca_zip and s_market_id = 5 group by c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size) select c_last_name ,c_first_name ,s_store_name ,sum(netpaid) paid from ssales where i_color = 'seashell' group by c_last_name ,c_first_name ,s_store_name having sum(netpaid) > (select 0.05*avg(netpaid) from ssales) order by c_last_name ,c_first_name ,s_store_name ;"}
2025-04-19T00:18:25.394617 1 38957 4 1 DBHandler.cpp:1205 query type: READ
2025-04-19T00:18:25.395023 I 38957 4 1 Calcite.cpp:566 User calcite catalog heavyai sql 'with ssales as (select c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size ,sum(ss_net_paid) netpaid from store_sales ,store_returns ,store ,item ,customer ,customer_address where ss_ticket_number = sr_ticket_number and ss_item_sk = sr_item_sk and ss_customer_sk = c_customer_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and c_current_addr_sk = ca_address_sk and c_birth_country <> upper(ca_country) and s_zip = ca_zip and s_market_id = 5 group by c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size) select c_last_name ,c_first_name ,s_store_name ,sum(netpaid) paid from ssales where i_color = 'seashell' group by c_last_name ,c_first_name ,s_store_name having sum(netpaid) > (select 0.05*avg(netpaid) from ssales) order by c_last_name ,c_first_name ,s_store_name ;'
2025-04-19T00:18:25.447501 I 38957 4 1 Calcite.cpp:599 Time in Thrift 1 (ms), Time in Java Calcite server 51 (ms)
2025-04-19T00:18:25.447761 1 38957 4 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer
2025-04-19T00:18:25.447789 1 38957 4 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: customer
2025-04-19T00:18:25.447800 1 38957 4 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: customer_address
2025-04-19T00:18:25.447806 1 38957 4 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: customer_address
2025-04-19T00:18:25.447812 1 38957 4 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: item
2025-04-19T00:18:25.447818 1 38957 4 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: item
2025-04-19T00:18:25.447824 1 38957 4 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store
2025-04-19T00:18:25.447830 1 38957 4 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store
2025-04-19T00:18:25.447836 1 38957 4 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_returns
2025-04-19T00:18:25.447841 1 38957 4 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store_returns
2025-04-19T00:18:25.447855 1 38957 4 1 LockMgr.h:128 Acquiring Table Schema Read Lock for table: store_sales
2025-04-19T00:18:25.447861 1 38957 4 1 LockMgr.h:217 Acquiring Table Data Read Lock for table: store_sales
2025-04-19T00:18:25.447884 I 38957 4 1 QueryDispatchQueue.h:63 Dispatching query with 0 queries in the queue.
2025-04-19T00:18:25.447917 I 38957 0 0 QueryDispatchQueue.h:100 Worker 3 running query and returning control. There are now 1 workers are running and 0 queries in the queue.
2025-04-19T00:18:25.447940 1 38957 4 68 DBHandler.cpp:6167 Table Schema Locks:
1 5 
1 6 
1 12 
1 16 
1 17 
1 18 
2025-04-19T00:18:25.447950 1 38957 4 68 DBHandler.cpp:6168 Table Data Locks:
1 5 
1 6 
1 12 
1 16 
1 17 
1 18 
2025-04-19T00:18:25.460613 W 38957 4 68 Execute.cpp:400 Source of rt_libdevice_module LLVM module is unavailable. The module will be unavailable.
2025-04-19T00:18:25.460690 2 38957 4 68 RelAlgDag.cpp:3339 Parsing query RA JSON: {
  "rels": [
    {
      "id": "0",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ss_sold_date_sk",
        "ss_sold_time_sk",
        "ss_item_sk",
        "ss_customer_sk",
        "ss_cdemo_sk",
        "ss_hdemo_sk",
        "ss_addr_sk",
        "ss_store_sk",
        "ss_promo_sk",
        "ss_ticket_number",
        "ss_quantity",
        "ss_wholesale_cost",
        "ss_list_price",
        "ss_sales_price",
        "ss_ext_discount_amt",
        "ss_ext_sales_price",
        "ss_ext_wholesale_cost",
        "ss_ext_list_price",
        "ss_ext_tax",
        "ss_coupon_amt",
        "ss_net_paid",
        "ss_net_paid_inc_tax",
        "ss_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_sales"
      ],
      "inputs": []
    },
    {
      "id": "1",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "sr_returned_date_sk",
        "sr_return_time_sk",
        "sr_item_sk",
        "sr_customer_sk",
        "sr_cdemo_sk",
        "sr_hdemo_sk",
        "sr_addr_sk",
        "sr_store_sk",
        "sr_reason_sk",
        "sr_ticket_number",
        "sr_return_quantity",
        "sr_return_amt",
        "sr_return_tax",
        "sr_return_amt_inc_tax",
        "sr_fee",
        "sr_return_ship_cost",
        "sr_refunded_cash",
        "sr_reversed_charge",
        "sr_store_credit",
        "sr_net_loss",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_returns"
      ],
      "inputs": []
    },
    {
      "id": "2",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "0",
        "1"
      ]
    },
    {
      "id": "3",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "s_store_sk",
        "s_store_id",
        "s_rec_start_date",
        "s_rec_end_date",
        "s_closed_date_sk",
        "s_store_name",
        "s_number_employees",
        "s_floor_space",
        "s_hours",
        "s_manager",
        "s_market_id",
        "s_geography_class",
        "s_market_desc",
        "s_market_manager",
        "s_division_id",
        "s_division_name",
        "s_company_id",
        "s_company_name",
        "s_street_number",
        "s_street_name",
        "s_street_type",
        "s_suite_number",
        "s_city",
        "s_county",
        "s_state",
        "s_zip",
        "s_country",
        "s_gmt_offset",
        "s_tax_percentage",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store"
      ],
      "inputs": []
    },
    {
      "id": "4",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "2",
        "3"
      ]
    },
    {
      "id": "5",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "i_item_sk",
        "i_item_id",
        "i_rec_start_date",
        "i_rec_end_date",
        "i_item_desc",
        "i_current_price",
        "i_wholesale_cost",
        "i_brand_id",
        "i_brand",
        "i_class_id",
        "i_class",
        "i_category_id",
        "i_category",
        "i_manufact_id",
        "i_manufact",
        "i_size",
        "i_formulation",
        "i_color",
        "i_units",
        "i_container",
        "i_manager_id",
        "i_product_name",
        "rowid"
      ],
      "table": [
        "heavyai",
        "item"
      ],
      "inputs": []
    },
    {
      "id": "6",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "4",
        "5"
      ]
    },
    {
      "id": "7",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "c_customer_sk",
        "c_customer_id",
        "c_current_cdemo_sk",
        "c_current_hdemo_sk",
        "c_current_addr_sk",
        "c_first_shipto_date_sk",
        "c_first_sales_date_sk",
        "c_salutation",
        "c_first_name",
        "c_last_name",
        "c_preferred_cust_flag",
        "c_birth_day",
        "c_birth_month",
        "c_birth_year",
        "c_birth_country",
        "c_login",
        "c_email_address",
        "c_last_review_date_sk",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer"
      ],
      "inputs": []
    },
    {
      "id": "8",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "6",
        "7"
      ]
    },
    {
      "id": "9",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ca_address_sk",
        "ca_address_id",
        "ca_street_number",
        "ca_street_name",
        "ca_street_type",
        "ca_suite_number",
        "ca_city",
        "ca_county",
        "ca_state",
        "ca_zip",
        "ca_country",
        "ca_gmt_offset",
        "ca_location_type",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer_address"
      ],
      "inputs": []
    },
    {
      "id": "10",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "8",
        "9"
      ]
    },
    {
      "id": "11",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 9
              },
              {
                "input": 33
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 26
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 3
              },
              {
                "input": 98
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 75
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 7
              },
              {
                "input": 45
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 102
              },
              {
                "input": 117
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "<>",
            "operands": [
              {
                "input": 112
              },
              {
                "op": "UPPER",
                "operands": [
                  {
                    "input": 127
                  }
                ],
                "type": {
                  "type": "VARCHAR",
                  "nullable": true,
                  "precision": 50
                }
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 70
              },
              {
                "input": 126
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 55
              },
              {
                "literal": 5,
                "type": "DECIMAL",
                "target_type": "INTEGER",
                "scale": 0,
                "precision": 1,
                "type_scale": 0,
                "type_precision": 10
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "12",
      "relOp": "LogicalProject",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "ca_state",
        "s_state",
        "i_color",
        "i_current_price",
        "i_manager_id",
        "i_units",
        "i_size",
        "ss_net_paid"
      ],
      "exprs": [
        {
          "input": 107
        },
        {
          "input": 106
        },
        {
          "input": 50
        },
        {
          "input": 125
        },
        {
          "input": 69
        },
        {
          "input": 92
        },
        {
          "input": 80
        },
        {
          "input": 95
        },
        {
          "input": 93
        },
        {
          "input": 90
        },
        {
          "input": 20
        }
      ]
    },
    {
      "id": "13",
      "relOp": "LogicalAggregate",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "ca_state",
        "s_state",
        "i_color",
        "i_current_price",
        "i_manager_id",
        "i_units",
        "i_size",
        "netpaid"
      ],
      "group": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            10
          ]
        }
      ]
    },
    {
      "id": "14",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "=",
        "operands": [
          {
            "input": 5
          },
          {
            "literal": "seashell",
            "type": "CHAR",
            "target_type": "VARCHAR",
            "scale": -2147483648,
            "precision": 50,
            "type_scale": -2147483648,
            "type_precision": 50
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "15",
      "relOp": "LogicalProject",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "netpaid"
      ],
      "exprs": [
        {
          "input": 0
        },
        {
          "input": 1
        },
        {
          "input": 2
        },
        {
          "input": 10
        }
      ]
    },
    {
      "id": "16",
      "relOp": "LogicalAggregate",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "paid"
      ],
      "group": [
        0,
        1,
        2
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            3
          ]
        }
      ]
    },
    {
      "id": "17",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ss_sold_date_sk",
        "ss_sold_time_sk",
        "ss_item_sk",
        "ss_customer_sk",
        "ss_cdemo_sk",
        "ss_hdemo_sk",
        "ss_addr_sk",
        "ss_store_sk",
        "ss_promo_sk",
        "ss_ticket_number",
        "ss_quantity",
        "ss_wholesale_cost",
        "ss_list_price",
        "ss_sales_price",
        "ss_ext_discount_amt",
        "ss_ext_sales_price",
        "ss_ext_wholesale_cost",
        "ss_ext_list_price",
        "ss_ext_tax",
        "ss_coupon_amt",
        "ss_net_paid",
        "ss_net_paid_inc_tax",
        "ss_net_profit",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_sales"
      ],
      "inputs": []
    },
    {
      "id": "18",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "sr_returned_date_sk",
        "sr_return_time_sk",
        "sr_item_sk",
        "sr_customer_sk",
        "sr_cdemo_sk",
        "sr_hdemo_sk",
        "sr_addr_sk",
        "sr_store_sk",
        "sr_reason_sk",
        "sr_ticket_number",
        "sr_return_quantity",
        "sr_return_amt",
        "sr_return_tax",
        "sr_return_amt_inc_tax",
        "sr_fee",
        "sr_return_ship_cost",
        "sr_refunded_cash",
        "sr_reversed_charge",
        "sr_store_credit",
        "sr_net_loss",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store_returns"
      ],
      "inputs": []
    },
    {
      "id": "19",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "17",
        "18"
      ]
    },
    {
      "id": "20",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "s_store_sk",
        "s_store_id",
        "s_rec_start_date",
        "s_rec_end_date",
        "s_closed_date_sk",
        "s_store_name",
        "s_number_employees",
        "s_floor_space",
        "s_hours",
        "s_manager",
        "s_market_id",
        "s_geography_class",
        "s_market_desc",
        "s_market_manager",
        "s_division_id",
        "s_division_name",
        "s_company_id",
        "s_company_name",
        "s_street_number",
        "s_street_name",
        "s_street_type",
        "s_suite_number",
        "s_city",
        "s_county",
        "s_state",
        "s_zip",
        "s_country",
        "s_gmt_offset",
        "s_tax_percentage",
        "rowid"
      ],
      "table": [
        "heavyai",
        "store"
      ],
      "inputs": []
    },
    {
      "id": "21",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "19",
        "20"
      ]
    },
    {
      "id": "22",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "i_item_sk",
        "i_item_id",
        "i_rec_start_date",
        "i_rec_end_date",
        "i_item_desc",
        "i_current_price",
        "i_wholesale_cost",
        "i_brand_id",
        "i_brand",
        "i_class_id",
        "i_class",
        "i_category_id",
        "i_category",
        "i_manufact_id",
        "i_manufact",
        "i_size",
        "i_formulation",
        "i_color",
        "i_units",
        "i_container",
        "i_manager_id",
        "i_product_name",
        "rowid"
      ],
      "table": [
        "heavyai",
        "item"
      ],
      "inputs": []
    },
    {
      "id": "23",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "21",
        "22"
      ]
    },
    {
      "id": "24",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "c_customer_sk",
        "c_customer_id",
        "c_current_cdemo_sk",
        "c_current_hdemo_sk",
        "c_current_addr_sk",
        "c_first_shipto_date_sk",
        "c_first_sales_date_sk",
        "c_salutation",
        "c_first_name",
        "c_last_name",
        "c_preferred_cust_flag",
        "c_birth_day",
        "c_birth_month",
        "c_birth_year",
        "c_birth_country",
        "c_login",
        "c_email_address",
        "c_last_review_date_sk",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer"
      ],
      "inputs": []
    },
    {
      "id": "25",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "23",
        "24"
      ]
    },
    {
      "id": "26",
      "relOp": "LogicalTableScan",
      "fieldNames": [
        "ca_address_sk",
        "ca_address_id",
        "ca_street_number",
        "ca_street_name",
        "ca_street_type",
        "ca_suite_number",
        "ca_city",
        "ca_county",
        "ca_state",
        "ca_zip",
        "ca_country",
        "ca_gmt_offset",
        "ca_location_type",
        "rowid"
      ],
      "table": [
        "heavyai",
        "customer_address"
      ],
      "inputs": []
    },
    {
      "id": "27",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "inner",
      "inputs": [
        "25",
        "26"
      ]
    },
    {
      "id": "28",
      "relOp": "LogicalFilter",
      "condition": {
        "op": "AND",
        "operands": [
          {
            "op": "=",
            "operands": [
              {
                "input": 9
              },
              {
                "input": 33
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 26
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 3
              },
              {
                "input": 98
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 2
              },
              {
                "input": 75
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 7
              },
              {
                "input": 45
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 102
              },
              {
                "input": 117
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "<>",
            "operands": [
              {
                "input": 112
              },
              {
                "op": "UPPER",
                "operands": [
                  {
                    "input": 127
                  }
                ],
                "type": {
                  "type": "VARCHAR",
                  "nullable": true,
                  "precision": 50
                }
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 70
              },
              {
                "input": 126
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          },
          {
            "op": "=",
            "operands": [
              {
                "input": 55
              },
              {
                "literal": 5,
                "type": "DECIMAL",
                "target_type": "INTEGER",
                "scale": 0,
                "precision": 1,
                "type_scale": 0,
                "type_precision": 10
              }
            ],
            "type": {
              "type": "BOOLEAN",
              "nullable": true
            }
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "29",
      "relOp": "LogicalProject",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "ca_state",
        "s_state",
        "i_color",
        "i_current_price",
        "i_manager_id",
        "i_units",
        "i_size",
        "ss_net_paid"
      ],
      "exprs": [
        {
          "input": 107
        },
        {
          "input": 106
        },
        {
          "input": 50
        },
        {
          "input": 125
        },
        {
          "input": 69
        },
        {
          "input": 92
        },
        {
          "input": 80
        },
        {
          "input": 95
        },
        {
          "input": 93
        },
        {
          "input": 90
        },
        {
          "input": 20
        }
      ]
    },
    {
      "id": "30",
      "relOp": "LogicalAggregate",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "ca_state",
        "s_state",
        "i_color",
        "i_current_price",
        "i_manager_id",
        "i_units",
        "i_size",
        "netpaid"
      ],
      "group": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "aggs": [
        {
          "agg": "SUM",
          "type": {
            "type": "DECIMAL",
            "nullable": true,
            "precision": 19,
            "scale": 2
          },
          "distinct": false,
          "operands": [
            10
          ]
        }
      ]
    },
    {
      "id": "31",
      "relOp": "LogicalProject",
      "fields": [
        "netpaid"
      ],
      "exprs": [
        {
          "input": 10
        }
      ]
    },
    {
      "id": "32",
      "relOp": "LogicalAggregate",
      "fields": [
        "$f0"
      ],
      "group": [],
      "aggs": [
        {
          "agg": "AVG",
          "type": {
            "type": "DOUBLE",
            "nullable": false
          },
          "distinct": false,
          "operands": [
            0
          ]
        }
      ]
    },
    {
      "id": "33",
      "relOp": "LogicalProject",
      "fields": [
        "EXPR$0"
      ],
      "exprs": [
        {
          "op": "*",
          "operands": [
            {
              "literal": 5,
              "type": "DECIMAL",
              "target_type": "DECIMAL",
              "scale": 2,
              "precision": 1,
              "type_scale": 2,
              "type_precision": 3
            },
            {
              "input": 0
            }
          ],
          "type": {
            "type": "DOUBLE",
            "nullable": false
          }
        }
      ]
    },
    {
      "id": "34",
      "relOp": "LogicalJoin",
      "condition": {
        "literal": true,
        "type": "BOOLEAN",
        "target_type": "BOOLEAN",
        "scale": -2147483648,
        "precision": 1,
        "type_scale": -2147483648,
        "type_precision": 1
      },
      "joinType": "left",
      "inputs": [
        "16",
        "33"
      ]
    },
    {
      "id": "35",
      "relOp": "LogicalFilter",
      "condition": {
        "op": ">",
        "operands": [
          {
            "input": 3
          },
          {
            "input": 4
          }
        ],
        "type": {
          "type": "BOOLEAN",
          "nullable": true
        }
      }
    },
    {
      "id": "36",
      "relOp": "LogicalProject",
      "fields": [
        "c_last_name",
        "c_first_name",
        "s_store_name",
        "paid"
      ],
      "exprs": [
        {
          "input": 0
        },
        {
          "input": 1
        },
        {
          "input": 2
        },
        {
          "input": 3
        }
      ]
    },
    {
      "id": "37",
      "relOp": "LogicalSort",
      "collation": [
        {
          "field": 0,
          "direction": "ASCENDING",
          "nulls": "LAST"
        },
        {
          "field": 1,
          "direction": "ASCENDING",
          "nulls": "LAST"
        },
        {
          "field": 2,
          "direction": "ASCENDING",
          "nulls": "LAST"
        }
      ]
    }
  ]
}
2025-04-19T00:18:25.461288 I 38957 4 68 measure.h:77 Timer start                  executeRelAlgQuery                  executeRelAlgQuery:  573
2025-04-19T00:18:25.461303 I 38957 4 68 measure.h:77 Timer start           executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612
2025-04-19T00:18:25.461754 I 38957 4 68 measure.h:77 Timer start                    executeRelAlgSeq                    executeRelAlgSeq:  895
2025-04-19T00:18:25.461764 1 38957 4 68 RelAlgExecutor.cpp:945 Executing query step 0 / 5
2025-04-19T00:18:25.461783 I 38957 4 68 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.461806 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.461812 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.461863 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.461893 3 38957 4 68 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(16),nest_level(2)) InputDescriptor(db_id(1), table_id(12),nest_level(3)) InputDescriptor(db_id(1), table_id(5),nest_level(4)) InputDescriptor(db_id(1), table_id(6),nest_level(5)))
2025-04-19T00:18:25.461899 3 38957 4 68 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(5))))
2025-04-19T00:18:25.461988 2 38957 4 68 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:25.461995 2 38957 4 68 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:18:25.462001 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:18:25.462006 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:18:25.462011 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 4
2025-04-19T00:18:25.462016 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 5
2025-04-19T00:18:25.462021 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 4, nest_level: 3
2025-04-19T00:18:25.462025 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 5, nest_level: 2
2025-04-19T00:18:25.462031 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:25.462038 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:25.462045 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:25.462051 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:25.462057 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:25.462063 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:25.462079 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.462084 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.462119 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.462150 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:25.462157 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:25.462162 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:25.462169 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:25.462174 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:25.462184 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:25.462195 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.462200 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.462232 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.462291 3 38957 4 68 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1) = 21
2025-04-19T00:18:25.462410 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:25.462429 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:25.462456 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:25.462473 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:25.462516 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:25.462537 I 38957 4 68 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.462553 3 38957 4 68 RelAlgExecutor.cpp:3692 body->getId()=39 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:25.462673 1 38957 4 68 Execute.cpp:5211 Reuse cached cardinality
2025-04-19T00:18:25.462690 1 38957 4 68 RelAlgExecutor.cpp:3898 Use cached cardinality for max_groups_buffer_entry_guess: 2
2025-04-19T00:18:25.462695 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 17559892595273414392
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 5, column_id: 10), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 5, column_id: 9), rte: 2, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 16, column_id: 6), rte: 5, which_row: 3, varno: 3) , (Var (db_id: 1, table_id: 6, column_id: 9), rte: 3, which_row: 3, varno: 4) , (Var (db_id: 1, table_id: 16, column_id: 25), rte: 5, which_row: 3, varno: 5) , (Var (db_id: 1, table_id: 12, column_id: 18), rte: 4, which_row: 3, varno: 6) , (Var (db_id: 1, table_id: 12, column_id: 6), rte: 4, which_row: 3, varno: 7) , (Var (db_id: 1, table_id: 12, column_id: 21), rte: 4, which_row: 3, varno: 8) , (Var (db_id: 1, table_id: 12, column_id: 19), rte: 4, which_row: 3, varno: 9) , (Var (db_id: 1, table_id: 12, column_id: 16), rte: 4, which_row: 3, varno: 10) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.462779 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.462809 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.463804 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.463823 1 38957 4 68 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:25.463831 1 38957 4 68 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:25.464123 1 38957 4 69 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToOne, hash table size: 6908808 Bytes, # hash entries: 575734, # entries stored in the payload buffer: 287867, rowid size: 4 Bytes
2025-04-19T00:18:25.465379 1 38957 4 68 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 1 ms
2025-04-19T00:18:25.465414 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.465440 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 14981932453577085213)
2025-04-19T00:18:25.465523 1 38957 4 70 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 100000, # entries stored in the payload buffer: 100000, hash table size : 400000 Bytes
2025-04-19T00:18:25.465714 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.465746 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.465784 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 10209159661055272150)
2025-04-19T00:18:25.465859 1 38957 4 71 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 50000, # entries stored in the payload buffer: 50000, hash table size : 200000 Bytes
2025-04-19T00:18:25.466027 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.466041 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.466065 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 5034283305709321086)
2025-04-19T00:18:25.466148 1 38957 4 72 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 18000, # entries stored in the payload buffer: 18000, hash table size : 72000 Bytes
2025-04-19T00:18:25.466327 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.466357 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.466384 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 9932780903794067887)
2025-04-19T00:18:25.466462 1 38957 4 73 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 12, # entries stored in the payload buffer: 12, hash table size : 48 Bytes
2025-04-19T00:18:25.466633 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.466654 2 38957 4 68 HashJoin.cpp:379 Built GPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 |
2025-04-19T00:18:25.466695 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 2 ms
2025-04-19T00:18:25.467100 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 4 ms
2025-04-19T00:18:25.467116 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 4 ms
2025-04-19T00:18:25.467142 I 38957 4 68 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 4 ms
2025-04-19T00:18:25.467156 I 38957 4 68 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 5 ms
2025-04-19T00:18:25.467162 I 38957 4 68 RelAlgExecutor.cpp:957 Retrying current query step 0 / 5 on CPU
2025-04-19T00:18:25.467168 I 38957 4 68 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.467183 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.467189 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.467240 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.467276 3 38957 4 68 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(16),nest_level(2)) InputDescriptor(db_id(1), table_id(12),nest_level(3)) InputDescriptor(db_id(1), table_id(5),nest_level(4)) InputDescriptor(db_id(1), table_id(6),nest_level(5)))
2025-04-19T00:18:25.467281 3 38957 4 68 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(5))))
2025-04-19T00:18:25.467347 2 38957 4 68 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:25.467354 2 38957 4 68 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:18:25.467359 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:18:25.467364 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:18:25.467369 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 4
2025-04-19T00:18:25.467374 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 5
2025-04-19T00:18:25.467378 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 4, nest_level: 3
2025-04-19T00:18:25.467383 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 5, nest_level: 2
2025-04-19T00:18:25.467389 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:25.467400 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:25.467407 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:25.467413 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:25.467419 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:25.467425 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:25.467436 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.467441 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.467476 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.467509 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:25.467516 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:25.467522 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:25.467528 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:25.467534 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:25.467540 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:25.467551 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.467556 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.467591 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.467649 3 38957 4 68 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1) = 21
2025-04-19T00:18:25.467741 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:25.467758 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:25.467795 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:25.467822 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:25.467855 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:25.467875 I 38957 4 68 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.467891 3 38957 4 68 RelAlgExecutor.cpp:3692 body->getId()=39 body->toString()=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:25.467989 1 38957 4 68 Execute.cpp:5211 Reuse cached cardinality
2025-04-19T00:18:25.468006 1 38957 4 68 RelAlgExecutor.cpp:3898 Use cached cardinality for max_groups_buffer_entry_guess: 2
2025-04-19T00:18:25.468010 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 17559892595273414392
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 1, table_id: 5, column_id: 10), rte: 2, which_row: 3, varno: 1) , (Var (db_id: 1, table_id: 5, column_id: 9), rte: 2, which_row: 3, varno: 2) , (Var (db_id: 1, table_id: 16, column_id: 6), rte: 5, which_row: 3, varno: 3) , (Var (db_id: 1, table_id: 6, column_id: 9), rte: 3, which_row: 3, varno: 4) , (Var (db_id: 1, table_id: 16, column_id: 25), rte: 5, which_row: 3, varno: 5) , (Var (db_id: 1, table_id: 12, column_id: 18), rte: 4, which_row: 3, varno: 6) , (Var (db_id: 1, table_id: 12, column_id: 6), rte: 4, which_row: 3, varno: 7) , (Var (db_id: 1, table_id: 12, column_id: 21), rte: 4, which_row: 3, varno: 8) , (Var (db_id: 1, table_id: 12, column_id: 19), rte: 4, which_row: 3, varno: 9) , (Var (db_id: 1, table_id: 12, column_id: 16), rte: 4, which_row: 3, varno: 10) , (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.468070 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.468086 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.468681 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.468692 1 38957 4 68 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:25.468697 1 38957 4 68 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:25.468733 1 38957 4 68 BaselineJoinHashTable.cpp:1116 Checking CPU hash table cache.
2025-04-19T00:18:25.468739 1 38957 4 68 HashtableRecycler.cpp:86 [Baseline Join Hashtable, CPU] Recycle item in a cache (key: 15126069940850936496)
2025-04-19T00:18:25.468749 1 38957 4 68 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 0 ms
2025-04-19T00:18:25.468762 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.468791 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 14981932453577085213)
2025-04-19T00:18:25.468806 1 38957 4 68 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:25.468811 1 38957 4 68 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 14981932453577085213)
2025-04-19T00:18:25.468820 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.468828 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.468847 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 10209159661055272150)
2025-04-19T00:18:25.468853 1 38957 4 68 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:25.468858 1 38957 4 68 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 10209159661055272150)
2025-04-19T00:18:25.468866 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.468874 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.468890 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 5034283305709321086)
2025-04-19T00:18:25.468896 1 38957 4 68 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:25.468901 1 38957 4 68 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 5034283305709321086)
2025-04-19T00:18:25.468910 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.468917 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.468935 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 9932780903794067887)
2025-04-19T00:18:25.468941 1 38957 4 68 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:25.468945 1 38957 4 68 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 9932780903794067887)
2025-04-19T00:18:25.468954 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.468958 2 38957 4 68 HashJoin.cpp:385 Built CPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 |
2025-04-19T00:18:25.468967 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.469152 1 38957 4 68 StringDictionaryProxy.cpp:354 0.00% (0 entries) from dictionary ((db_id: 1, string_dict_id: 41)) with 1 total entries ( 0 literals) translated to dictionary ((db_id: 1, string_dict_id: 41)) with 1 total entries (0 literals).
2025-04-19T00:18:25.469625 1 38957 4 68 NativeCodegen.cpp:3087 number of hoisted literals: 2 / literal buffer usage: 16 bytes
2025-04-19T00:18:25.470083 3 38957 4 68 NativeCodegen.cpp:3200 Unoptimized IR for the CPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %31

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %28, %21 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp eq i64 %28, %20
  br i1 %29, label %30, label %21, !llvm.loop !26

30:                                               ; preds = %31, %21, %14
  ret void

31:                                               ; preds = %31, %18
  %32 = phi i64 [ %40, %31 ], [ 0, %18 ]
  %33 = getelementptr inbounds i8**, i8*** %6, i64 %32
  %34 = load i8**, i8*** %33, align 8, !tbaa !27
  %35 = trunc i64 %32 to i32
  %36 = mul i32 %16, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i64, i64* %8, i64 %37
  %39 = getelementptr inbounds i64, i64* %9, i64 %37
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %35, i32* %5, i8** %34, i8* %7, i64* %38, i64* %39, i32* %10, i64* %11, i64* %12, i8* %13)
  %40 = add nuw nsw i64 %32, 1
  %41 = icmp eq i64 %40, %20
  br i1 %41, label %30, label %31, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8*, i8** %byte_stream, i32 11
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8*, i8** %byte_stream, i32 12
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr i8*, i8** %byte_stream, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr i8*, i8** %byte_stream, i32 14
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr i8*, i8** %byte_stream, i32 15
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8*, i8** %byte_stream, i32 16
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr i8*, i8** %byte_stream, i32 17
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr i8*, i8** %byte_stream, i32 18
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr i8*, i8** %byte_stream, i32 19
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr i8*, i8** %byte_stream, i32 20
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr i8*, i8** %byte_stream, i32 21
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr i8*, i8** %byte_stream, i32 22
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr i8*, i8** %byte_stream, i32 23
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr i8*, i8** %byte_stream, i32 24
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr i8*, i8** %byte_stream, i32 25
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr i8*, i8** %byte_stream, i32 26
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr i8, i8* %literals, i16 0
  %55 = bitcast i8* %54 to i32*
  %literal_0 = load i32, i32* %55, align 4
  %56 = getelementptr i8, i8* %literals, i16 8
  %57 = bitcast i8* %56 to i64*
  %literal_8 = load i64, i64* %57, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %58 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %59 = call i32 @pos_start_impl(i32* %row_index_resume)
  %60 = call i32 @pos_step_impl()
  %61 = call i32 @group_buff_idx_impl()
  %62 = sext i32 %59 to i64
  %63 = getelementptr i64*, i64** %group_by_buffers, i32 %61
  %col_buffer = load i64*, i64** %63, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %64 = icmp slt i64 %62, %row_count
  br i1 %64, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %65 = sext i32 %60 to i64
  br label %.forbody

.forbody:                                         ; preds = %73, %.loop.preheader
  %pos = phi i64 [ %62, %.loop.preheader ], [ %74, %73 ]
  %66 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i8* %23, i8* %25, i8* %27, i8* %29, i8* %31, i8* %33, i8* %35, i8* %37, i8* %39, i8* %41, i8* %43, i8* %45, i8* %47, i8* %49, i8* %51, i8* %53, i64* %join_hash_tables, i8* %row_func_mgr, i64 %literal_8, i32 %literal_0)
  %67 = and i64 %pos, 63
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %69 = call i1 @check_interrupt()
  %70 = select i1 %69, i32 10, i32 %66
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %71 = phi i32 [ %70, %.interrupt_check ], [ %66, %.forbody ]
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %.error_exit, label %73

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %71, i32* %error_code)
  ret void

73:                                               ; preds = %.error_check
  %74 = add i64 %pos, %65
  %75 = icmp slt i64 %74, %row_count
  br i1 %75, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %73
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i8* %col_buf11, i8* %col_buf12, i8* %col_buf13, i8* %col_buf14, i8* %col_buf15, i8* %col_buf16, i8* %col_buf17, i8* %col_buf18, i8* %col_buf19, i8* %col_buf20, i8* %col_buf21, i8* %col_buf22, i8* %col_buf23, i8* %col_buf24, i8* %col_buf25, i8* %col_buf26, i64* %join_hash_tables, i8* %row_func_mgr, i64 %arg_literal_8, i32 %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_7, %loop_done_false, %singleton_true_5, %singleton_true_3, %singleton_true_1, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = alloca i32, i64 8, align 4
  %1 = getelementptr i32, i32* %0, i64 0
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %3 = trunc i64 %2 to i32
  store i32 %3, i32* %1, align 4
  %4 = getelementptr i32, i32* %0, i64 1
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %4, align 4
  %7 = load i64, i64* %join_hash_tables, align 8
  %8 = inttoptr i64 %7 to i8*
  %9 = bitcast i32* %0 to i8*
  %10 = call i64 @baseline_hash_join_idx_32(i8* %8, i8* %9, i64 8, i64 575734)
  %11 = icmp sge i64 %10, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %12 = load i1, i1* %remaining_outer_cond_match, align 1
  %13 = and i1 %11, %12
  br i1 %13, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %14 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i64, i64* %join_hash_tables, i64 1
  %17 = load i64, i64* %16, align 8
  %18 = sext i32 %15 to i64
  %19 = call i64 @hash_join_idx_nullable(i64 %17, i64 %18, i64 1, i64 100000, i64 -2147483648)
  %20 = icmp sge i64 %19, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %21 = load i1, i1* %remaining_outer_cond_match2, align 1
  %22 = and i1 %20, %21
  br i1 %22, label %singleton_true_3, label %exit

singleton_true_3:                                 ; preds = %singleton_true_1
  %23 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %19)
  %24 = trunc i64 %23 to i32
  %25 = getelementptr i64, i64* %join_hash_tables, i64 2
  %26 = load i64, i64* %25, align 8
  %27 = sext i32 %24 to i64
  %28 = call i64 @hash_join_idx_nullable(i64 %26, i64 %27, i64 1, i64 50000, i64 -2147483648)
  %29 = icmp sge i64 %28, 0
  %remaining_outer_cond_match4 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match4, align 1
  %30 = load i1, i1* %remaining_outer_cond_match4, align 1
  %31 = and i1 %29, %30
  br i1 %31, label %singleton_true_5, label %exit

singleton_true_5:                                 ; preds = %singleton_true_3
  %32 = getelementptr i64, i64* %join_hash_tables, i64 3
  %33 = load i64, i64* %32, align 8
  %34 = sext i32 %6 to i64
  %35 = call i64 @hash_join_idx_nullable(i64 %33, i64 %34, i64 1, i64 18000, i64 -2147483648)
  %36 = icmp sge i64 %35, 0
  %remaining_outer_cond_match6 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match6, align 1
  %37 = load i1, i1* %remaining_outer_cond_match6, align 1
  %38 = and i1 %36, %37
  br i1 %38, label %singleton_true_7, label %exit

singleton_true_7:                                 ; preds = %singleton_true_5
  %39 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %40 = trunc i64 %39 to i32
  %41 = getelementptr i64, i64* %join_hash_tables, i64 4
  %42 = load i64, i64* %41, align 8
  %43 = sext i32 %40 to i64
  %44 = call i64 @hash_join_idx_nullable(i64 %42, i64 %43, i64 1, i64 12, i64 -2147483648)
  %45 = icmp sge i64 %44, 0
  %remaining_outer_cond_match8 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match8, align 1
  %46 = load i1, i1* %remaining_outer_cond_match8, align 1
  %47 = and i1 %45, %46
  br i1 %47, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_7
  store i1 true, i1* %loop_done, align 1
  %48 = call i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %44, i8* %col_buf11, i64 %19, i8* %col_buf15, i64 %28, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %35, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i64 %pos, i64 %arg_literal_8, i32 %arg_literal_0)
  %49 = load i1, i1* %loop_done, align 1
  br i1 %49, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %48

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %extra0, i8* %col_buf11, i64 %extra1, i8* %col_buf15, i64 %extra2, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %extra3, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i64 %pos, i64 %arg_literal_8, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf24, i32 4, i64 %extra0)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf11, i32 4, i64 %extra1)
  %6 = trunc i64 %5 to i32
  %7 = call { i8*, i64 } @string_decompress(i32 %6, i64 125963610777744)
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 4, i64 %extra2)
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %9, -2147483648
  br i1 %10, label %dict_encoded_str_cast_nullcheck_true, label %dict_encoded_str_cast_nullcheck_false

dict_encoded_str_cast_nullcheck_true:             ; preds = %entry
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_false:            ; preds = %entry
  %11 = call i32 @map_string_dict_id(i32 %9, i64 %arg_literal_8, i32 -1)
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_bb:               ; preds = %dict_encoded_str_cast_nullcheck_false, %dict_encoded_str_cast_nullcheck_true
  %dict_encoded_str_cast_nullcheck_value = phi i32 [ %11, %dict_encoded_str_cast_nullcheck_false ], [ -2147483648, %dict_encoded_str_cast_nullcheck_true ]
  %12 = call { i8*, i64 } @string_decompress(i32 %dict_encoded_str_cast_nullcheck_value, i64 125963610789328)
  %13 = extractvalue { i8*, i64 } %7, 0
  %14 = extractvalue { i8*, i64 } %7, 1
  %15 = trunc i64 %14 to i32
  %16 = extractvalue { i8*, i64 } %12, 0
  %17 = extractvalue { i8*, i64 } %12, 1
  %18 = trunc i64 %17 to i32
  %19 = call i8 @string_ne_nullable(i8* %13, i32 %15, i8* %16, i32 %18, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 %4, %20
  %22 = call i64 @fixed_width_int_decode(i8* %col_buf26, i32 4, i64 %extra0)
  %23 = trunc i64 %22 to i32
  %24 = call { i8*, i64 } @string_decompress(i32 %23, i64 125963610319120)
  %25 = call i64 @fixed_width_int_decode(i8* %col_buf14, i32 4, i64 %extra2)
  %26 = trunc i64 %25 to i32
  %27 = call { i8*, i64 } @string_decompress(i32 %26, i64 125963610319904)
  %28 = extractvalue { i8*, i64 } %24, 0
  %29 = extractvalue { i8*, i64 } %24, 1
  %30 = trunc i64 %29 to i32
  %31 = extractvalue { i8*, i64 } %27, 0
  %32 = extractvalue { i8*, i64 } %27, 1
  %33 = trunc i64 %32 to i32
  %34 = call i8 @string_eq_nullable(i8* %28, i32 %30, i8* %31, i32 %33, i8 -128)
  %35 = icmp sgt i8 %34, 0
  %36 = and i1 %21, %35
  br i1 %36, label %filter_true, label %filter_false

filter_true:                                      ; preds = %dict_encoded_str_cast_nullcheck_bb
  %37 = alloca i32, i32 10, align 4
  %38 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i32, i32* %37, i32 0
  store i32 %39, i32* %40, align 4
  %41 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 4, i64 %extra1)
  %42 = trunc i64 %41 to i32
  %43 = getelementptr i32, i32* %37, i32 1
  store i32 %42, i32* %43, align 4
  %44 = call i64 @fixed_width_int_decode(i8* %col_buf23, i32 4, i64 %extra0)
  %45 = trunc i64 %44 to i32
  %46 = getelementptr i32, i32* %37, i32 2
  store i32 %45, i32* %46, align 4
  %47 = call i64 @fixed_width_int_decode(i8* %col_buf13, i32 4, i64 %extra2)
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i32, i32* %37, i32 3
  store i32 %48, i32* %49, align 4
  %50 = call i64 @fixed_width_int_decode(i8* %col_buf25, i32 4, i64 %extra0)
  %51 = trunc i64 %50 to i32
  %52 = getelementptr i32, i32* %37, i32 4
  store i32 %51, i32* %52, align 4
  %53 = call i64 @fixed_width_int_decode(i8* %col_buf19, i32 4, i64 %extra3)
  %54 = trunc i64 %53 to i32
  %55 = getelementptr i32, i32* %37, i32 5
  store i32 %54, i32* %55, align 4
  %56 = call i64 @fixed_width_int_decode(i8* %col_buf17, i32 4, i64 %extra3)
  %57 = trunc i64 %56 to i32
  %58 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %57, i32 -2147483648, i64 -9223372036854775808)
  %59 = trunc i64 %58 to i32
  %60 = getelementptr i32, i32* %37, i32 6
  store i32 %59, i32* %60, align 4
  %61 = call i64 @fixed_width_int_decode(i8* %col_buf21, i32 4, i64 %extra3)
  %62 = trunc i64 %61 to i32
  %63 = getelementptr i32, i32* %37, i32 7
  store i32 %62, i32* %63, align 4
  %64 = call i64 @fixed_width_int_decode(i8* %col_buf20, i32 4, i64 %extra3)
  %65 = trunc i64 %64 to i32
  %66 = getelementptr i32, i32* %37, i32 8
  store i32 %65, i32* %66, align 4
  %67 = call i64 @fixed_width_int_decode(i8* %col_buf18, i32 4, i64 %extra3)
  %68 = trunc i64 %67 to i32
  %69 = getelementptr i32, i32* %37, i32 9
  store i32 %68, i32* %69, align 4
  %70 = bitcast i32* %37 to i64*
  %71 = call i64* @get_group_value(i64* %group_by_buff, i32 2, i64* %70, i32 10, i32 4, i32 6)
  %72 = icmp ne i64* %71, null
  br i1 %72, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %dict_encoded_str_cast_nullcheck_bb
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %73 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %pos)
  %74 = trunc i64 %73 to i32
  %75 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %74, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr = getelementptr i64, i64* %71, i64 0
  %76 = call i64 @agg_sum_skip_val(i64* %agg_col_ptr, i64 %75, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %77 = trunc i64 %pos to i32
  %78 = sub i32 0, %77
  ret i32 %78
}

End of IR
2025-04-19T00:18:25.501674 1 38957 4 68 CodeCacheAccessor.cpp:44 Add compiled kernel to code cache
2025-04-19T00:18:25.501993 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 33 ms
2025-04-19T00:18:25.502050 1 38957 4 68 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:25.502056 1 38957 4 68 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 10
	Target group by indices: 0,1,2,3,4,5,6,7,8,9,-1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 0 , 0
	3 | 0 , 0
	4 | 0 , 0
	5 | 0 , 0
	6 | 0 , 0
	7 | 0 , 0
	8 | 0 , 0
	9 | 0 , 0
	10 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 2
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.502133 1 38957 4 68 Execute.cpp:3137 In Executor::LaunchKernels executor 3 requested between 1 and 1 CPU slots, and was granted 1 CPU slots.
2025-04-19T00:18:25.502143 1 38957 4 68 Execute.cpp:2977 Launching 1 kernels for query on CPU using pool of 1 threads.
2025-04-19T00:18:25.502165 I 38957 4 74 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.502173 I 38957 4 74 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.502222 I 38957 4 74 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.502316 I 38957 4 74 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:25.502332 2 38957 4 74 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(5),nest_level(2)) InputDescriptor(db_id(1), table_id(6),nest_level(3)) InputDescriptor(db_id(1), table_id(12),nest_level(4)) InputDescriptor(db_id(1), table_id(16),nest_level(5))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(5)))) ra_exe_unit.scan_limit=0 num_rows=((2880404 287867 100000 50000 18000 12)) frag_offsets=((0 0 0 0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=2 device_id=0 outer_table_key=(db_id: 1, table_id: 18) scan_limit=0 start_rowid=0 num_tables=6
2025-04-19T00:18:25.502354 I 38957 4 74 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:25.502359 1 38957 4 74 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:25.621853 I 38957 4 74 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 119 ms
2025-04-19T00:18:25.621892 2 38957 4 74 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:25.621909 I 38957 4 74 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 119 ms
2025-04-19T00:18:25.621941 I 38957 4 74 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 119 ms
2025-04-19T00:18:25.621994 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 153 ms
2025-04-19T00:18:25.622072 I 38957 4 68 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 154 ms
2025-04-19T00:18:25.622099 3 38957 4 68 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-39, ...) exec_desc.getResult().getDataPtr()->rowCount()=0
2025-04-19T00:18:25.622106 I 38957 4 68 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 154 ms
2025-04-19T00:18:25.622113 1 38957 4 68 RelAlgExecutor.cpp:945 Executing query step 1 / 5
2025-04-19T00:18:25.622119 I 38957 4 68 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.622150 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.622156 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.622203 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.622229 3 38957 4 68 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(16),nest_level(2)) InputDescriptor(db_id(1), table_id(12),nest_level(3)) InputDescriptor(db_id(1), table_id(5),nest_level(4)) InputDescriptor(db_id(1), table_id(6),nest_level(5)))
2025-04-19T00:18:25.622235 3 38957 4 68 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(5))))
2025-04-19T00:18:25.622344 2 38957 4 68 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:25.622352 2 38957 4 68 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:18:25.622356 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:18:25.622363 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:18:25.622366 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 4
2025-04-19T00:18:25.622371 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 5
2025-04-19T00:18:25.622376 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 4, nest_level: 3
2025-04-19T00:18:25.622380 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 5, nest_level: 2
2025-04-19T00:18:25.622387 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:25.622395 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:25.622401 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:25.622407 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:25.622414 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:25.622424 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:25.622436 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.622441 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.622471 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.622496 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:25.622502 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:25.622508 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:25.622514 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:25.622525 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:25.622531 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:25.622543 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.622548 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.622575 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.622629 3 38957 4 68 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1) = 21
2025-04-19T00:18:25.622738 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:25.622759 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:25.622796 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:25.622823 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:25.622869 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:25.622891 I 38957 4 68 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.622908 3 38957 4 68 RelAlgExecutor.cpp:3692 body->getId()=41 body->toString()=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:25.622995 1 38957 4 68 Execute.cpp:5211 Reuse cached cardinality
2025-04-19T00:18:25.623010 1 38957 4 68 RelAlgExecutor.cpp:3898 Use cached cardinality for max_groups_buffer_entry_guess: 2
2025-04-19T00:18:25.623015 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 15106331477019059735
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.623073 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.623092 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.623894 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.623910 1 38957 4 68 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:25.623915 1 38957 4 68 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:25.624183 1 38957 4 75 BaselineHashTable.h:110 Initialize a GPU baseline hash table for device 0 with join type OneToOne, hash table size: 6908808 Bytes, # hash entries: 575734, # entries stored in the payload buffer: 287867, rowid size: 4 Bytes
2025-04-19T00:18:25.625426 1 38957 4 68 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 1 ms
2025-04-19T00:18:25.625444 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.625472 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 14981932453577085213)
2025-04-19T00:18:25.625558 1 38957 4 76 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 100000, # entries stored in the payload buffer: 100000, hash table size : 400000 Bytes
2025-04-19T00:18:25.625753 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.625766 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.625817 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 10209159661055272150)
2025-04-19T00:18:25.625900 1 38957 4 77 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 50000, # entries stored in the payload buffer: 50000, hash table size : 200000 Bytes
2025-04-19T00:18:25.626077 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.626110 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.626132 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 5034283305709321086)
2025-04-19T00:18:25.626205 1 38957 4 78 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 18000, # entries stored in the payload buffer: 18000, hash table size : 72000 Bytes
2025-04-19T00:18:25.626389 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.626415 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.626439 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 9932780903794067887)
2025-04-19T00:18:25.626496 1 38957 4 79 PerfectHashTable.h:159 Initialize a GPU perfect join hash table for device 0, join type OneToOne, # hash entries: 12, # entries stored in the payload buffer: 12, hash table size : 48 Bytes
2025-04-19T00:18:25.626653 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.626661 2 38957 4 68 HashJoin.cpp:379 Built GPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 35989504 3 |
2025-04-19T00:18:25.626687 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 2 ms
2025-04-19T00:18:25.627097 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 4 ms
2025-04-19T00:18:25.627112 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 4 ms
2025-04-19T00:18:25.627140 I 38957 4 68 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 4 ms
2025-04-19T00:18:25.627158 I 38957 4 68 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 5 ms
2025-04-19T00:18:25.627164 I 38957 4 68 RelAlgExecutor.cpp:957 Retrying current query step 1 / 5 on CPU
2025-04-19T00:18:25.627171 I 38957 4 68 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.627194 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.627199 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.627252 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.627277 3 38957 4 68 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(16),nest_level(2)) InputDescriptor(db_id(1), table_id(12),nest_level(3)) InputDescriptor(db_id(1), table_id(5),nest_level(4)) InputDescriptor(db_id(1), table_id(6),nest_level(5)))
2025-04-19T00:18:25.627282 3 38957 4 68 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(5))))
2025-04-19T00:18:25.627355 2 38957 4 68 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:25.627362 2 38957 4 68 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 100
2025-04-19T00:18:25.627368 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 0
2025-04-19T00:18:25.627373 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 1
2025-04-19T00:18:25.627378 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 2, nest_level: 4
2025-04-19T00:18:25.627382 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 3, nest_level: 5
2025-04-19T00:18:25.627387 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 4, nest_level: 3
2025-04-19T00:18:25.627391 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 5, nest_level: 2
2025-04-19T00:18:25.627398 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:25.627405 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:25.627412 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:25.627418 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:25.627424 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:25.627430 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:25.627446 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.627451 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.627481 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.627507 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_sales, ["ss_sold_date_sk", "ss_sold_time_sk", "ss_item_sk", "ss_customer_sk", "ss_cdemo_sk", "ss_hdemo_sk", "ss_addr_sk", "ss_store_sk", "ss_promo_sk", "ss_ticket_number", "ss_quantity", "ss_wholesale_cost", "ss_list_price", "ss_sales_price", "ss_ext_discount_amt", "ss_ext_sales_price", "ss_ext_wholesale_cost", "ss_ext_list_price", "ss_ext_tax", "ss_coupon_amt", "ss_net_paid", "ss_net_paid_inc_tax", "ss_net_profit", "rowid"]) to nest level 0
2025-04-19T00:18:25.627513 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store_returns, ["sr_returned_date_sk", "sr_return_time_sk", "sr_item_sk", "sr_customer_sk", "sr_cdemo_sk", "sr_hdemo_sk", "sr_addr_sk", "sr_store_sk", "sr_reason_sk", "sr_ticket_number", "sr_return_quantity", "sr_return_amt", "sr_return_tax", "sr_return_amt_inc_tax", "sr_fee", "sr_return_ship_cost", "sr_refunded_cash", "sr_reversed_charge", "sr_store_credit", "sr_net_loss", "rowid"]) to nest level 1
2025-04-19T00:18:25.627519 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer, ["c_customer_sk", "c_customer_id", "c_current_cdemo_sk", "c_current_hdemo_sk", "c_current_addr_sk", "c_first_shipto_date_sk", "c_first_sales_date_sk", "c_salutation", "c_first_name", "c_last_name", "c_preferred_cust_flag", "c_birth_day", "c_birth_month", "c_birth_year", "c_birth_country", "c_login", "c_email_address", "c_last_review_date_sk", "rowid"]) to nest level 2
2025-04-19T00:18:25.627525 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(customer_address, ["ca_address_sk", "ca_address_id", "ca_street_number", "ca_street_name", "ca_street_type", "ca_suite_number", "ca_city", "ca_county", "ca_state", "ca_zip", "ca_country", "ca_gmt_offset", "ca_location_type", "rowid"]) to nest level 3
2025-04-19T00:18:25.627531 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(item, ["i_item_sk", "i_item_id", "i_rec_start_date", "i_rec_end_date", "i_item_desc", "i_current_price", "i_wholesale_cost", "i_brand_id", "i_brand", "i_class_id", "i_class", "i_category_id", "i_category", "i_manufact_id", "i_manufact", "i_size", "i_formulation", "i_color", "i_units", "i_container", "i_manager_id", "i_product_name", "rowid"]) to nest level 4
2025-04-19T00:18:25.627540 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelScan(store, ["s_store_sk", "s_store_id", "s_rec_start_date", "s_rec_end_date", "s_closed_date_sk", "s_store_name", "s_number_employees", "s_floor_space", "s_hours", "s_manager", "s_market_id", "s_geography_class", "s_market_desc", "s_market_manager", "s_division_id", "s_division_name", "s_company_id", "s_company_name", "s_street_number", "s_street_name", "s_street_type", "s_suite_number", "s_city", "s_county", "s_state", "s_zip", "s_country", "s_gmt_offset", "s_tax_percentage", "rowid"]) to nest level 5
2025-04-19T00:18:25.627551 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 11
2025-04-19T00:18:25.627556 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=11
2025-04-19T00:18:25.627583 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 input_col_descs_unique.size()=11 source_used_inputs.size()=17
2025-04-19T00:18:25.627636 3 38957 4 68 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1) = 21
2025-04-19T00:18:25.627722 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:25.627741 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:25.627766 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:25.627794 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:25.627845 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:25.627866 I 38957 4 68 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.627882 3 38957 4 68 RelAlgExecutor.cpp:3692 body->getId()=41 body->toString()=RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:25.627966 1 38957 4 68 Execute.cpp:5211 Reuse cached cardinality
2025-04-19T00:18:25.627982 1 38957 4 68 RelAlgExecutor.cpp:3898 Use cached cardinality for max_groups_buffer_entry_guess: 2
2025-04-19T00:18:25.627986 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 15106331477019059735
	Table/Col/Levels: ((db_id: 1, table_id: 18), 3, 0) ((db_id: 1, table_id: 18), 4, 0) ((db_id: 1, table_id: 18), 8, 0) ((db_id: 1, table_id: 18), 10, 0) ((db_id: 1, table_id: 18), 21, 0) ((db_id: 1, table_id: 17), 3, 1) ((db_id: 1, table_id: 17), 10, 1) ((db_id: 1, table_id: 5), 1, 2) ((db_id: 1, table_id: 5), 5, 2) ((db_id: 1, table_id: 5), 9, 2) ((db_id: 1, table_id: 5), 10, 2) ((db_id: 1, table_id: 5), 15, 2) ((db_id: 1, table_id: 6), 1, 3) ((db_id: 1, table_id: 6), 9, 3) ((db_id: 1, table_id: 6), 10, 3) ((db_id: 1, table_id: 6), 11, 3) ((db_id: 1, table_id: 12), 1, 4) ((db_id: 1, table_id: 12), 6, 4) ((db_id: 1, table_id: 12), 16, 4) ((db_id: 1, table_id: 12), 18, 4) ((db_id: 1, table_id: 12), 19, 4) ((db_id: 1, table_id: 12), 21, 4) ((db_id: 1, table_id: 16), 1, 5) ((db_id: 1, table_id: 16), 6, 5) ((db_id: 1, table_id: 16), 11, 5) ((db_id: 1, table_id: 16), 25, 5) ((db_id: 1, table_id: 16), 26, 5) 
	Join Quals: 		0 INNER(= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 		1 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 4), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 5, column_id: 1), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		2 INNER(= (ColumnVar (db_id: 1, table_id: 5, column_id: 5), rte: 2 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 6, column_id: 1), rte: 3 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (<> (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 5, column_id: 15), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=29, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 29), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (UPPER (ColumnVar (db_id: 1, table_id: 6, column_id: 11), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=41, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 41), uses_flatbuffer=0)) )) ) 		3 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 12, column_id: 1), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 		4 INNER(= (ColumnVar (db_id: 1, table_id: 18, column_id: 8), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 16, column_id: 1), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) , (= (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 16, column_id: 26), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=107, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 107), uses_flatbuffer=0)) ) (CAST TEXT(0,0) NONE(0) (ColumnVar (db_id: 1, table_id: 6, column_id: 10), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=40, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 40), uses_flatbuffer=0)) ) ) , (= (ColumnVar (db_id: 1, table_id: 16, column_id: 11), rte: 5 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (Const 5) ) 
	Group By: (ColumnVar (db_id: 1, table_id: 5, column_id: 10), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 5, column_id: 9), rte: 2 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 6), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 6, column_id: 9), rte: 3 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=39, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 39), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 16, column_id: 25), rte: 5 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=106, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 106), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 18), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 6), rte: 4 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 21), rte: 4 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 19), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=68, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 68), uses_flatbuffer=0)) , (ColumnVar (db_id: 1, table_id: 12, column_id: 16), rte: 4 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=65, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 65), uses_flatbuffer=0)) 
	Projected targets: (SUM (ColumnVar (db_id: 1, table_id: 18, column_id: 21), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=FIXED, comp_param=32, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.628044 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.628059 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.628682 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.628693 1 38957 4 68 HashJoin.cpp:324 Trying to build keyed hash table:
2025-04-19T00:18:25.628698 1 38957 4 68 BaselineJoinHashTable.cpp:63 Building keyed hash table OneToOne for qual: (= < (ColumnVar (db_id: 1, table_id: 18, column_id: 10), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 18, column_id: 3), rte: 0 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > < (ColumnVar (db_id: 1, table_id: 17, column_id: 10), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) (ColumnVar (db_id: 1, table_id: 17, column_id: 3), rte: 1 INTEGER, type: (type=INTEGER, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) > ) 
2025-04-19T00:18:25.628735 1 38957 4 68 BaselineJoinHashTable.cpp:1116 Checking CPU hash table cache.
2025-04-19T00:18:25.628741 1 38957 4 68 HashtableRecycler.cpp:86 [Baseline Join Hashtable, CPU] Recycle item in a cache (key: 15126069940850936496)
2025-04-19T00:18:25.628751 1 38957 4 68 BaselineJoinHashTable.cpp:113 Built keyed hash table OneToOne in 0 ms
2025-04-19T00:18:25.628760 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.628796 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 14981932453577085213)
2025-04-19T00:18:25.628814 1 38957 4 68 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:25.628820 1 38957 4 68 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 14981932453577085213)
2025-04-19T00:18:25.628829 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.628837 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.628855 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 10209159661055272150)
2025-04-19T00:18:25.628862 1 38957 4 68 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:25.628867 1 38957 4 68 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 10209159661055272150)
2025-04-19T00:18:25.628875 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.628884 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.628900 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 5034283305709321086)
2025-04-19T00:18:25.628907 1 38957 4 68 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:25.628911 1 38957 4 68 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 5034283305709321086)
2025-04-19T00:18:25.628920 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.628927 1 38957 4 68 HashJoin.cpp:338 Trying to build perfect hash table:
2025-04-19T00:18:25.628945 1 38957 4 68 HashingSchemeRecycler.cpp:35 [Hashing Scheme for Join Hashtable, CPU] Recycle hashtable layout in cache: OneToOne(key: 9932780903794067887)
2025-04-19T00:18:25.628952 1 38957 4 68 PerfectJoinHashTable.cpp:963 Checking CPU hash table cache.
2025-04-19T00:18:25.628956 1 38957 4 68 HashtableRecycler.cpp:86 [Perfect Join Hashtable, CPU] Recycle item in a cache (key: 9932780903794067887)
2025-04-19T00:18:25.628964 1 38957 4 68 PerfectJoinHashTable.cpp:307 Built perfect hash table OneToOne in 0 ms
2025-04-19T00:18:25.628968 2 38957 4 68 HashJoin.cpp:385 Built CPU hash table: | perfectOneToOne | payloads 0 1 2 3 4 5 6 7 8 9 10 11 |
2025-04-19T00:18:25.628978 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.629390 1 38957 4 68 NativeCodegen.cpp:3087 number of hoisted literals: 2 / literal buffer usage: 16 bytes
2025-04-19T00:18:25.629885 3 38957 4 68 NativeCodegen.cpp:3200 Unoptimized IR for the CPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %31

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %28, %21 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp eq i64 %28, %20
  br i1 %29, label %30, label %21, !llvm.loop !26

30:                                               ; preds = %31, %21, %14
  ret void

31:                                               ; preds = %31, %18
  %32 = phi i64 [ %40, %31 ], [ 0, %18 ]
  %33 = getelementptr inbounds i8**, i8*** %6, i64 %32
  %34 = load i8**, i8*** %33, align 8, !tbaa !27
  %35 = trunc i64 %32 to i32
  %36 = mul i32 %16, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i64, i64* %8, i64 %37
  %39 = getelementptr inbounds i64, i64* %9, i64 %37
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %35, i32* %5, i8** %34, i8* %7, i64* %38, i64* %39, i32* %10, i64* %11, i64* %12, i8* %13)
  %40 = add nuw nsw i64 %32, 1
  %41 = icmp eq i64 %40, %20
  br i1 %41, label %30, label %31, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8*, i8** %byte_stream, i32 5
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8*, i8** %byte_stream, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8*, i8** %byte_stream, i32 7
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8*, i8** %byte_stream, i32 8
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8*, i8** %byte_stream, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8*, i8** %byte_stream, i32 10
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8*, i8** %byte_stream, i32 11
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8*, i8** %byte_stream, i32 12
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr i8*, i8** %byte_stream, i32 13
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr i8*, i8** %byte_stream, i32 14
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr i8*, i8** %byte_stream, i32 15
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8*, i8** %byte_stream, i32 16
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr i8*, i8** %byte_stream, i32 17
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr i8*, i8** %byte_stream, i32 18
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr i8*, i8** %byte_stream, i32 19
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr i8*, i8** %byte_stream, i32 20
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr i8*, i8** %byte_stream, i32 21
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr i8*, i8** %byte_stream, i32 22
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr i8*, i8** %byte_stream, i32 23
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr i8*, i8** %byte_stream, i32 24
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr i8*, i8** %byte_stream, i32 25
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr i8*, i8** %byte_stream, i32 26
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr i8, i8* %literals, i16 0
  %55 = bitcast i8* %54 to i32*
  %literal_0 = load i32, i32* %55, align 4
  %56 = getelementptr i8, i8* %literals, i16 8
  %57 = bitcast i8* %56 to i64*
  %literal_8 = load i64, i64* %57, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %58 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %59 = call i32 @pos_start_impl(i32* %row_index_resume)
  %60 = call i32 @pos_step_impl()
  %61 = call i32 @group_buff_idx_impl()
  %62 = sext i32 %59 to i64
  %63 = getelementptr i64*, i64** %group_by_buffers, i32 %61
  %col_buffer = load i64*, i64** %63, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %64 = icmp slt i64 %62, %row_count
  br i1 %64, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %65 = sext i32 %60 to i64
  br label %.forbody

.forbody:                                         ; preds = %73, %.loop.preheader
  %pos = phi i64 [ %62, %.loop.preheader ], [ %74, %73 ]
  %66 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i8* %11, i8* %13, i8* %15, i8* %17, i8* %19, i8* %21, i8* %23, i8* %25, i8* %27, i8* %29, i8* %31, i8* %33, i8* %35, i8* %37, i8* %39, i8* %41, i8* %43, i8* %45, i8* %47, i8* %49, i8* %51, i8* %53, i64* %join_hash_tables, i8* %row_func_mgr, i64 %literal_8, i32 %literal_0)
  %67 = and i64 %pos, 63
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %69 = call i1 @check_interrupt()
  %70 = select i1 %69, i32 10, i32 %66
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %71 = phi i32 [ %70, %.interrupt_check ], [ %66, %.forbody ]
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %.error_exit, label %73

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %71, i32* %error_code)
  ret void

73:                                               ; preds = %.error_check
  %74 = add i64 %pos, %65
  %75 = icmp slt i64 %74, %row_count
  br i1 %75, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %73
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i8* %col_buf5, i8* %col_buf6, i8* %col_buf7, i8* %col_buf8, i8* %col_buf9, i8* %col_buf10, i8* %col_buf11, i8* %col_buf12, i8* %col_buf13, i8* %col_buf14, i8* %col_buf15, i8* %col_buf16, i8* %col_buf17, i8* %col_buf18, i8* %col_buf19, i8* %col_buf20, i8* %col_buf21, i8* %col_buf22, i8* %col_buf23, i8* %col_buf24, i8* %col_buf25, i8* %col_buf26, i64* %join_hash_tables, i8* %row_func_mgr, i64 %arg_literal_8, i32 %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %singleton_true_

exit:                                             ; preds = %singleton_true_7, %loop_done_false, %singleton_true_5, %singleton_true_3, %singleton_true_1, %singleton_true_
  ret i32 0

singleton_true_:                                  ; preds = %entry
  %0 = alloca i32, i64 8, align 4
  %1 = getelementptr i32, i32* %0, i64 0
  %2 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %3 = trunc i64 %2 to i32
  store i32 %3, i32* %1, align 4
  %4 = getelementptr i32, i32* %0, i64 1
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %4, align 4
  %7 = load i64, i64* %join_hash_tables, align 8
  %8 = inttoptr i64 %7 to i8*
  %9 = bitcast i32* %0 to i8*
  %10 = call i64 @baseline_hash_join_idx_32(i8* %8, i8* %9, i64 8, i64 575734)
  %11 = icmp sge i64 %10, 0
  %remaining_outer_cond_match = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match, align 1
  %12 = load i1, i1* %remaining_outer_cond_match, align 1
  %13 = and i1 %11, %12
  br i1 %13, label %singleton_true_1, label %exit

singleton_true_1:                                 ; preds = %singleton_true_
  %14 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %15 = trunc i64 %14 to i32
  %16 = getelementptr i64, i64* %join_hash_tables, i64 1
  %17 = load i64, i64* %16, align 8
  %18 = sext i32 %15 to i64
  %19 = call i64 @hash_join_idx_nullable(i64 %17, i64 %18, i64 1, i64 100000, i64 -2147483648)
  %20 = icmp sge i64 %19, 0
  %remaining_outer_cond_match2 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match2, align 1
  %21 = load i1, i1* %remaining_outer_cond_match2, align 1
  %22 = and i1 %20, %21
  br i1 %22, label %singleton_true_3, label %exit

singleton_true_3:                                 ; preds = %singleton_true_1
  %23 = call i64 @fixed_width_int_decode(i8* %col_buf8, i32 4, i64 %19)
  %24 = trunc i64 %23 to i32
  %25 = getelementptr i64, i64* %join_hash_tables, i64 2
  %26 = load i64, i64* %25, align 8
  %27 = sext i32 %24 to i64
  %28 = call i64 @hash_join_idx_nullable(i64 %26, i64 %27, i64 1, i64 50000, i64 -2147483648)
  %29 = icmp sge i64 %28, 0
  %remaining_outer_cond_match4 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match4, align 1
  %30 = load i1, i1* %remaining_outer_cond_match4, align 1
  %31 = and i1 %29, %30
  br i1 %31, label %singleton_true_5, label %exit

singleton_true_5:                                 ; preds = %singleton_true_3
  %32 = getelementptr i64, i64* %join_hash_tables, i64 3
  %33 = load i64, i64* %32, align 8
  %34 = sext i32 %6 to i64
  %35 = call i64 @hash_join_idx_nullable(i64 %33, i64 %34, i64 1, i64 18000, i64 -2147483648)
  %36 = icmp sge i64 %35, 0
  %remaining_outer_cond_match6 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match6, align 1
  %37 = load i1, i1* %remaining_outer_cond_match6, align 1
  %38 = and i1 %36, %37
  br i1 %38, label %singleton_true_7, label %exit

singleton_true_7:                                 ; preds = %singleton_true_5
  %39 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %40 = trunc i64 %39 to i32
  %41 = getelementptr i64, i64* %join_hash_tables, i64 4
  %42 = load i64, i64* %41, align 8
  %43 = sext i32 %40 to i64
  %44 = call i64 @hash_join_idx_nullable(i64 %42, i64 %43, i64 1, i64 12, i64 -2147483648)
  %45 = icmp sge i64 %44, 0
  %remaining_outer_cond_match8 = alloca i1, align 1
  store i1 true, i1* %remaining_outer_cond_match8, align 1
  %46 = load i1, i1* %remaining_outer_cond_match8, align 1
  %47 = and i1 %45, %46
  br i1 %47, label %loop_body, label %exit

loop_body:                                        ; preds = %singleton_true_7
  store i1 true, i1* %loop_done, align 1
  %48 = call i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %44, i8* %col_buf11, i64 %19, i8* %col_buf15, i64 %28, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %35, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i64 %pos, i64 %arg_literal_8, i32 %arg_literal_0)
  %49 = load i1, i1* %loop_done, align 1
  br i1 %49, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %48

loop_done_false:                                  ; preds = %loop_body
  br label %exit
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf24, i64 %extra0, i8* %col_buf11, i64 %extra1, i8* %col_buf15, i64 %extra2, i8* %col_buf26, i8* %col_buf14, i8* %col_buf10, i8* %col_buf9, i8* %col_buf23, i8* %col_buf13, i8* %col_buf25, i8* %col_buf19, i64 %extra3, i8* %col_buf17, i8* %col_buf21, i8* %col_buf20, i8* %col_buf18, i64* %group_by_buff, i1* %loop_done, i8* %col_buf4, i64 %pos, i64 %arg_literal_8, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf24, i32 4, i64 %extra0)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  %5 = call i64 @fixed_width_int_decode(i8* %col_buf11, i32 4, i64 %extra1)
  %6 = trunc i64 %5 to i32
  %7 = call { i8*, i64 } @string_decompress(i32 %6, i64 125963610777744)
  %8 = call i64 @fixed_width_int_decode(i8* %col_buf15, i32 4, i64 %extra2)
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %9, -2147483648
  br i1 %10, label %dict_encoded_str_cast_nullcheck_true, label %dict_encoded_str_cast_nullcheck_false

dict_encoded_str_cast_nullcheck_true:             ; preds = %entry
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_false:            ; preds = %entry
  %11 = call i32 @map_string_dict_id(i32 %9, i64 %arg_literal_8, i32 -1)
  br label %dict_encoded_str_cast_nullcheck_bb

dict_encoded_str_cast_nullcheck_bb:               ; preds = %dict_encoded_str_cast_nullcheck_false, %dict_encoded_str_cast_nullcheck_true
  %dict_encoded_str_cast_nullcheck_value = phi i32 [ %11, %dict_encoded_str_cast_nullcheck_false ], [ -2147483648, %dict_encoded_str_cast_nullcheck_true ]
  %12 = call { i8*, i64 } @string_decompress(i32 %dict_encoded_str_cast_nullcheck_value, i64 125963610789328)
  %13 = extractvalue { i8*, i64 } %7, 0
  %14 = extractvalue { i8*, i64 } %7, 1
  %15 = trunc i64 %14 to i32
  %16 = extractvalue { i8*, i64 } %12, 0
  %17 = extractvalue { i8*, i64 } %12, 1
  %18 = trunc i64 %17 to i32
  %19 = call i8 @string_ne_nullable(i8* %13, i32 %15, i8* %16, i32 %18, i8 -128)
  %20 = icmp sgt i8 %19, 0
  %21 = and i1 %4, %20
  %22 = call i64 @fixed_width_int_decode(i8* %col_buf26, i32 4, i64 %extra0)
  %23 = trunc i64 %22 to i32
  %24 = call { i8*, i64 } @string_decompress(i32 %23, i64 125963610319120)
  %25 = call i64 @fixed_width_int_decode(i8* %col_buf14, i32 4, i64 %extra2)
  %26 = trunc i64 %25 to i32
  %27 = call { i8*, i64 } @string_decompress(i32 %26, i64 125963610319904)
  %28 = extractvalue { i8*, i64 } %24, 0
  %29 = extractvalue { i8*, i64 } %24, 1
  %30 = trunc i64 %29 to i32
  %31 = extractvalue { i8*, i64 } %27, 0
  %32 = extractvalue { i8*, i64 } %27, 1
  %33 = trunc i64 %32 to i32
  %34 = call i8 @string_eq_nullable(i8* %28, i32 %30, i8* %31, i32 %33, i8 -128)
  %35 = icmp sgt i8 %34, 0
  %36 = and i1 %21, %35
  br i1 %36, label %filter_true, label %filter_false

filter_true:                                      ; preds = %dict_encoded_str_cast_nullcheck_bb
  %37 = alloca i32, i32 10, align 4
  %38 = call i64 @fixed_width_int_decode(i8* %col_buf10, i32 4, i64 %extra1)
  %39 = trunc i64 %38 to i32
  %40 = getelementptr i32, i32* %37, i32 0
  store i32 %39, i32* %40, align 4
  %41 = call i64 @fixed_width_int_decode(i8* %col_buf9, i32 4, i64 %extra1)
  %42 = trunc i64 %41 to i32
  %43 = getelementptr i32, i32* %37, i32 1
  store i32 %42, i32* %43, align 4
  %44 = call i64 @fixed_width_int_decode(i8* %col_buf23, i32 4, i64 %extra0)
  %45 = trunc i64 %44 to i32
  %46 = getelementptr i32, i32* %37, i32 2
  store i32 %45, i32* %46, align 4
  %47 = call i64 @fixed_width_int_decode(i8* %col_buf13, i32 4, i64 %extra2)
  %48 = trunc i64 %47 to i32
  %49 = getelementptr i32, i32* %37, i32 3
  store i32 %48, i32* %49, align 4
  %50 = call i64 @fixed_width_int_decode(i8* %col_buf25, i32 4, i64 %extra0)
  %51 = trunc i64 %50 to i32
  %52 = getelementptr i32, i32* %37, i32 4
  store i32 %51, i32* %52, align 4
  %53 = call i64 @fixed_width_int_decode(i8* %col_buf19, i32 4, i64 %extra3)
  %54 = trunc i64 %53 to i32
  %55 = getelementptr i32, i32* %37, i32 5
  store i32 %54, i32* %55, align 4
  %56 = call i64 @fixed_width_int_decode(i8* %col_buf17, i32 4, i64 %extra3)
  %57 = trunc i64 %56 to i32
  %58 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %57, i32 -2147483648, i64 -9223372036854775808)
  %59 = trunc i64 %58 to i32
  %60 = getelementptr i32, i32* %37, i32 6
  store i32 %59, i32* %60, align 4
  %61 = call i64 @fixed_width_int_decode(i8* %col_buf21, i32 4, i64 %extra3)
  %62 = trunc i64 %61 to i32
  %63 = getelementptr i32, i32* %37, i32 7
  store i32 %62, i32* %63, align 4
  %64 = call i64 @fixed_width_int_decode(i8* %col_buf20, i32 4, i64 %extra3)
  %65 = trunc i64 %64 to i32
  %66 = getelementptr i32, i32* %37, i32 8
  store i32 %65, i32* %66, align 4
  %67 = call i64 @fixed_width_int_decode(i8* %col_buf18, i32 4, i64 %extra3)
  %68 = trunc i64 %67 to i32
  %69 = getelementptr i32, i32* %37, i32 9
  store i32 %68, i32* %69, align 4
  %70 = bitcast i32* %37 to i64*
  %71 = call i64* @get_group_value(i64* %group_by_buff, i32 2, i64* %70, i32 10, i32 4, i32 6)
  %72 = icmp ne i64* %71, null
  br i1 %72, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %dict_encoded_str_cast_nullcheck_bb
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %73 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 4, i64 %pos)
  %74 = trunc i64 %73 to i32
  %75 = call i64 @cast_int32_t_to_int64_t_nullable(i32 %74, i32 -2147483648, i64 -9223372036854775808)
  %agg_col_ptr = getelementptr i64, i64* %71, i64 0
  %76 = call i64 @agg_sum_skip_val(i64* %agg_col_ptr, i64 %75, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %77 = trunc i64 %pos to i32
  %78 = sub i32 0, %77
  ret i32 %78
}

End of IR
2025-04-19T00:18:25.630307 1 38957 4 68 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:18:25.630608 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 2 ms
2025-04-19T00:18:25.630639 1 38957 4 68 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:25.630651 1 38957 4 68 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 10
	Target group by indices: -1
	Col Slot Context State
	N | P , L
	0 | 8 , 8
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 2
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.630709 1 38957 4 68 Execute.cpp:3137 In Executor::LaunchKernels executor 3 requested between 1 and 1 CPU slots, and was granted 1 CPU slots.
2025-04-19T00:18:25.630717 1 38957 4 68 Execute.cpp:2977 Launching 1 kernels for query on CPU using pool of 1 threads.
2025-04-19T00:18:25.630738 I 38957 4 80 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.630746 I 38957 4 80 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.630802 I 38957 4 80 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.630881 I 38957 4 80 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:25.630889 2 38957 4 80 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(1), table_id(18),nest_level(0)) InputDescriptor(db_id(1), table_id(17),nest_level(1)) InputDescriptor(db_id(1), table_id(5),nest_level(2)) InputDescriptor(db_id(1), table_id(6),nest_level(3)) InputDescriptor(db_id(1), table_id(12),nest_level(4)) InputDescriptor(db_id(1), table_id(16),nest_level(5))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(4),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(8),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(18),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(17),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(5),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(15),InputDescriptor(db_id(1), table_id(5),nest_level(2))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(9),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(10),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(6),nest_level(3))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(16),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(18),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(19),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(21),InputDescriptor(db_id(1), table_id(12),nest_level(4))) InputColDescriptor(col_id(1),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(6),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(11),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(25),InputDescriptor(db_id(1), table_id(16),nest_level(5))) InputColDescriptor(col_id(26),InputDescriptor(db_id(1), table_id(16),nest_level(5)))) ra_exe_unit.scan_limit=0 num_rows=((2880404 287867 100000 50000 18000 12)) frag_offsets=((0 0 0 0 0 0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=2 device_id=0 outer_table_key=(db_id: 1, table_id: 18) scan_limit=0 start_rowid=0 num_tables=6
2025-04-19T00:18:25.630914 I 38957 4 80 measure.h:77 Timer start                        lauchCpuCode                       launchCpuCode:  576
2025-04-19T00:18:25.630922 1 38957 4 80 QueryExecutionContext.cpp:651 Calling multifrag_query_hoisted_literals hoist_literals(true)
2025-04-19T00:18:25.765826 I 38957 4 80 measure.h:84 Timer end                          lauchCpuCode                       launchCpuCode:  576 elapsed 134 ms
2025-04-19T00:18:25.765867 2 38957 4 80 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:25.765882 I 38957 4 80 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 135 ms
2025-04-19T00:18:25.765908 I 38957 4 80 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 135 ms
2025-04-19T00:18:25.765951 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 137 ms
2025-04-19T00:18:25.766009 I 38957 4 68 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 138 ms
2025-04-19T00:18:25.766028 3 38957 4 68 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-41, ...) exec_desc.getResult().getDataPtr()->rowCount()=0
2025-04-19T00:18:25.766035 I 38957 4 68 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 138 ms
2025-04-19T00:18:25.766042 1 38957 4 68 RelAlgExecutor.cpp:945 Executing query step 2 / 5
2025-04-19T00:18:25.766048 I 38957 4 68 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.766078 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 1
2025-04-19T00:18:25.766084 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]) input_col_descs_unique.size()=0 source_used_inputs.size()=1
2025-04-19T00:18:25.766147 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]) input_col_descs_unique.size()=1 source_used_inputs.size()=0
2025-04-19T00:18:25.766227 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:25.766246 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:25.766273 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:25.766290 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:25.766334 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:25.766350 I 38957 4 68 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.766358 3 38957 4 68 RelAlgExecutor.cpp:3692 body->getId()=33 body->toString()=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]) it==leaf_results_.end()=true
2025-04-19T00:18:25.766390 1 38957 4 68 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:25.766400 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 8131334782604460974
	Table/Col/Levels: ((db_id: 0, table_id: -41), 0, 0) 
	Projected targets: (AVG (ColumnVar (db_id: 0, table_id: -41, column_id: 0), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.766410 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.766419 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.767227 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.767240 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.767285 1 38957 4 68 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:18:25.767295 1 38957 4 68 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:25.767533 3 38957 4 68 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %result = alloca i64, align 8
  %result1 = alloca i64, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %2 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %3 = load i64, i64* %2, align 8
  store i64 %3, i64* %result, align 8
  %4 = getelementptr inbounds i64, i64* %agg_init_val, i32 1
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %result1, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %6 = sext i32 %pos_start to i64
  %7 = icmp slt i64 %6, %row_count
  br i1 %7, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %8 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %17, %.loop.preheader
  %pos = phi i64 [ %6, %.loop.preheader ], [ %18, %17 ]
  %9 = call i32 @row_func(i64* %result, i64* %result1, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i64* %join_hash_tables, i8* %row_func_mgr)
  %10 = lshr i64 %pos, 15
  %11 = and i64 %10, 32
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %13 = call i1 @check_interrupt()
  %14 = select i1 %13, i32 10, i32 %9
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %15 = phi i32 [ %14, %.interrupt_check ], [ %9, %.for.body ]
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %.error_exit, label %17

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %15, i32* %error_code)
  ret void

17:                                               ; preds = %.error_check
  %18 = add nsw i64 %pos, %8
  %19 = icmp slt i64 %18, %row_count
  br i1 %19, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %17
  %.pre.result = load i64, i64* %result, align 8
  %.pre.result2 = load i64, i64* %result1, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %20 = phi i64 [ %.pre.result2, %._crit_edge ], [ %5, %.entry ]
  %21 = phi i64 [ %.pre.result, %._crit_edge ], [ %3, %.entry ]
  %22 = getelementptr inbounds i64*, i64** %out, i32 0
  %23 = load i64*, i64** %22, align 8
  %24 = mul i32 %frag_idx, %pos_step
  %25 = add i32 %group_buff_idx, %24
  %26 = getelementptr inbounds i64, i64* %23, i32 %25
  store i64 %21, i64* %26, align 8
  %27 = getelementptr inbounds i64*, i64** %out, i32 1
  %28 = load i64*, i64** %27, align 8
  %29 = mul i32 %frag_idx, %pos_step
  %30 = add i32 %group_buff_idx, %29
  %31 = getelementptr inbounds i64, i64* %28, i32 %30
  store i64 %20, i64* %31, align 8
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %out1, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %0 = call i32 @filter_func(i8* %col_buf0, i64 %pos, i64* %out, i64* %out1)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i8* %col_buf0, i64 %pos, i64* %out, i64* %out1) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 8, i64 %pos)
  %1 = call i64 @agg_sum_skip_val(i64* %out, i64 %0, i64 -9223372036854775808)
  %2 = call i64 @agg_count_skip_val(i64* %out1, i64 %0, i64 -9223372036854775808)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:25.767687 1 38957 4 68 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:18:25.767937 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:18:25.767977 1 38957 4 68 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:25.767982 1 38957 4 68 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 8
	1 | 8 , 8
	col_to_slot_map=[[0, 1]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.768075 1 38957 4 68 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.768101 1 38957 4 68 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.768119 I 38957 4 81 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.768130 I 38957 4 81 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.768139 I 38957 4 81 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.768150 I 38957 4 81 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.768164 I 38957 4 81 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.768184 I 38957 4 81 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:25.768194 I 38957 4 81 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.768321 1 38957 4 81 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.095424 ms
2025-04-19T00:18:25.768330 1 38957 4 81 GpuInterrupt.cpp:26 Registered module 0x729180535090 on device 0
2025-04-19T00:18:25.768439 1 38957 4 81 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:18:25.768446 1 38957 4 81 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.768451 1 38957 4 81 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.768516 1 38957 4 81 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:25.768885 1 38957 4 81 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.768903 1 38957 4 81 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.768908 I 38957 4 81 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.768940 I 38957 4 81 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:25.768950 I 38957 4 81 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:25.768989 1 38957 4 68 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:25.769010 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 2 ms
2025-04-19T00:18:25.769020 I 38957 4 68 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 2 ms
2025-04-19T00:18:25.769030 I 38957 4 68 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 2 ms
2025-04-19T00:18:25.769035 1 38957 4 68 RelAlgExecutor.cpp:945 Executing query step 3 / 5
2025-04-19T00:18:25.769041 I 38957 4 68 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.769053 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 1
2025-04-19T00:18:25.769057 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) input_col_descs_unique.size()=0 source_used_inputs.size()=1
2025-04-19T00:18:25.769097 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) input_col_descs_unique.size()=1 source_used_inputs.size()=0
2025-04-19T00:18:25.769122 3 38957 4 68 RelAlgExecutor.cpp:4896 input_descs=(InputDescriptor(db_id(0), table_id(-33),nest_level(0)))
2025-04-19T00:18:25.769131 3 38957 4 68 RelAlgExecutor.cpp:4897 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-33),nest_level(0))))
2025-04-19T00:18:25.769138 3 38957 4 68 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"])) = 1
2025-04-19T00:18:25.769212 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:25.769230 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:25.769255 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:25.769271 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:25.769308 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:25.769321 I 38957 4 68 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.769331 3 38957 4 68 RelAlgExecutor.cpp:3692 body->getId()=34 body->toString()=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) it==leaf_results_.end()=true
2025-04-19T00:18:25.769365 1 38957 4 68 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:18:25.769371 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 17744443142959666771
	Table/Col/Levels: ((db_id: 0, table_id: -33), 0, 0) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.769383 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.769392 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.769416 1 38957 4 68 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:18:25.770068 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.770079 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.770102 1 38957 4 68 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:18:25.770111 1 38957 4 68 NativeCodegen.cpp:3087 number of hoisted literals: 0 / literal buffer usage: 0 bytes
2025-04-19T00:18:25.770319 3 38957 4 68 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %2 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %3 = load i64, i64* %2, align 8
  store i64 %3, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %4 = sext i32 %pos_start to i64
  %5 = icmp slt i64 %4, %row_count
  br i1 %5, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %6 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %15, %.loop.preheader
  %pos = phi i64 [ %4, %.loop.preheader ], [ %16, %15 ]
  %7 = call i32 @row_func(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i64* %join_hash_tables, i8* %row_func_mgr)
  %8 = lshr i64 %pos, 15
  %9 = and i64 %8, 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.for.body
  %11 = call i1 @check_interrupt()
  %12 = select i1 %11, i32 10, i32 %7
  br label %.error_check

.error_check:                                     ; preds = %.for.body, %.interrupt_check
  %13 = phi i32 [ %12, %.interrupt_check ], [ %7, %.for.body ]
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %.error_exit, label %15

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %13, i32* %error_code)
  ret void

15:                                               ; preds = %.error_check
  %16 = add nsw i64 %pos, %6
  %17 = icmp slt i64 %16, %row_count
  br i1 %17, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %15
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %18 = phi i64 [ %.pre.result, %._crit_edge ], [ %3, %.entry ]
  %19 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %20 = call i64 @agg_sum_shared(i64* %19, i64 %18)
  call void @sync_threadblock()
  %21 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %21, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i64* %join_hash_tables, i8* %row_func_mgr) #33 {
entry:
  %0 = call i32 @filter_func(i64* %out)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func(i64* %out) #33 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %0 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  ret i32 0
}

End of IR
2025-04-19T00:18:25.770458 1 38957 4 68 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:18:25.770694 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:18:25.770723 1 38957 4 68 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:25.770729 1 38957 4 68 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.770791 1 38957 4 68 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.770811 1 38957 4 68 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.770824 I 38957 4 82 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.770838 I 38957 4 82 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.770848 I 38957 4 82 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.770875 I 38957 4 82 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.770884 I 38957 4 82 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.770902 I 38957 4 82 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:25.770911 I 38957 4 82 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.770943 1 38957 4 82 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.010912 ms
2025-04-19T00:18:25.770950 1 38957 4 82 GpuInterrupt.cpp:26 Registered module 0x729180556de0 on device 0
2025-04-19T00:18:25.771061 1 38957 4 82 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:18:25.771068 1 38957 4 82 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.771072 1 38957 4 82 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.771129 1 38957 4 82 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:25.771204 1 38957 4 82 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.771215 1 38957 4 82 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.771219 I 38957 4 82 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.771228 I 38957 4 82 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:25.771236 I 38957 4 82 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:25.771249 1 38957 4 68 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 1
2025-04-19T00:18:25.771273 1 38957 4 68 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:25.771290 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 1 ms
2025-04-19T00:18:25.771299 1 38957 4 68 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 1
2025-04-19T00:18:25.771314 1 38957 4 68 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:25.771319 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 17744443142959666771
	Table/Col/Levels: ((db_id: 0, table_id: -33), 0, 0) 
	Group By: NULL
	Projected targets: (* (Const 0.050000) (ColumnVar (db_id: 0, table_id: -33, column_id: 0), rte: 0 DOUBLE, type: (type=DOUBLE, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 1
	Bump Allocator: False
2025-04-19T00:18:25.771329 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.771337 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.771943 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.771954 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.772007 1 38957 4 68 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 8
2025-04-19T00:18:25.772016 1 38957 4 68 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 8 bytes
2025-04-19T00:18:25.772295 3 38957 4 68 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8, i8* %literals, i16 0
  %3 = bitcast i8* %2 to double*
  %literal_0 = load double, double* %3, align 8
  %row_count = load i64, i64* %row_count_ptr, align 8
  %4 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %5 = call i32 @pos_start_impl(i32* %row_index_resume)
  %6 = call i32 @pos_step_impl()
  %7 = call i32 @group_buff_idx_impl()
  %8 = sext i32 %5 to i64
  %9 = getelementptr i64*, i64** %group_by_buffers, i32 %7
  %col_buffer = load i64*, i64** %9, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %10 = icmp slt i64 %8, %row_count
  br i1 %10, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %11 = sext i32 %6 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %8, %.loop.preheader ], [ %21, %filter_match ], [ %21, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %12 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i64* %join_hash_tables, i8* %row_func_mgr, double %literal_0)
  %13 = lshr i64 %pos, 15
  %14 = and i64 %13, 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %16 = call i1 @check_interrupt()
  %17 = select i1 %16, i32 10, i32 %12
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %18 = phi i32 [ %17, %.interrupt_check ], [ %12, %.forbody ]
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %.error_exit, label %20

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %18, i32* %error_code)
  ret void

20:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %21 = add i64 %pos, %11
  %22 = icmp slt i64 %21, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %23 = icmp ne i32 %crt_matched1, 0
  br i1 %23, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %20
  %24 = load i32, i32* %old_total_matched, align 4
  %25 = add i32 %24, %crt_matched1
  %limit_not_reached = icmp slt i32 %25, %4
  %26 = and i1 %22, %limit_not_reached
  br i1 %26, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %20
  br i1 %22, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i64* %join_hash_tables, i8* %row_func_mgr, double %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i8* %col_buf0, double %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i64 %pos, i8* %col_buf0, double %arg_literal_0) #34 {
entry:
  br i1 true, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %0 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %0, i32* %old_total_matched, align 4
  %1 = load i32, i32* %max_matched, align 4
  %2 = load i32, i32* %old_total_matched, align 4
  %3 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %1, i32 %2, i64 %pos, i32 2)
  %4 = icmp ne i64* %3, null
  br i1 %4, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %5 = call double @fixed_width_double_decode(i8* %col_buf0, i64 %pos)
  %6 = call double @mul_double_nullable_rhs(double %arg_literal_0, double %5, double 0x10000000000000)
  %agg_col_ptr = getelementptr i64, i64* %3, i64 0
  call void @agg_id_double_shared(i64* %agg_col_ptr, double %6)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %7 = trunc i64 %pos to i32
  %8 = sub i32 0, %7
  ret i32 %8
}

End of IR
2025-04-19T00:18:25.772499 1 38957 4 68 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:18:25.772814 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:18:25.772854 1 38957 4 68 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:25.772859 1 38957 4 68 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Target group by indices: -1
	Col Slot Context State
	N | P , L
	0 | 8 , 8
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.772942 1 38957 4 68 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.772970 1 38957 4 68 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.772985 I 38957 4 83 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.772999 I 38957 4 83 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.773007 I 38957 4 83 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.773018 I 38957 4 83 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.773037 I 38957 4 83 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.773058 I 38957 4 83 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:25.773065 2 38957 4 83 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-33),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-33),nest_level(0)))) ra_exe_unit.scan_limit=1 num_rows=((1)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=1 device_id=0 outer_table_key=(db_id: 0, table_id: -33) scan_limit=1 start_rowid=0 num_tables=1
2025-04-19T00:18:25.773085 I 38957 4 83 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.773314 1 38957 4 83 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.169984 ms
2025-04-19T00:18:25.773341 1 38957 4 83 GpuInterrupt.cpp:26 Registered module 0x729180544980 on device 0
2025-04-19T00:18:25.773556 1 38957 4 83 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:25.773564 1 38957 4 83 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.773569 1 38957 4 83 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.773635 1 38957 4 83 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:25.773712 1 38957 4 83 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.773726 1 38957 4 83 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.773731 I 38957 4 83 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.773750 2 38957 4 83 Execute.cpp:4139 results->rowCount()=1
2025-04-19T00:18:25.773755 I 38957 4 83 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 0 ms
2025-04-19T00:18:25.773767 I 38957 4 83 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:25.773796 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 2 ms
2025-04-19T00:18:25.773806 I 38957 4 68 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 4 ms
2025-04-19T00:18:25.773815 3 38957 4 68 RelAlgExecutor.cpp:1262 Returned from executeProject(), addTemporaryTable(-34, ...) exec_desc.getResult().getDataPtr()->rowCount()=1
2025-04-19T00:18:25.773821 I 38957 4 68 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 4 ms
2025-04-19T00:18:25.773826 1 38957 4 68 RelAlgExecutor.cpp:945 Executing query step 4 / 5
2025-04-19T00:18:25.773832 I 38957 4 68 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.773845 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 5
2025-04-19T00:18:25.773849 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 input_col_descs_unique.size()=0 source_used_inputs.size()=5
2025-04-19T00:18:25.773986 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 input_col_descs_unique.size()=5 source_used_inputs.size()=0
2025-04-19T00:18:25.774098 3 38957 4 68 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(0), table_id(-39),nest_level(0)))
2025-04-19T00:18:25.774103 3 38957 4 68 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(0), table_id(-39),nest_level(0))))
2025-04-19T00:18:25.774118 3 38957 4 68 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1) = 7
2025-04-19T00:18:25.774289 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13607767482405443616 (access path: 3|), outer join col info: 1093183255841122032 (access path: 2|)
2025-04-19T00:18:25.774309 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15930436528992822113 (access path: 6|), outer join col info: 6831461709073970827 (access path: 2|)
2025-04-19T00:18:25.774335 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 15614413188793499599 (access path: 7|), outer join col info: 3907554483418634543 (access path: 6|)
2025-04-19T00:18:25.774352 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 5189027425840937923 (access path: 5|), outer join col info: 4780954258992277811 (access path: 2|)
2025-04-19T00:18:25.774388 2 38957 4 68 QueryPlanDagExtractor.cpp:368 Add hashtable access path, inner join col info: 13919151803556746502 (access path: 4|), outer join col info: 7010572714230448454 (access path: 2|)
2025-04-19T00:18:25.774404 I 38957 4 68 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.774413 3 38957 4 68 RelAlgExecutor.cpp:3692 body->getId()=40 body->toString()=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 it==leaf_results_.end()=true
2025-04-19T00:18:25.774551 1 38957 4 68 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:25.774556 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 14033911593505703960
	Table/Col/Levels: ((db_id: 0, table_id: -39), 0, 0) ((db_id: 0, table_id: -39), 1, 0) ((db_id: 0, table_id: -39), 2, 0) ((db_id: 0, table_id: -39), 5, 0) ((db_id: 0, table_id: -39), 10, 0) 
	Quals: (= (ColumnVar (db_id: 0, table_id: -39, column_id: 5), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=67, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 67), uses_flatbuffer=0)) (CAST VARCHAR(8,0) DICT(67) (Const seashell) ) ) 
	Group By: (ColumnVar (db_id: 0, table_id: -39, column_id: 0), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -39, column_id: 1), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -39, column_id: 2), rte: 0 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) 
	Projected targets: (Var (db_id: 0, table_id: -39, column_id: 0), rte: 0, which_row: 3, varno: 1) , (Var (db_id: 0, table_id: -39, column_id: 1), rte: 0, which_row: 3, varno: 2) , (Var (db_id: 0, table_id: -39, column_id: 2), rte: 0, which_row: 3, varno: 3) , (SUM (ColumnVar (db_id: 0, table_id: -39, column_id: 10), rte: 0 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.774578 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.774588 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.775328 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.775341 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.775494 1 38957 4 68 NativeCodegen.cpp:2255 Set the running query interrupt checking frequency: 32
2025-04-19T00:18:25.775504 1 38957 4 68 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 4 bytes
2025-04-19T00:18:25.775788 3 38957 4 68 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !27

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !27
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8, i8* %literals, i16 0
  %11 = bitcast i8* %10 to i32*
  %literal_0 = load i32, i32* %11, align 4
  %row_count = load i64, i64* %row_count_ptr, align 8
  %12 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %13 = call i32 @pos_start_impl(i32* %row_index_resume)
  %14 = call i32 @pos_step_impl()
  %15 = call i32 @group_buff_idx_impl()
  %16 = sext i32 %13 to i64
  %17 = getelementptr i64*, i64** %group_by_buffers, i32 %15
  %col_buffer = load i64*, i64** %17, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %18 = icmp slt i64 %16, %row_count
  br i1 %18, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %19 = sext i32 %14 to i64
  br label %.forbody

.forbody:                                         ; preds = %28, %.loop.preheader
  %pos = phi i64 [ %16, %.loop.preheader ], [ %29, %28 ]
  %20 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr, i32 %literal_0)
  %21 = lshr i64 %pos, 15
  %22 = and i64 %21, 32
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %.interrupt_check, label %.error_check

.interrupt_check:                                 ; preds = %.forbody
  %24 = call i1 @check_interrupt()
  %25 = select i1 %24, i32 10, i32 %20
  br label %.error_check

.error_check:                                     ; preds = %.forbody, %.interrupt_check
  %26 = phi i32 [ %25, %.interrupt_check ], [ %20, %.forbody ]
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %.error_exit, label %28

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %26, i32* %error_code)
  ret void

28:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %29 = add i64 %pos, %19
  %30 = icmp slt i64 %29, %row_count
  br i1 %30, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %28
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr, i32 %arg_literal_0) #34 {
entry:
  %0 = call i32 @filter_func_hoisted_literals(i8* %col_buf3, i64 %pos, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %group_by_buff, i8* %col_buf4, i32 %arg_literal_0)
  ret i32 %0
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf3, i64 %pos, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i64* %group_by_buff, i8* %col_buf4, i32 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf3, i32 4, i64 %pos)
  %1 = trunc i64 %0 to i32
  %2 = call i8 @eq_int32_t_nullable_lhs(i32 %1, i32 %arg_literal_0, i64 -2147483648, i8 -128)
  %3 = icmp sgt i8 %2, 0
  %4 = and i1 true, %3
  br i1 %4, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %5 = alloca i32, i32 3, align 4
  %6 = call i64 @fixed_width_int_decode(i8* %col_buf0, i32 4, i64 %pos)
  %7 = trunc i64 %6 to i32
  %8 = getelementptr i32, i32* %5, i32 0
  store i32 %7, i32* %8, align 4
  %9 = call i64 @fixed_width_int_decode(i8* %col_buf1, i32 4, i64 %pos)
  %10 = trunc i64 %9 to i32
  %11 = getelementptr i32, i32* %5, i32 1
  store i32 %10, i32* %11, align 4
  %12 = call i64 @fixed_width_int_decode(i8* %col_buf2, i32 4, i64 %pos)
  %13 = trunc i64 %12 to i32
  %14 = getelementptr i32, i32* %5, i32 2
  store i32 %13, i32* %14, align 4
  %15 = bitcast i32* %5 to i64*
  %16 = call i64* @get_group_value(i64* %group_by_buff, i32 16384, i64* %15, i32 3, i32 4, i32 3)
  %17 = icmp ne i64* %16, null
  br i1 %17, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %18 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 8, i64 %pos)
  %agg_col_ptr = getelementptr i64, i64* %16, i64 0
  %19 = call i64 @agg_sum_skip_val_shared(i64* %agg_col_ptr, i64 %18, i64 -9223372036854775808)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %20 = trunc i64 %pos to i32
  %21 = sub i32 0, %20
  ret i32 %21
}

End of IR
2025-04-19T00:18:25.775987 1 38957 4 68 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:18:25.776249 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:18:25.776280 1 38957 4 68 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:25.776286 1 38957 4 68 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Baseline Hash
	Keyless Hash: False
	Effective key width: 4
	Number of group columns: 3
	Target group by indices: 0,1,2,-1
	Col Slot Context State
	N | P , L
	0 | 0 , 0
	1 | 0 , 0
	2 | 0 , 0
	3 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 16384
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.776366 1 38957 4 68 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.776384 1 38957 4 68 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.776398 I 38957 4 84 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.776411 I 38957 4 84 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.776420 I 38957 4 84 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.776431 I 38957 4 84 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.776446 I 38957 4 84 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.776468 I 38957 4 84 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:25.776475 2 38957 4 84 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-39),nest_level(0))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(5),InputDescriptor(db_id(0), table_id(-39),nest_level(0))) InputColDescriptor(col_id(10),InputDescriptor(db_id(0), table_id(-39),nest_level(0)))) ra_exe_unit.scan_limit=0 num_rows=((0)) frag_offsets=((0)) query_exe_context->query_buffers_->num_rows_=-1 query_exe_context->query_mem_desc_.getEntryCount()=16384 device_id=0 outer_table_key=(db_id: 0, table_id: -39) scan_limit=0 start_rowid=0 num_tables=1
2025-04-19T00:18:25.776487 I 38957 4 84 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.776616 1 38957 4 84 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.097440 ms
2025-04-19T00:18:25.776624 1 38957 4 84 GpuInterrupt.cpp:26 Registered module 0x72918072b380 on device 0
2025-04-19T00:18:25.776820 1 38957 4 84 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:25.776836 1 38957 4 84 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.776841 1 38957 4 84 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.776911 1 38957 4 84 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:25.777246 1 38957 4 84 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.777261 1 38957 4 84 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.777266 I 38957 4 84 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.777304 1 38957 4 84 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:25.777317 2 38957 4 84 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:25.777477 I 38957 4 84 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 1 ms
2025-04-19T00:18:25.777489 I 38957 4 84 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 1 ms
2025-04-19T00:18:25.777513 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 2 ms
2025-04-19T00:18:25.777525 I 38957 4 68 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 3 ms
2025-04-19T00:18:25.777534 3 38957 4 68 RelAlgExecutor.cpp:1219 Returned from executeCompound(), addTemporaryTable(-40, ...) exec_desc.getResult().getDataPtr()->rowCount()=0
2025-04-19T00:18:25.777541 I 38957 4 68 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 3 ms
2025-04-19T00:18:25.777552 1 38957 4 68 RelAlgExecutor.cpp:945 Executing query step 5 / 5
2025-04-19T00:18:25.777558 I 38957 4 68 measure.h:77 Timer start                   executeRelAlgStep                   executeRelAlgStep: 1154
2025-04-19T00:18:25.777574 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:18:25.777580 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:18:25.778652 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=5 source_used_inputs.size()=0
2025-04-19T00:18:25.779671 3 38957 4 68 RelAlgExecutor.cpp:4495 input_descs=(InputDescriptor(db_id(0), table_id(-40),nest_level(0)) InputDescriptor(db_id(0), table_id(-34),nest_level(1)))
2025-04-19T00:18:25.779677 3 38957 4 68 RelAlgExecutor.cpp:4496 input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-40),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-34),nest_level(1))))
2025-04-19T00:18:25.779698 2 38957 4 68 FromTableReordering.cpp:508 Table reordering starting with nest level 1
2025-04-19T00:18:25.779703 2 38957 4 68 FromTableReordering.cpp:529 Table reordering picked start nest level 1 with cost 0
2025-04-19T00:18:25.779708 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 0, nest_level: 1
2025-04-19T00:18:25.779713 2 38957 4 68 FromTableReordering.cpp:508 Table reordering starting with nest level 0
2025-04-19T00:18:25.779717 2 38957 4 68 FromTableReordering.cpp:529 Table reordering picked start nest level 0 with cost 0
2025-04-19T00:18:25.779722 1 38957 4 68 FromTableReordering.cpp:539 Insert input permutation, idx: 1, nest_level: 0
2025-04-19T00:18:25.779726 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) to nest level 0
2025-04-19T00:18:25.779755 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 to nest level 1
2025-04-19T00:18:25.779882 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:18:25.779887 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:18:25.780905 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=5 source_used_inputs.size()=0
2025-04-19T00:18:25.781917 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]) to nest level 0
2025-04-19T00:18:25.781954 1 38957 4 68 RelAlgExecutor.cpp:1544 Assigned input RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1 to nest level 1
2025-04-19T00:18:25.782077 3 38957 4 68 RelAlgExecutor.cpp:1684 used_inputs.size() = 6
2025-04-19T00:18:25.782082 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=0 source_used_inputs.size()=6
2025-04-19T00:18:25.783096 3 38957 4 68 RelAlgExecutor.cpp:1602 ra_node=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 input_col_descs_unique.size()=5 source_used_inputs.size()=0
2025-04-19T00:18:25.784118 3 38957 4 68 RelAlgExecutor.cpp:1755 get_scalar_sources_size(RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0) = 4
2025-04-19T00:18:25.785206 2 38957 4 68 QueryPlanDagExtractor.cpp:382 Add loop join access path, for LHS: 10|9|8|1|2|3|4|5|6|7|, for RHS: 23|0|1|2|3|4|5|6|7|
2025-04-19T00:18:25.785221 I 38957 4 68 measure.h:77 Timer start                     executeWorkUnit                     executeWorkUnit: 3651
2025-04-19T00:18:25.785234 3 38957 4 68 RelAlgExecutor.cpp:3692 body->getId()=42 body->toString()=RelCompound, filter_expr=RexOperator(4, operands=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) RexInput(input_node=RelProject(RexOperator(12, operands=RexLiteral(5 type=DECIMAL(1,2) target_type=DECIMAL(3,2)) RexInput(input_node=RelAggregate(0, agg_exprs=[&RexAgg(agg=0, distinct=0, type=DOUBLE, operands=[0])], fields=["$f0"][&RelCompound, filter_expr=null, target_exprs=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["netpaid"], is_agg=1]), in_index=0) , type=(type=DOUBLE, dimension=0, scale=0, null=not nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) , ["EXPR$0"]), in_index=0) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , agg_exps=, scalar_sources=RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=RexOperator(0, operands=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=5) RexLiteral(seashell type=TEXT(50,2147483648) target_type=TEXT(50,2147483648)) , type=(type=BOOLEAN, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=1, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)), target_exprs=RexRef(1) RexRef(2) RexRef(3) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[3]) , scalar_sources=RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=0) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=1) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=2) RexInput(input_node=RelCompound, filter_expr=null, target_exprs=RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , agg_exps=RexAgg(agg=3, distinct=0, type=DECIMAL(19,2), operands=[10]) , scalar_sources=RexInput(customer.c_last_name) RexInput(customer.c_first_name) RexInput(store.s_store_name) RexInput(customer_address.ca_state) RexInput(store.s_state) RexInput(item.i_color) RexInput(item.i_current_price) RexInput(item.i_manager_id) RexInput(item.i_units) RexInput(item.i_size) RexInput(store_sales.ss_net_paid) RexRef(1) RexRef(2) RexRef(3) RexRef(4) RexRef(5) RexRef(6) RexRef(7) RexRef(8) RexRef(9) RexRef(10) , 10, , fields=["c_last_name", "c_first_name", "s_store_name", "ca_state", "s_state", "i_color", "i_current_price", "i_manager_id", "i_units", "i_size", "netpaid"], is_agg=1, in_index=10) RexRef(1) RexRef(2) RexRef(3) , 3, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=1, in_index=3) , 0, , fields=["c_last_name", "c_first_name", "s_store_name", "paid"], is_agg=0 it==leaf_results_.end()=true
2025-04-19T00:18:25.786217 1 38957 4 68 RelAlgExecutor.cpp:4025 Try to execute pre-flight counts query
2025-04-19T00:18:25.786222 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 3257942378419421609
	Table/Col/Levels: ((db_id: 0, table_id: -34), 0, 0) ((db_id: 0, table_id: -40), 0, 1) ((db_id: 0, table_id: -40), 1, 1) ((db_id: 0, table_id: -40), 2, 1) ((db_id: 0, table_id: -40), 3, 1) 
	Quals: (> (CAST DOUBLE(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -40, column_id: 3), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) (ColumnVar (db_id: 0, table_id: -34, column_id: 0), rte: 0 DOUBLE, type: (type=DOUBLE, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Join Quals: 		0 INNER(Const t) 
	Projected targets: (COUNT *) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 
	  Algorithm: ResultSet
	  Limit: N/A
	  Offset: 0
	Scan Limit: 0
	Bump Allocator: False
2025-04-19T00:18:25.786240 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.786248 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.786278 1 38957 4 68 NativeCodegen.cpp:2912 GPU shared memory is used for the Non-grouped Aggregate query(8 out of 4096 bytes).
2025-04-19T00:18:25.786918 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.786931 1 38957 4 68 IRCodegen.cpp:757 Unable to build hash table, falling back to loop join: No equijoin expression found
2025-04-19T00:18:25.786936 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.787003 1 38957 4 68 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 1 bytes
2025-04-19T00:18:25.787316 3 38957 4 68 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !24

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !25
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !24
}
define void @query_template(i32* %error_code, i32* %total_matched, i64** %out, i32 %frag_idx, i32* nocapture %row_index_resume, i8** nocapture %byte_stream, i8* nocapture %literals, i64* nocapture %row_count_ptr, i64* nocapture %frag_row_off_ptr, i32* nocapture %max_matched_ptr, i64* nocapture %agg_init_val, i64* nocapture %join_hash_tables, i8* nocapture %row_func_mgr) {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8, i8* %literals, i16 0
  %literal_0 = load i8, i8* %10, align 1
  %result = alloca i64, align 8
  %smem_buffer = call i64* @init_shared_mem(i64* %agg_init_val, i32 8)
  %row_count = load i64, i64* %row_count_ptr, align 8
  %11 = getelementptr inbounds i64, i64* %agg_init_val, i32 0
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %result, align 8
  %pos_start = call i32 @pos_start_impl(i32* %row_index_resume)
  %pos_step = call i32 @pos_step_impl()
  %group_buff_idx = call i32 @group_buff_idx_impl()
  %13 = sext i32 %pos_start to i64
  %14 = icmp slt i64 %13, %row_count
  br i1 %14, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %15 = sext i32 %pos_step to i64
  br label %.for.body

.for.body:                                        ; preds = %20, %.loop.preheader
  %pos = phi i64 [ %13, %.loop.preheader ], [ %21, %20 ]
  %16 = call i32 @row_func_hoisted_literals(i64* %result, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr, i8 %literal_0)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %.for.body
  %17 = call i1 @check_interrupt()
  %18 = select i1 %17, i32 10, i32 %16
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %.error_exit, label %20

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %18, i32* %error_code)
  ret void

20:                                               ; preds = %.error_check
  %21 = add nsw i64 %pos, %15
  %22 = icmp slt i64 %21, %row_count
  br i1 %22, label %.for.body, label %._crit_edge

._crit_edge:                                      ; preds = %20
  %.pre.result = load i64, i64* %result, align 8
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  %23 = phi i64 [ %.pre.result, %._crit_edge ], [ %12, %.entry ]
  %24 = getelementptr inbounds i64, i64* %smem_buffer, i32 0
  %25 = call i64 @agg_sum_shared(i64* %24, i64 %23)
  call void @sync_threadblock()
  %26 = getelementptr inbounds i64*, i64** %out, i32 0
  %gmem_output_buffer_0 = load i64*, i64** %26, align 8
  call void @write_back_non_grouped_agg(i64* %smem_buffer, i64* %gmem_output_buffer_0, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %out, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr, i8 %arg_literal_0) #33 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_head_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = getelementptr i64, i64* %num_rows_per_scan, i32 1
  %num_rows_per_scan1 = load i64, i64* %0, align 8
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %num_rows_per_scan1
  br i1 %have_more_inner_rows, label %loop_body, label %exit

ub_iter_advance_:                                 ; preds = %loop_done_false
  %1 = add i64 %ub_iter_counter_val_, 1
  store i64 %1, i64* %ub_iter_counter_ptr_, align 8
  br label %ub_iter_head_

loop_body:                                        ; preds = %ub_iter_head_
  store i1 true, i1* %loop_done, align 1
  %2 = call i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %ub_iter_counter_val_, i8* %col_buf0, i64 %pos, i64* %out, i1* %loop_done, i8 %arg_literal_0)
  %3 = load i1, i1* %loop_done, align 1
  br i1 %3, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %2

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %ub_iter_counter_val_, i8* %col_buf0, i64 %pos, i64* %out, i1* %loop_done, i8 %arg_literal_0) #33 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 8, i64 %ub_iter_counter_val_)
  %1 = call double @cast_int64_t_to_double_scaled_nullable(i64 %0, i64 -9223372036854775808, double 0x10000000000000, double 1.000000e+02)
  %2 = call double @fixed_width_double_decode(i8* %col_buf0, i64 %pos)
  %3 = call i8 @gt_double_nullable(double %1, double %2, double 0x10000000000000, i8 -128)
  %4 = icmp sgt i8 %3, 0
  %5 = and i1 true, %4
  %6 = icmp sgt i8 %arg_literal_0, 0
  %7 = and i1 %5, %6
  br i1 %7, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  %8 = call i64 @agg_count(i64* %out, i64 0)
  br label %filter_false

filter_false:                                     ; preds = %filter_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0
}

End of IR
2025-04-19T00:18:25.787549 1 38957 4 68 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:18:25.787781 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:18:25.787814 1 38957 4 68 Execute.cpp:2863 Creating multifrag execution kernels
2025-04-19T00:18:25.787820 1 38957 4 68 Execute.cpp:2864 Query Memory Descriptor State
	Query Type: Non-grouped Aggregate
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 0
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	col_to_slot_map=[[0]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: False
	Threads Share Memory: False
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.787914 1 38957 4 68 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.787940 1 38957 4 68 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.787954 I 38957 4 85 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.787964 I 38957 4 85 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.787972 I 38957 4 85 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.787984 I 38957 4 85 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.788005 I 38957 4 85 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.788013 I 38957 4 85 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.788024 I 38957 4 85 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.788043 I 38957 4 85 measure.h:77 Timer start           executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763
2025-04-19T00:18:25.788052 I 38957 4 85 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.788111 1 38957 4 85 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.007168 ms
2025-04-19T00:18:25.788118 1 38957 4 85 GpuInterrupt.cpp:26 Registered module 0x729180680c50 on device 0
2025-04-19T00:18:25.788231 1 38957 4 85 QueryExecutionContext.cpp:474 Device 0: launchGpuCode: prepare: 0 ms
2025-04-19T00:18:25.788239 1 38957 4 85 QueryExecutionContext.cpp:480 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.788244 1 38957 4 85 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.788327 1 38957 4 85 QueryExecutionContext.cpp:506 Device 0: launchGpuCode: cuLaunchKernel: 0 ms
2025-04-19T00:18:25.788403 1 38957 4 85 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.788415 1 38957 4 85 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.788420 I 38957 4 85 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.788429 I 38957 4 85 measure.h:84 Timer end             executePlanWithoutGroupBy           executePlanWithoutGroupBy: 3763 elapsed 0 ms
2025-04-19T00:18:25.788438 I 38957 4 85 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:25.788452 1 38957 4 68 Execute.cpp:2243 Filtered cardinality for fragments-{[0]} : 0
2025-04-19T00:18:25.788477 1 38957 4 68 CodeCacheAccessor.cpp:77 Reuse a cached compiled code
2025-04-19T00:18:25.788495 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 2 ms
2025-04-19T00:18:25.788505 1 38957 4 68 RelAlgExecutor.cpp:3803 Set a new scan limit from filtered_count_all: 1
2025-04-19T00:18:25.788527 1 38957 4 68 RelAlgExecutor.cpp:3902 Use default cardinality for max_groups_buffer_entry_guess: 16384
2025-04-19T00:18:25.788532 1 38957 4 68 Execute.cpp:2026 Executor 3 is executing work unit:
	Extracted Query Plan Dag Hash: 3257942378419421609
	Table/Col/Levels: ((db_id: 0, table_id: -34), 0, 0) ((db_id: 0, table_id: -40), 0, 1) ((db_id: 0, table_id: -40), 1, 1) ((db_id: 0, table_id: -40), 2, 1) ((db_id: 0, table_id: -40), 3, 1) 
	Quals: (> (CAST DOUBLE(0,0) NONE(0) (ColumnVar (db_id: 0, table_id: -40, column_id: 3), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) (ColumnVar (db_id: 0, table_id: -34, column_id: 0), rte: 0 DOUBLE, type: (type=DOUBLE, dimension=0, scale=0, null=nullable, compression_name=NONE, comp_param=0, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) ) 
	Join Quals: 		0 INNER(Const t) 
	Group By: NULL
	Projected targets: (ColumnVar (db_id: 0, table_id: -40, column_id: 0), rte: 1 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=27, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 27), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -40, column_id: 1), rte: 1 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=26, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 26), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -40, column_id: 2), rte: 1 TEXT, type: (type=TEXT, dimension=0, scale=0, null=nullable, compression_name=DICT, comp_param=92, subtype=NULL, size=4, element_size=-1, dict_key=(db_id: 1, string_dict_id: 92), uses_flatbuffer=0)) , (ColumnVar (db_id: 0, table_id: -40, column_id: 3), rte: 1 DECIMAL(7,2), type: (type=DECIMAL, dimension=7, scale=2, null=nullable, compression_name=NONE, comp_param=32, subtype=NULL, size=8, element_size=-1, dict_key=(db_id: 0, string_dict_id: 0), uses_flatbuffer=0)) 
	Has Estimator: True
	Sort Info: 
	  Order Entries: 1 , 2 , 3 
	  Algorithm: Streaming Top N
	  Limit: N/A
	  Offset: 0
	Scan Limit: 1
	Bump Allocator: False
2025-04-19T00:18:25.788555 I 38957 4 68 measure.h:77 Timer start                Exec_executeWorkUnit                 executeWorkUnitImpl: 2095
2025-04-19T00:18:25.788564 I 38957 4 68 measure.h:77 Timer start              query_step_compilation                 executeWorkUnitImpl: 2121
2025-04-19T00:18:25.789217 I 38957 4 68 measure.h:77 Timer start                      buildJoinLoops                      buildJoinLoops:  611
2025-04-19T00:18:25.789230 1 38957 4 68 IRCodegen.cpp:757 Unable to build hash table, falling back to loop join: No equijoin expression found
2025-04-19T00:18:25.789235 I 38957 4 68 measure.h:84 Timer end                        buildJoinLoops                      buildJoinLoops:  611 elapsed 0 ms
2025-04-19T00:18:25.789315 1 38957 4 68 NativeCodegen.cpp:3087 number of hoisted literals: 1 / literal buffer usage: 1 bytes
2025-04-19T00:18:25.789654 3 38957 4 68 NativeCodegen.cpp:3200 Unoptimized IR for the GPU:

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @multifrag_query_hoisted_literals(i32* noundef %0, i32* noundef %1, i64** noundef %2, i32* nocapture noundef readonly %3, i32* nocapture noundef readonly %4, i32* noundef %5, i8*** noundef readonly %6, i8* noundef %7, i64* noundef %8, i64* noundef %9, i32* noundef %10, i64* noundef %11, i64* noundef %12, i8* noundef %13) local_unnamed_addr #29 {
  %15 = load i32, i32* %3, align 4, !tbaa !8
  %16 = load i32, i32* %4, align 4, !tbaa !8
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8*** %6, null
  %20 = zext i32 %15 to i64
  br i1 %19, label %21, label %36

21:                                               ; preds = %32, %18
  %22 = phi i64 [ %33, %32 ], [ 0, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = mul i32 %16, %23
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i64, i64* %8, i64 %25
  %27 = getelementptr inbounds i64, i64* %9, i64 %25
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %23, i32* %5, i8** null, i8* %7, i64* %26, i64* %27, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %21
  %28 = call i1 @check_interrupt()
  %29 = call i32 @get_error_code(i32* %0)
  %30 = select i1 %28, i32 10, i32 %29
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %.error_exit, label %32

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %30, i32* %0)
  ret void

32:                                               ; preds = %.error_check
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !26

35:                                               ; preds = %49, %32, %14
  ret void

36:                                               ; preds = %49, %18
  %37 = phi i64 [ %50, %49 ], [ 0, %18 ]
  %38 = getelementptr inbounds i8**, i8*** %6, i64 %37
  %39 = load i8**, i8*** %38, align 8, !tbaa !16
  %40 = trunc i64 %37 to i32
  %41 = mul i32 %16, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i64, i64* %8, i64 %42
  %44 = getelementptr inbounds i64, i64* %9, i64 %42
  call void @query_group_by_template(i32* %0, i32* %1, i64** %2, i32 %40, i32* %5, i8** %39, i8* %7, i64* %43, i64* %44, i32* %10, i64* %11, i64* %12, i8* %13)
  br label %.interrupt_check2

.interrupt_check2:                                ; preds = %36
  %45 = call i1 @check_interrupt()
  %46 = call i32 @get_error_code(i32* %0)
  %47 = select i1 %45, i32 10, i32 %46
  br label %.error_check1

.error_check1:                                    ; preds = %.interrupt_check2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.error_exit3, label %49

.error_exit3:                                     ; preds = %.error_check1
  call void @record_error_code(i32 %47, i32* %0)
  ret void

49:                                               ; preds = %.error_check1
  %50 = add nuw nsw i64 %37, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %35, label %36, !llvm.loop !26
}
; Function Attrs: uwtable
define void @query_group_by_template(i32* %error_code, i32* %total_matched, i64** %group_by_buffers, i32 %frag_idx, i32* nocapture readonly %row_index_resume, i8** nocapture readonly %byte_stream, i8* nocapture readonly %literals, i64* nocapture readonly %row_count_ptr, i64* nocapture readonly %frag_row_off_ptr, i32* nocapture readonly %max_matched_ptr, i64* nocapture readonly %agg_init_val, i64* nocapture readonly %join_hash_tables, i8* nocapture readonly %row_func_mgr) #33 {
.entry:
  %0 = getelementptr i8*, i8** %byte_stream, i32 0
  %1 = load i8*, i8** %0, align 8
  %2 = getelementptr i8*, i8** %byte_stream, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8*, i8** %byte_stream, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8*, i8** %byte_stream, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8*, i8** %byte_stream, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr i8, i8* %literals, i16 0
  %literal_0 = load i8, i8* %10, align 1
  %row_count = load i64, i64* %row_count_ptr, align 8
  %11 = load i32, i32* %max_matched_ptr, align 8
  %crt_matched = alloca i32, align 4
  %old_total_matched = alloca i32, align 4
  %12 = call i32 @pos_start_impl(i32* %row_index_resume)
  %13 = call i32 @pos_step_impl()
  %14 = call i32 @group_buff_idx_impl()
  %15 = sext i32 %12 to i64
  %16 = getelementptr i64*, i64** %group_by_buffers, i32 %14
  %col_buffer = load i64*, i64** %16, align 8
  %result_buffer = call i64* @init_shared_mem_nop(i64* %col_buffer, i32 0)
  %17 = icmp slt i64 %15, %row_count
  br i1 %17, label %.loop.preheader, label %.exit

.loop.preheader:                                  ; preds = %.entry
  %18 = sext i32 %13 to i64
  br label %.forbody

.forbody:                                         ; preds = %filter_nomatch, %filter_match, %.loop.preheader
  %pos = phi i64 [ %15, %.loop.preheader ], [ %24, %filter_match ], [ %24, %filter_nomatch ]
  store i32 0, i32* %crt_matched, align 4
  %19 = call i32 @row_func_hoisted_literals(i64* %result_buffer, i64* null, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched_ptr, i64* %agg_init_val, i64 %pos, i64* %frag_row_off_ptr, i64* %row_count_ptr, i8* %literals, i8* %1, i8* %3, i8* %5, i8* %7, i8* %9, i64* %join_hash_tables, i8* %row_func_mgr, i8 %literal_0)
  br label %.interrupt_check

.interrupt_check:                                 ; preds = %.forbody
  %20 = call i1 @check_interrupt()
  %21 = select i1 %20, i32 10, i32 %19
  br label %.error_check

.error_check:                                     ; preds = %.interrupt_check
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %.error_exit, label %23

.error_exit:                                      ; preds = %.error_check
  call void @record_error_code(i32 %21, i32* %error_code)
  ret void

23:                                               ; preds = %.error_check
  call void @sync_warp_protected(i64 %pos, i64 %row_count)
  %24 = add i64 %pos, %18
  %25 = icmp slt i64 %24, %row_count
  %crt_matched1 = load i32, i32* %crt_matched, align 4
  %26 = icmp ne i32 %crt_matched1, 0
  br i1 %26, label %filter_match, label %filter_nomatch

filter_match:                                     ; preds = %23
  %27 = load i32, i32* %old_total_matched, align 4
  %28 = add i32 %27, %crt_matched1
  %limit_not_reached = icmp slt i32 %28, %11
  %29 = and i1 %25, %limit_not_reached
  br i1 %29, label %.forbody, label %._crit_edge

filter_nomatch:                                   ; preds = %23
  br i1 %25, label %.forbody, label %._crit_edge

._crit_edge:                                      ; preds = %filter_nomatch, %filter_match
  br label %.exit

.exit:                                            ; preds = %._crit_edge, %.entry
  call void @write_back_nop(i64* %col_buffer, i64* %result_buffer, i32 0)
  ret void
}
; Function Attrs: alwaysinline
define i32 @row_func_hoisted_literals(i64* %group_by_buff, i64* %varlen_output_buff, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %agg_init_val, i64 %pos, i64* %frag_row_off, i64* %num_rows_per_scan, i8* %literals, i8* %col_buf0, i8* %col_buf1, i8* %col_buf2, i8* %col_buf3, i8* %col_buf4, i64* %join_hash_tables, i8* %row_func_mgr, i8 %arg_literal_0) #34 {
entry:
  %loop_done = alloca i1, align 1
  br label %ub_iter_preheader_

exit:                                             ; preds = %ub_iter_head_
  ret i32 0

ub_iter_preheader_:                               ; preds = %entry
  %ub_iter_counter_ptr_ = alloca i64, align 8
  store i64 0, i64* %ub_iter_counter_ptr_, align 8
  %0 = getelementptr i64, i64* %num_rows_per_scan, i32 1
  %num_rows_per_scan1 = load i64, i64* %0, align 8
  br label %ub_iter_head_

ub_iter_head_:                                    ; preds = %ub_iter_advance_, %ub_iter_preheader_
  %ub_iter_counter_val_ = load i64, i64* %ub_iter_counter_ptr_, align 8
  %have_more_inner_rows = icmp slt i64 %ub_iter_counter_val_, %num_rows_per_scan1
  br i1 %have_more_inner_rows, label %loop_body, label %exit

ub_iter_advance_:                                 ; preds = %loop_done_false
  %1 = add i64 %ub_iter_counter_val_, 1
  store i64 %1, i64* %ub_iter_counter_ptr_, align 8
  br label %ub_iter_head_

loop_body:                                        ; preds = %ub_iter_head_
  store i1 true, i1* %loop_done, align 1
  %2 = call i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %ub_iter_counter_val_, i8* %col_buf0, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i1* %loop_done, i8 %arg_literal_0)
  %3 = load i1, i1* %loop_done, align 1
  br i1 %3, label %loop_done_true, label %loop_done_false

loop_done_true:                                   ; preds = %loop_body
  ret i32 %2

loop_done_false:                                  ; preds = %loop_body
  br label %ub_iter_advance_
}
; Function Attrs: alwaysinline
define i32 @filter_func_hoisted_literals(i8* %col_buf4, i64 %ub_iter_counter_val_, i8* %col_buf0, i64 %pos, i32* %crt_matched, i32* %total_matched, i32* %old_total_matched, i32* %max_matched, i64* %group_by_buff, i1* %loop_done, i8 %arg_literal_0) #34 {
entry:
  %0 = call i64 @fixed_width_int_decode(i8* %col_buf4, i32 8, i64 %ub_iter_counter_val_)
  %1 = call double @cast_int64_t_to_double_scaled_nullable(i64 %0, i64 -9223372036854775808, double 0x10000000000000, double 1.000000e+02)
  %2 = call double @fixed_width_double_decode(i8* %col_buf0, i64 %pos)
  %3 = call i8 @gt_double_nullable(double %1, double %2, double 0x10000000000000, i8 -128)
  %4 = icmp sgt i8 %3, 0
  %5 = and i1 true, %4
  %6 = icmp sgt i8 %arg_literal_0, 0
  %7 = and i1 %5, %6
  br i1 %7, label %filter_true, label %filter_false

filter_true:                                      ; preds = %entry
  store i32 1, i32* %crt_matched, align 4
  %8 = atomicrmw add i32* %total_matched, i32 1 monotonic, align 8
  store i32 %8, i32* %old_total_matched, align 4
  %9 = load i32, i32* %max_matched, align 4
  %10 = load i32, i32* %old_total_matched, align 4
  %11 = call i64* @get_scan_output_slot(i64* %group_by_buff, i32 %9, i32 %10, i64 %pos, i32 5)
  %12 = icmp ne i64* %11, null
  br i1 %12, label %groupby_nullcheck_true, label %groupby_nullcheck_false

filter_false:                                     ; preds = %groupby_nullcheck_true, %entry
  store i1 false, i1* %loop_done, align 1
  ret i32 0

groupby_nullcheck_true:                           ; preds = %filter_true
  %agg_col_ptr = getelementptr i64, i64* %11, i64 0
  call void @agg_id_shared(i64* %agg_col_ptr, i64 %ub_iter_counter_val_)
  %agg_col_ptr1 = getelementptr i64, i64* %11, i64 1
  call void @agg_id_shared(i64* %agg_col_ptr1, i64 %ub_iter_counter_val_)
  %agg_col_ptr2 = getelementptr i64, i64* %11, i64 2
  call void @agg_id_shared(i64* %agg_col_ptr2, i64 %ub_iter_counter_val_)
  %agg_col_ptr3 = getelementptr i64, i64* %11, i64 3
  call void @agg_id_shared(i64* %agg_col_ptr3, i64 %0)
  br label %filter_false

groupby_nullcheck_false:                          ; preds = %filter_true
  %13 = trunc i64 %pos to i32
  %14 = sub i32 0, %13
  ret i32 %14
}

End of IR
2025-04-19T00:18:25.789934 1 38957 4 68 CodeCacheAccessor.cpp:28 Reuse cached compiled kernel
2025-04-19T00:18:25.790166 I 38957 4 68 measure.h:84 Timer end                query_step_compilation                 executeWorkUnitImpl: 2121 elapsed 1 ms
2025-04-19T00:18:25.790191 1 38957 4 68 Execute.cpp:2895 Creating one execution kernel per fragment
2025-04-19T00:18:25.790196 1 38957 4 68 Execute.cpp:2896 Query Memory Descriptor State
	Query Type: Projection
	Keyless Hash: False
	Effective key width: 8
	Number of group columns: 1
	Col Slot Context State
	N | P , L
	0 | 8 , 4
	1 | 8 , 4
	2 | 8 , 4
	3 | 8 , 8
	col_to_slot_map=[[0], [1], [2], [3]]
	varlen_output_slot_map={}
	Allow Multifrag: True
	Interleaved Bins on GPU: False
	Blocks Share Memory: True
	Threads Share Memory: True
	Uses Fast Group Values: False
	Lazy Init Groups (GPU): True
	Entry Count: 1
	Min Val (perfect hash only): 0
	Max Val (perfect hash only): 0
	Bucket Val (perfect hash only): 0
	Sort on GPU: False
	Use Streaming Top N: False
	Output Columnar: False
	Allow Lazy Fetch: True
	Render Output: False
	Use Baseline Sort: False
2025-04-19T00:18:25.790249 1 38957 4 68 Execute.cpp:3132 In Executor::LaunchKernels executor 3 requested between 1 and 1 GPU slots, and was granted 1 GPU slots.
2025-04-19T00:18:25.790276 1 38957 4 68 Execute.cpp:2977 Launching 1 kernels for query on GPU using pool of 1 threads.
2025-04-19T00:18:25.790288 I 38957 4 86 measure.h:77 Timer start                          kernel_run                                 run:  133
2025-04-19T00:18:25.790295 I 38957 4 86 measure.h:77 Timer start                         fetchChunks                         fetchChunks: 3381
2025-04-19T00:18:25.790309 I 38957 4 86 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.790320 I 38957 4 86 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.790336 I 38957 4 86 measure.h:77 Timer start                  columnarize_result                  columnarize_result:   36
2025-04-19T00:18:25.790344 I 38957 4 86 measure.h:84 Timer end                    columnarize_result                  columnarize_result:   36 elapsed 0 ms
2025-04-19T00:18:25.790359 I 38957 4 86 measure.h:84 Timer end                           fetchChunks                         fetchChunks: 3381 elapsed 0 ms
2025-04-19T00:18:25.790367 2 38957 4 86 ExecutionKernel.cpp:303 total_num_input_rows=1
2025-04-19T00:18:25.790384 I 38957 4 86 measure.h:77 Timer start              executePlanWithGroupBy              executePlanWithGroupBy: 3992
2025-04-19T00:18:25.790389 2 38957 4 86 Execute.cpp:4027 bool(ra_exe_unit.union_all)=false ra_exe_unit.input_descs=(InputDescriptor(db_id(0), table_id(-34),nest_level(0)) InputDescriptor(db_id(0), table_id(-40),nest_level(1))) ra_exe_unit.input_col_descs=(InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-34),nest_level(0))) InputColDescriptor(col_id(0),InputDescriptor(db_id(0), table_id(-40),nest_level(1))) InputColDescriptor(col_id(1),InputDescriptor(db_id(0), table_id(-40),nest_level(1))) InputColDescriptor(col_id(2),InputDescriptor(db_id(0), table_id(-40),nest_level(1))) InputColDescriptor(col_id(3),InputDescriptor(db_id(0), table_id(-40),nest_level(1)))) ra_exe_unit.scan_limit=1 num_rows=((1 0)) frag_offsets=((0 0)) query_exe_context->query_buffers_->num_rows_=2 query_exe_context->query_mem_desc_.getEntryCount()=1 device_id=0 outer_table_key=(db_id: 0, table_id: -34) scan_limit=1 start_rowid=0 num_tables=2
2025-04-19T00:18:25.790400 I 38957 4 86 measure.h:77 Timer start                        lauchGpuCode                       launchGpuCode:  228
2025-04-19T00:18:25.790427 1 38957 4 86 DeviceKernel.cpp:178 Device 0: launchGpuCode: runtime query interrupter init: 0.006208 ms
2025-04-19T00:18:25.790433 1 38957 4 86 GpuInterrupt.cpp:26 Registered module 0x729180646350 on device 0
2025-04-19T00:18:25.790620 1 38957 4 86 QueryExecutionContext.cpp:315 Device 0: launchGpuCode: group-by prepare: 0 ms
2025-04-19T00:18:25.790627 1 38957 4 86 QueryExecutionContext.cpp:322 Launching(multifrag_query_hoisted_literals) on device_id(0)
2025-04-19T00:18:25.790632 1 38957 4 86 DeviceKernel.cpp:86 Launch GPU kernel compiled with the following block and grid sizes: 1024 and 32
2025-04-19T00:18:25.790721 1 38957 4 86 QueryExecutionContext.cpp:347 Device 0: launchGpuCode: group-by cuLaunchKernel: 0 ms
2025-04-19T00:18:25.790809 1 38957 4 86 GpuInterrupt.cpp:38 Unregistered module on device 0
2025-04-19T00:18:25.790824 1 38957 4 86 QueryExecutionContext.cpp:554 Device 0: launchGpuCode: finish: 0 ms
2025-04-19T00:18:25.790829 I 38957 4 86 measure.h:84 Timer end                          lauchGpuCode                       launchGpuCode:  228 elapsed 0 ms
2025-04-19T00:18:25.790848 2 38957 4 86 Execute.cpp:4139 results->rowCount()=0
2025-04-19T00:18:25.790853 I 38957 4 86 measure.h:84 Timer end                executePlanWithGroupBy              executePlanWithGroupBy: 3992 elapsed 0 ms
2025-04-19T00:18:25.790864 I 38957 4 86 measure.h:84 Timer end                            kernel_run                                 run:  133 elapsed 0 ms
2025-04-19T00:18:25.790882 I 38957 4 68 measure.h:84 Timer end                  Exec_executeWorkUnit                 executeWorkUnitImpl: 2095 elapsed 2 ms
2025-04-19T00:18:25.790891 I 38957 4 68 measure.h:84 Timer end                       executeWorkUnit                     executeWorkUnit: 3651 elapsed 5 ms
2025-04-19T00:18:25.790901 I 38957 4 68 measure.h:84 Timer end                     executeRelAlgStep                   executeRelAlgStep: 1154 elapsed 13 ms
2025-04-19T00:18:25.790908 I 38957 4 68 measure.h:84 Timer end                      executeRelAlgSeq                    executeRelAlgSeq:  895 elapsed 329 ms
2025-04-19T00:18:25.790934 1 38957 4 68 GpuInterrupt.cpp:227 Reset interrupt flag for CPU execution kernel on Executor 3
2025-04-19T00:18:25.790939 I 38957 4 68 measure.h:84 Timer end             executeRelAlgQueryNoRetry           executeRelAlgQueryNoRetry:  612 elapsed 329 ms
2025-04-19T00:18:25.790946 I 38957 4 68 measure.h:84 Timer end                    executeRelAlgQuery                  executeRelAlgQuery:  573 elapsed 329 ms
2025-04-19T00:18:25.790957 I 38957 4 68 RelAlgExecutor.cpp:572 DEBUG_TIMER thread_id(68)
329ms total duration for executeRelAlgQuery
  329ms start(0ms) executeRelAlgQueryNoRetry RelAlgExecutor.cpp:613
    0ms start(0ms) Query pre-execution steps RelAlgExecutor.cpp:614
    329ms start(0ms) executeRelAlgSeq RelAlgExecutor.cpp:896
      5ms start(0ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        5ms start(0ms) executeCompound RelAlgExecutor.cpp:2282
          4ms start(1ms) executeWorkUnit RelAlgExecutor.cpp:3652
            4ms start(1ms) compileWorkUnit NativeCodegen.cpp:2852
              1ms start(2ms) getInstance HashJoin.cpp:297
                1ms start(2ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(2ms) getOneColumnFragment ColumnFetcher.cpp:82
                  0ms start(2ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(69)
                      1ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        1ms start(0ms) initHashTableOnGpu BaselineHashTableBuilder.h:513
                          0ms start(0ms) Initialize GPU Baseline Join Hash Table BaselineHashTableBuilder.h:535
                          1ms start(0ms) Fill GPU Baseline Join Hash Table BaselineHashTableBuilder.h:557
                    End thread(69)
              0ms start(4ms) getInstance HashJoin.cpp:297
                0ms start(4ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(4ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(70)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(70)
              0ms start(4ms) getInstance HashJoin.cpp:297
                0ms start(4ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(4ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(71)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(71)
              0ms start(4ms) getInstance HashJoin.cpp:297
                0ms start(4ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(4ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(72)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(72)
              0ms start(5ms) getInstance HashJoin.cpp:297
                0ms start(5ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(5ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(73)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(73)
      154ms start(5ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        154ms start(5ms) executeCompound RelAlgExecutor.cpp:2282
          154ms start(6ms) executeWorkUnit RelAlgExecutor.cpp:3652
            33ms start(6ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(7ms) getInstance HashJoin.cpp:297
                0ms start(7ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(7ms) initHashTableOnCpuFromCache BaselineJoinHashTable.cpp:1115
              0ms start(7ms) getInstance HashJoin.cpp:297
                0ms start(7ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(7ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(7ms) getInstance HashJoin.cpp:297
                0ms start(7ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(7ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(7ms) getInstance HashJoin.cpp:297
                0ms start(7ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(7ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(7ms) getInstance HashJoin.cpp:297
                0ms start(7ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(7ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(7ms) buildUnionTranslationMapToOtherProxy StringDictionaryProxy.cpp:399
                0ms start(7ms) buildIntersectionTranslationMapToOtherProxyUnlocked StringDictionaryProxy.cpp:268
                  0ms start(7ms) buildDictionaryTranslationMap StringDictionary.cpp:1861
              0ms start(8ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              31ms start(9ms) generateNativeCPUCode NativeCodegen.cpp:441
                8ms start(9ms) optimize_ir NativeCodegen.cpp:312
                23ms start(17ms) create_execution_engine NativeCodegen.cpp:421
              New thread(74)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                119ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  119ms start(0ms) launchCpuCode QueryExecutionContext.cpp:575
                  0ms start(119ms) getRowSet QueryExecutionContext.cpp:161
              End thread(74)
            0ms start(160ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(160ms) reduceMultiDeviceResults Execute.cpp:1528
      5ms start(160ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        5ms start(160ms) executeCompound RelAlgExecutor.cpp:2282
          4ms start(161ms) executeWorkUnit RelAlgExecutor.cpp:3652
            3ms start(161ms) compileWorkUnit NativeCodegen.cpp:2852
              1ms start(162ms) getInstance HashJoin.cpp:297
                1ms start(162ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(162ms) getOneColumnFragment ColumnFetcher.cpp:82
                  0ms start(162ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(75)
                      1ms start(0ms) initHashTableForDevice BaselineJoinHashTable.cpp:782
                        1ms start(0ms) initHashTableOnGpu BaselineHashTableBuilder.h:513
                          0ms start(0ms) Initialize GPU Baseline Join Hash Table BaselineHashTableBuilder.h:535
                          1ms start(0ms) Fill GPU Baseline Join Hash Table BaselineHashTableBuilder.h:557
                    End thread(75)
              0ms start(164ms) getInstance HashJoin.cpp:297
                0ms start(164ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(164ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(76)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(76)
              0ms start(164ms) getInstance HashJoin.cpp:297
                0ms start(164ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(164ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(77)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(77)
              0ms start(164ms) getInstance HashJoin.cpp:297
                0ms start(164ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(164ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(78)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(78)
              0ms start(165ms) getInstance HashJoin.cpp:297
                0ms start(165ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(165ms) getOneColumnFragment ColumnFetcher.cpp:82
                    New thread(79)
                      0ms start(0ms) initHashTableForDevice PerfectJoinHashTable.cpp:803
                        0ms start(0ms) initHashTableOnGpu PerfectHashTableBuilder.h:74
                          0ms start(0ms) Initialize GPU Perfect Hash Table PerfectHashTableBuilder.h:94
                          0ms start(0ms) Fill GPU Perfect Hash Table PerfectHashTableBuilder.h:118
                    End thread(79)
      138ms start(165ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        138ms start(165ms) executeCompound RelAlgExecutor.cpp:2282
          138ms start(166ms) executeWorkUnit RelAlgExecutor.cpp:3652
            2ms start(166ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(167ms) getInstance HashJoin.cpp:297
                0ms start(167ms) reify BaselineJoinHashTable.cpp:260
                  0ms start(167ms) initHashTableOnCpuFromCache BaselineJoinHashTable.cpp:1115
              0ms start(167ms) getInstance HashJoin.cpp:297
                0ms start(167ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(167ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(167ms) getInstance HashJoin.cpp:297
                0ms start(167ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(167ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(167ms) getInstance HashJoin.cpp:297
                0ms start(167ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(167ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(167ms) getInstance HashJoin.cpp:297
                0ms start(167ms) reify PerfectJoinHashTable.cpp:400
                  0ms start(167ms) initHashTableOnCpuFromCache PerfectJoinHashTable.cpp:962
              0ms start(168ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              New thread(80)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                135ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  134ms start(0ms) launchCpuCode QueryExecutionContext.cpp:575
                  0ms start(135ms) getRowSet QueryExecutionContext.cpp:161
              End thread(80)
            0ms start(304ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(304ms) reduceMultiDeviceResults Execute.cpp:1528
      2ms start(304ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        2ms start(304ms) executeAggregate RelAlgExecutor.cpp:2299
          2ms start(305ms) executeWorkUnit RelAlgExecutor.cpp:3652
            1ms start(305ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(306ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(306ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(81)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(81)
            0ms start(307ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(307ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(307ms) reduceMultiDeviceResultSets Execute.cpp:1602
      4ms start(307ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        4ms start(307ms) executeProject RelAlgExecutor.cpp:2330
          4ms start(308ms) executeWorkUnit RelAlgExecutor.cpp:3652
            1ms start(308ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(308ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(309ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(82)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(82)
            0ms start(309ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(309ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(309ms) reduceMultiDeviceResultSets Execute.cpp:1602
            1ms start(310ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(310ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(311ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(83)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(83)
            0ms start(312ms) resultsUnion Execute.cpp:1499
      3ms start(312ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        3ms start(312ms) executeCompound RelAlgExecutor.cpp:2282
          3ms start(313ms) executeWorkUnit RelAlgExecutor.cpp:3652
            1ms start(313ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(314ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(314ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(84)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                1ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(84)
            0ms start(316ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(316ms) reduceMultiDeviceResults Execute.cpp:1528
      13ms start(316ms) executeRelAlgStep RelAlgExecutor.cpp:1155
        13ms start(316ms) executeSort RelAlgExecutor.cpp:3227
          5ms start(323ms) executeWorkUnit RelAlgExecutor.cpp:3652
            1ms start(324ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(325ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(326ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(85)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithoutGroupBy Execute.cpp:3764
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
              End thread(85)
            0ms start(327ms) collectAllDeviceResults Execute.cpp:2630
              0ms start(327ms) reduceMultiDeviceResults Execute.cpp:1528
                0ms start(327ms) reduceMultiDeviceResultSets Execute.cpp:1602
            1ms start(327ms) compileWorkUnit NativeCodegen.cpp:2852
              0ms start(328ms) markDeadRuntimeFuncs NativeCodegen.cpp:1994
              0ms start(328ms) optimizeAndCodegenGPU NativeCodegen.cpp:1417
              New thread(86)
                0ms start(0ms) ExecutionKernel::run ExecutionKernel.cpp:132
                0ms start(0ms) fetchChunks Execute.cpp:3380
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                  0ms start(0ms) ColumnarResults ColumnarResults.cpp:275
                0ms start(0ms) getQueryExecutionContext QueryMemoryDescriptor.cpp:708
                0ms start(0ms) executePlanWithGroupBy Execute.cpp:3991
                  0ms start(0ms) launchGpuCode QueryExecutionContext.cpp:227
                  0ms start(0ms) getRowSet QueryExecutionContext.cpp:161
                    0ms start(0ms) reduceMultiDeviceResults Execute.cpp:1528
                      0ms start(0ms) reduceMultiDeviceResultSets Execute.cpp:1602
              End thread(86)
            0ms start(329ms) resultsUnion Execute.cpp:1499
2025-04-19T00:18:25.791097 I 38957 4 68 DBHandler.cpp:6148 Cache size information {"query_resultset": 0 bytes, "hash_tables": 7580856 bytes, "chunk_metadata": 0 bytes, "query_plan_dag": 480 bytes, "compiled_GPU code": 2758464 bytes, "string_dictionary": 261120 bytes}
2025-04-19T00:18:25.791102 1 38957 4 68 DBHandler.cpp:6221 jsonlog { "name": "CPU Memory Info", "TotalMB": 15841.9, "FreeMB": 9531.01, "ProcessMB": 418.48, "VirtualMB": 21672.1, "ProcessPlusSwapMB": 234.102, "ProcessSharedMB": 184.379, "FragmentationPercent": 44 }
2025-04-19T00:18:25.791344 I 38957 4 1 DBHandler.cpp:1303 DEBUG_TIMER thread_id(1)
396ms total duration for sql_execute
2025-04-19T00:18:25.791368 1 38957 4 1 DBHandler.cpp:1349 Table Schema Locks:
2025-04-19T00:18:25.791375 1 38957 4 1 DBHandler.cpp:1350 Table Data Locks:
2025-04-19T00:18:25.791583 I 38957 4 1 DBHandler.cpp:1300 stdlog sql_execute 11 397 heavyai admin 820-xJl0 {"query_str","client","nonce","execution_time_ms","total_time_ms"} {"with ssales as (select c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size ,sum(ss_net_paid) netpaid from store_sales ,store_returns ,store ,item ,customer ,customer_address where ss_ticket_number = sr_ticket_number and ss_item_sk = sr_item_sk and ss_customer_sk = c_customer_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and c_current_addr_sk = ca_address_sk and c_birth_country <> upper(ca_country) and s_zip = ca_zip and s_market_id = 5 group by c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size) select c_last_name ,c_first_name ,s_store_name ,sum(netpaid) paid from ssales where i_color = 'seashell' group by c_last_name ,c_first_name ,s_store_name having sum(netpaid) > (select 0.05*avg(netpaid) from ssales) order by c_last_name ,c_first_name ,s_store_name ;","tcp:localhost:52676","","382","396"}
2025-04-19T00:18:25.791601 1 38957 4 1 DBHandler.cpp:1300 stacked_times sql_execute 11 total time 397 ms
  parse_to_ra 125970046517248 - total time 53 ms
    processCalciteRequest 125970046517248 - total time 53 ms
      processImpl 125970046517248 - total time 52 ms
  execute_rel_alg 125970841337856 - total time 343 ms
  convertRows 125970046517248 - total time 0 ms
